6.7课后博客作业 iptables


'实验：开放本地的samba端口服务'
	$ iptables -I INPUT -d 172.16.1.70 -p udp --dport 137:138 -j ACCEPT
	$ iptables -I INPUT -d 172.16.1.70 -p tcp -m multiport --dports 139,445 -j ACCEPT
	$ iptables -I OUTPUT -s 172.16.1.70 -p udp --sport 137:138 -j ACCEPT
	$ iptables -I OUTPUT -s 172.16.1.70 -p tcp -m multiport --sports 139,445 -j ACCEPT


'实验1：禁止所有IP访问本地所有端口，仅开放22端口；'
	实现外网访问本机samba服务可以访问，但是其他端口无权访问

	清除所有规则：
		$ iptables -F

	1、定义自定义规则：samba_input_rules
		$ iptables -A samba_input_rules -d 172.16.1.70 -p udp --dprot 137:138 -j ACCEPT
		$ iptables -A samba_input_rules -d 172.16.1.70 -p udp --dport 137:138 -j ACCEPT
		$ iptables -A samba_input_rules -d 172.16.1.70 -p tcp --dport 139 -j ACCEPT
		$ iptables -A samba_input_rules -d 172.16.1.70 -p tcp --dport 445 -j ACCEPT
		$ iptables -A samba_input_rules -s 172.16.1.70 -p udp --sport 137:138 -j ACCEPT
		$ iptables -A samba_input_rules -s 172.16.1.70 -p tcp --sport 139 -j ACCEPT
		$ iptables -A samba_input_rules -s 172.16.1.70 -p tcp --sport 445 -j ACCEPT
		$ iptables -vnL
		Chain INPUT (policy ACCEPT 46 packets, 5266 bytes)
		 pkts bytes target     prot opt in     out     source               destination

		Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
		 pkts bytes target     prot opt in     out     source               destination

		Chain OUTPUT (policy ACCEPT 16 packets, 1488 bytes)
		 pkts bytes target     prot opt in     out     source               destination

		Chain samba_input_rules (0 references)
		 pkts bytes target     prot opt in     out     source               destination
		    0     0 ACCEPT     udp  --  *      *       0.0.0.0/0            172.16.1.70          udp dpts:137:138
		    0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            172.16.1.70          tcp dpt:139
		    0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            172.16.1.70          tcp dpt:445
		    0     0 ACCEPT     udp  --  *      *       172.16.1.70          0.0.0.0/0            udp spts:137:138
		    0     0 ACCEPT     tcp  --  *      *       172.16.1.70          0.0.0.0/0            tcp spt:139
		    0     0 ACCEPT     tcp  --  *      *       172.16.1.70          0.0.0.0/0            tcp spt:445

	2、创建22可以访问的规则：
		$ iptables -A INPUT -d 172.16.1.70 -p tcp --dport 22 -j ACCEPT

		$ iptables -A OUTPUT -s 172.16.1.70 -p tcp --sport 22 -j ACCEPT

	3、禁止所有访问请求：
		$ iptables -A INPUT -d 172.16.1.70 -j REJECT
		$ iptables -A OUTPUT -s 172.16.1.70 -j REJECT

	4、将自定义的samba规则加到禁止访问所有请求的规则之前：
		$ iptables -I INPUT 2 -d 172.16.1.70 -j samba_input_rules

	5、查看规则：
		$ iptables -vnL
		Chain INPUT (policy ACCEPT 1908 packets, 330K bytes)
		 pkts bytes target     prot opt in     out     source               destination
		  623 47409 ACCEPT     tcp  --  *      *       0.0.0.0/0            172.16.1.70          tcp dpt:22
		    0     0 samba_input_rules  all  --  *      *       0.0.0.0/0            172.16.1.70
		    2   120 REJECT     all  --  *      *       0.0.0.0/0            172.16.1.70          reject-with icmp-port-unreachable

		Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
		 pkts bytes target     prot opt in     out     source               destination

		Chain OUTPUT (policy ACCEPT 97 packets, 11574 bytes)
		 pkts bytes target     prot opt in     out     source               destination

		Chain samba_input_rules (1 references)
		 pkts bytes target     prot opt in     out     source               destination
		    0     0 ACCEPT     udp  --  *      *       0.0.0.0/0            172.16.1.70          udp dpts:137:138
		    0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            172.16.1.70          tcp dpt:139
		    0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            172.16.1.70          tcp dpt:445
		    0     0 ACCEPT     udp  --  *      *       172.16.1.70          0.0.0.0/0            udp spts:137:138
		    0     0 ACCEPT     tcp  --  *      *       172.16.1.70          0.0.0.0/0            tcp spt:139
		    0     0 ACCEPT     tcp  --  *      *       172.16.1.70          0.0.0.0/0            tcp spt:445

	6、启动smb,nmb服务，测试
		$ smbpasswd -a centos
		$ systemctl start nmb.service smb.service 

		客户端测试：
		$ smbclient -L 172.16.1.70 -U centos
		Enter centoss password:
		Domain=[MYGROUP] OS=[Windows 6.1] Server=[Samba 4.2.3]

			Sharename       Type      Comment
			---------       ----      -------
			IPC$            IPC       IPC Service (Samba Server Version 4.2.3)
			centos          Disk      Home Directories
		Domain=[MYGROUP] OS=[Windows 6.1] Server=[Samba 4.2.3]

			Server               Comment
			---------            -------
			TEST-2               Samba Server Version 4.2.3

			Workgroup            Master
			---------            -------
			MYGROUP

		测试成功

	7、删除自定义链
		清空引用：
		$ iptables -D INPUT 2 

		删除链：
		$ iptables -F samba_input_rules		#清空链中的规则 
		$ iptables -X samba_input_rules

		[root@test-2 ~]# iptables -D INPUT 2
		[root@test-2 ~]# iptables -F samba_input_rules
		[root@test-2 ~]# iptables -X samba_input_rules
		[root@test-2 ~]# iptable -vnL
		-bash: iptable: command not found
		[root@test-2 ~]# iptables -vnL
		Chain INPUT (policy ACCEPT 69 packets, 10120 bytes)
		 pkts bytes target     prot opt in     out     source               destination
		  935 69241 ACCEPT     tcp  --  *      *       0.0.0.0/0            172.16.1.70          tcp dpt:22
		    2   120 REJECT     all  --  *      *       0.0.0.0/0            172.16.1.70          reject-with icmp-port-unreachable

		Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
		 pkts bytes target     prot opt in     out     source               destination

		Chain OUTPUT (policy ACCEPT 31 packets, 2912 bytes)
		 pkts bytes target     prot opt in     out     source               destination


		'清空规则计数器：'
			$ iptables -Z INPUT  #清空INPUT链规则中的所有计数器
			$ iptables -Z INPUT 1 #清空INPUT链 第一个规则的计数器




'实验2：'
	控制icmp：

	只允许本机发出ping请求，但不允许别人请求本机
	$ iptables -I INPUT 2 -d 172.16.1.70 -p icmp --icmp-type 0 -j ACCEPT 

	允许别人发送ping请求到本机：
	$ iptables -I INPUT 3 -d 172.16.1.70 -p icmp --icmp-type 8 -j ACCEPT



'实验3：'
	添加多个端口允许访问：
	$ iptables -R INPUT 1 -d 172.16.1.70 -p tcp -m multiport --dports 22,80,139,445 -j ACCEPT
		允许 22,80,139,445端口被访问


'实验4：'
	添加连续的地址允许访问23端口：(telnet服务)
	$ iptables -I INPUT 2 -d 172.16.1.70 -p tcp --dport 23 -m iprange --src-range 172.16.1.0-172.16.1.255 -j ACCEPT


'实验5：'
	如果请求访问的资源有"gay"字符串，则拒绝访问

	[root@test-2 ~]# systemctl start httpd
	[root@test-2 ~]# vim /var/www/html/index.html
	[root@test-2 ~]# cat /var/www/html/index.html
	hellow gay
	[root@test-2 ~]# iptables -I INPUT -d 172.16.1.70 -p tcp -m multiport --dports 80,443 -m string --algo bm --string "gay" -j REJECT
	[root@test-2 ~]# iptables -I OUTPUT -s 172.16.1.70 -p tcp -m multiport --sports 80,443 -m string --algo bm --string "gay" -j REJECT
	[root@test-2 ~]# iptables -vnL
	Chain INPUT (policy ACCEPT 49 packets, 4876 bytes)
	 pkts bytes target     prot opt in     out     source               destination
	    0     0 REJECT     tcp  --  *      *       0.0.0.0/0            172.16.1.70          multiport dports 80,443 STRING match  "gay" ALGO name bm TO 65535 reject-with icmp-port-unreachable

	Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
	 pkts bytes target     prot opt in     out     source               destination

	Chain OUTPUT (policy ACCEPT 15 packets, 1360 bytes)
	 pkts bytes target     prot opt in     out     source               destination
	    0     0 REJECT     tcp  --  *      *       172.16.1.70          0.0.0.0/0            multiport sports 80,443 STRING match  "gay" ALGO name bm TO 65535 reject-with icmp-port-unreachable
	[root@test-2 ~]# vim /var/www/html/test.html
	[root@test-2 ~]# cat /var/www/html/test.html
	Test Page


	另一台主机进行测试：
	[root@test-3 ~]# curl http://172.16.1.70/			#访问不到 一直停在等待返回页面的状态
	^C
	[root@test-3 ~]# curl http://172.16.1.70/test.html
	Test Page





'实验6：'
	使用state建立规则


	1、已建立的连接，可以继续连接不会被拒绝；新连接全部会被拒绝
		[root@test-2 ~]# iptables -A INPUT -d 172.16.1.70 -m state --state ESTABLISHED -j ACCEPT
		[root@test-2 ~]# iptables -A INPUT -s 172.16.1.70 -m state --state ESTABLISHED -j ACCEPT
		[root@test-2 ~]# iptables -A INPUT -d 172.16.1.70 -j REJECT
		[root@test-2 ~]# iptables -A INPUT -s 172.16.1.70 -j REJECT

		[root@test-2 ~]# iptables -vnL
		Chain INPUT (policy ACCEPT 21 packets, 5501 bytes)
		 pkts bytes target     prot opt in     out     source               destination
		  362 28329 ACCEPT     all  --  *      *       0.0.0.0/0            172.16.1.70          state ESTABLISHED
		    0     0 ACCEPT     all  --  *      *       172.16.1.70          0.0.0.0/0            state ESTABLISHED
		    1    64 REJECT     all  --  *      *       0.0.0.0/0            172.16.1.70          reject-with icmp-port-unreachable
		    0     0 REJECT     all  --  *      *       172.16.1.70          0.0.0.0/0            reject-with icmp-port-unreachable

		Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
		 pkts bytes target     prot opt in     out     source               destination

		Chain OUTPUT (policy ACCEPT 29 packets, 2848 bytes)
		 pkts bytes target     prot opt in     out     source               destination


	2、对于80，22，443，3306，139，445端口的新连接放行：
	[root@test-2 ~]# iptables -I INPUT 2 -d 172.16.1.70 -p tcp -m multiport --dports 22,21,80,443,3306,139,445 -m state --state NEW -j ACCEPT
	
	[root@test-2 ~]# iptables -vnL
	Chain INPUT (policy ACCEPT 26 packets, 4354 bytes)
	 pkts bytes target     prot opt in     out     source               destination
	  778 57601 ACCEPT     all  --  *      *       0.0.0.0/0            172.16.1.70          state ESTABLISHED
	    0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            172.16.1.70          multiport dports 22,80,443,3306,139,445 state NEW
	    0     0 ACCEPT     all  --  *      *       172.16.1.70          0.0.0.0/0            state ESTABLISHED
	    5   424 REJECT     all  --  *      *       0.0.0.0/0            172.16.1.70          reject-with icmp-port-unreachable
	    4   312 REJECT     all  --  *      *       172.16.1.70          0.0.0.0/0            reject-with icmp-port-unreachable

	Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
	 pkts bytes target     prot opt in     out     source               destination

	Chain OUTPUT (policy ACCEPT 20 packets, 1856 bytes)
	 pkts bytes target     prot opt in     out     source               destination





'实验7：'
	放行ftp端口，使得远程正常访问ftp服务，并上传下载
		'注意：ftp服务连接时是命令接口，也就是21端口；但是之后ls,各种命令是另一种协议，也就是另一个端口(而且是随机端口)'
			要开放：
				RELATED：相关联的连接，当前连接是一个新请求，但附属于某个已存在的连接；

	[root@test-2 ~]# iptables -R INPUT 1 -d 172.16.1.70 -m state --state ESTABLISHED,RELATED -j ACCEPT
	[root@test-2 ~]# iptables -vnL
	Chain INPUT (policy ACCEPT 20 packets, 4942 bytes)
	 pkts bytes target     prot opt in     out     source               destination
	   41  2852 ACCEPT     all  --  *      *       0.0.0.0/0            172.16.1.70          state RELATED,ESTABLISHED
	    3   180 ACCEPT     tcp  --  *      *       0.0.0.0/0            172.16.1.70          multiport dports 21,22,80,443,3306,139,445 state NEW
	    0     0 ACCEPT     all  --  *      *       172.16.1.70          0.0.0.0/0            state ESTABLISHED
	   18  1564 REJECT     all  --  *      *       0.0.0.0/0            172.16.1.70          reject-with icmp-port-unreachable
	   17  1503 REJECT     all  --  *      *       172.16.1.70          0.0.0.0/0            reject-with icmp-port-unreachable

	Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
	 pkts bytes target     prot opt in     out     source               destination

	Chain OUTPUT (policy ACCEPT 21 packets, 1912 bytes)
	 pkts bytes target     prot opt in     out     source               destination


	 但是 RELATED 依赖于一个模块，追踪模块：modinfo nf_conntrack_ftp 
	 	nf_conntrack_ftp：ftp的连接追踪

	 	[root@test-2 ~]# modinfo nf_conntrack_ftp
		filename:       /lib/modules/3.10.0-327.el7.x86_64/kernel/net/netfilter/nf_conntrack_ftp.ko
		alias:          nfct-helper-ftp
		alias:          ip_conntrack_ftp
		description:    ftp connection tracking helper
		author:         Rusty Russell <rusty@rustcorp.com.au>
		license:        GPL
		rhelversion:    7.2
		srcversion:     0ACE8DDC67894D5762DC6E6
		depends:        nf_conntrack
		intree:         Y
		vermagic:       3.10.0-327.el7.x86_64 SMP mod_unload modversions
		signer:         CentOS Linux kernel signing key
		sig_key:        79:AD:88:6A:11:3C:A0:22:35:26:33:6C:0F:82:5B:8A:94:29:6A:B3
		sig_hashalgo:   sha256
		parm:           ports:array of ushort
		parm:           loose:bool

	 装载模块：
	 	$ modprobe nf_conntrack_ftp
	 	[root@test-2 ~]# modprobe nf_conntrack_ftp
		[root@test-2 ~]# lsmod | grep
		Usage: grep [OPTION]... PATTERN [FILE]...
		Try 'grep --help' for more information.
		[root@test-2 ~]# lsmod | grep nf
		nf_conntrack_ftp       18638  0
		nf_conntrack_ipv4      14862  3
		nf_defrag_ipv4         12729  1 nf_conntrack_ipv4
		nf_conntrack          105745  3 xt_conntrack,nf_conntrack_ftp,nf_conntrack_ipv4
		nfsd                  302418  1
		auth_rpcgss            59343  1 nfsd
		nfs_acl                12837  1 nfsd
		lockd                  93600  1 nfsd
		grace                  13295  2 nfsd,lockd
		sunrpc                300464  7 nfsd,auth_rpcgss,lockd,nfs_acl

	 再进行测试就可以成功了
	 	[root@test-3 ~]# ftp 172.16.1.70
		Connected to 172.16.1.70 (172.16.1.70).
		220 (vsFTPd 3.0.2)
		Name (172.16.1.70:root): ftp
		331 Please specify the password.
		Password:
		230 Login successful.
		Remote system type is UNIX.
		Using binary mode to transfer files.
		ftp> ls
		227 Entering Passive Mode (172,16,1,70,131,189).
		150 Here comes the directory listing.
		drwxr-xr-x    2 0        0            4096 Nov 20  2015 pub
		226 Directory send OK.
		ftp> cd pub
		250 Directory successfully changed.
		ftp> ls
		227 Entering Passive Mode (172,16,1,70,143,99).
		150 Here comes the directory listing.
		226 Directory send OK.



'实验8：'
	保存现有的iptables配置文件至指定文件内：

		[root@test-2 ~]# mkdir iptables-rules
		[root@test-2 ~]# iptables-save > iptables-rules/rules1
		[root@test-2 ~]# cat iptables-rules/rules1
		# Generated by iptables-save v1.4.21 on Wed Jun  7 22:38:01 2017
		*filter
		:INPUT ACCEPT [5290:1330299]
		:FORWARD ACCEPT [0:0]
		:OUTPUT ACCEPT [366:36688]
		-A INPUT -d 172.16.1.70/32 -m state --state RELATED,ESTABLISHED -j ACCEPT
		-A INPUT -d 172.16.1.70/32 -p tcp -m multiport --dports 21,22,80,443,3306,139,445 -m state --state NEW -j ACCEPT
		-A INPUT -s 172.16.1.70/32 -m state --state ESTABLISHED -j ACCEPT
		-A INPUT -d 172.16.1.70/32 -j REJECT --reject-with icmp-port-unreachable
		-A INPUT -s 172.16.1.70/32 -j REJECT --reject-with icmp-port-unreachable
		COMMIT
		# Completed on Wed Jun  7 22:38:01 2017

	还原iptables配置从配合文件内导入：
		[root@test-2 ~]# iptables -F
		[root@test-2 ~]# iptables -vnL
		Chain INPUT (policy ACCEPT 35 packets, 4482 bytes)
		 pkts bytes target     prot opt in     out     source               destination

		Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
		 pkts bytes target     prot opt in     out     source               destination

		Chain OUTPUT (policy ACCEPT 12 packets, 1104 bytes)
		 pkts bytes target     prot opt in     out     source               destination
		
		'[root@test-2 ~]# iptables-restore < iptables-rules/rules1'
		
		[root@test-2 ~]# iptables -vnL
		Chain INPUT (policy ACCEPT 13 packets, 2693 bytes)
		 pkts bytes target     prot opt in     out     source               destination
		   29  2012 ACCEPT     all  --  *      *       0.0.0.0/0            172.16.1.70          state RELATED,ESTABLISHED
		    0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            172.16.1.70          multiport dports 21,22,80,443,3306,139,445 state NEW
		    0     0 ACCEPT     all  --  *      *       172.16.1.70          0.0.0.0/0            state ESTABLISHED
		    0     0 REJECT     all  --  *      *       0.0.0.0/0            172.16.1.70          reject-with icmp-port-unreachable
		    0     0 REJECT     all  --  *      *       172.16.1.70          0.0.0.0/0            reject-with icmp-port-unreachable

		Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
		 pkts bytes target     prot opt in     out     source               destination

		Chain OUTPUT (policy ACCEPT 15 packets, 1360 bytes)
		 pkts bytes target     prot opt in     out     source               destination



'实验9：'
	创建iptables配置文件开机自动导入的Unit File文件：('步骤可能有问题，之后再处理')

	1、先复制一份别的程序的Unit File： 
		$ cp /usr/lib/systemd/system/httpd.service /usr/lib/systemd/system/iptables.service

	2、编辑配置文件：
		$ vim /usr/lib/systemd/system/iptables.service
		[Unit]
		Description=iptables rules constructor							#描述
		After=network.target remote-fs.target nss-lookup.target

		[Service]
		Type=notify
		ExecStart=/usr/sbin/iptables-restore /root/iptables-rules/rules1		#启动时执行
		ExecReload=/usr/sbin/iptables-restore /root/iptables-rules/rules1		#重载时执行
		ExecStop=/usr/sbin/iptables -F 											#停止时执行

		[Install]
		WantedBy=multi-user.target		#多用户模式下运行

	3、装载配置文件：
		$ systemctl daemon-reload

	4、启动自定义配置：
		$ systemctl enable iptables
		$ systemctl start iptables


	CentOS6：
		保存规则：
			service iptables save 
			保存于 /etc/sysconfig/iptables 文件中
		重载规则：
			service iptables restart 
			默认重载 /etc/sysconfig/iptables 文件 


'实验10：'
	三台机器之间实现路由功能，中间的Linux主机开启核心转发功能：

		1、开启核心转发功能：
			$ sysctl -w net.ipv4.ip_forward=1
			$ cat /proc/net/ipv4/ip_forward

		2、修改各个需要路由转发的主机的默认网关：
			$ route -n
			$ route del -net 0.0.0.0
			$ route add default gw ............

		3、测试连通性



'实验11：通过SNAT功能，对服务器隐藏访问的客户端的IP地址'：
	1、安装httpd

	2、实现实验10的路由转发功能

	3、在路由器上配置策略：
		[root@test-2 ~]# iptables -t nat -A POSTROUTING -s 172.16.0.0/16 -j SNAT --to-source 192.168.1.254
		[root@test-2 ~]# iptables -t nat -vnL
		Chain PREROUTING (policy ACCEPT 77 packets, 8441 bytes)
		 pkts bytes target     prot opt in     out     source               destination

		Chain INPUT (policy ACCEPT 6 packets, 675 bytes)
		 pkts bytes target     prot opt in     out     source               destination

		Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)
		 pkts bytes target     prot opt in     out     source               destination

		Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes)
		 pkts bytes target     prot opt in     out     source               destination
		    0     0 SNAT       all  --  *      *       172.16.0.0/16        0.0.0.0/0            to:192.168.1.254
		[root@test-2 ~]#

	4、在172网段的机器上测试：
		[root@test-1 ~]# curl http://192.168.1.10/index.html
		<h1> hello world </h1>

		<h2> IP: 192.168.1.10 </h2>

	5、在服务器上访问日志：
		[root@test-3 media]# tail /var/log/httpd/access_log
		172.16.1.100 - - [08/Jun/2017:02:40:31 +0800] "GET /index.html HTTP/1.1" 200 52 "-" "curl/7.29.0"			#这是之前没有加策略的时候访问的日志记录
		192.168.1.254 - - [08/Jun/2017:02:44:43 +0800] "GET /index.html HTTP/1.1" 200 52 "-" "curl/7.29.0"

	6、使用tcpdump命令在http服务器上抓包查看：
		[root@test-3 media]# tcpdump -nn tcp port 80
		tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
		listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes
		02:46:35.614003 IP 192.168.1.254.46861 > 192.168.1.10.80: Flags [S], seq 425593638, win 29200, options [mss 1460,sackOK,TS val 60592391 ecr 0,nop,wscale 7], length 0
		02:46:35.614047 IP 192.168.1.10.80 > 192.168.1.254.46861: Flags [S.], seq 1381695152, ack 425593639, win 28960, options [mss 1460,sackOK,TS val 887976 ecr 60592391,nop,wscale 7], length 0
		02:46:35.614322 IP 192.168.1.254.46861 > 192.168.1.10.80: Flags [.], ack 1, win 229, options [nop,nop,TS val 60592392 ecr 887976], length 0
		02:46:35.614405 IP 192.168.1.254.46861 > 192.168.1.10.80: Flags [P.], seq 1:87, ack 1, win 229, options [nop,nop,TS val 60592392 ecr 887976], length 86
		02:46:35.614457 IP 192.168.1.10.80 > 192.168.1.254.46861: Flags [.], ack 87, win 227, options [nop,nop,TS val 887976 ecr 60592392], length 0
		02:46:35.615046 IP 192.168.1.10.80 > 192.168.1.254.46861: Flags [P.], seq 1:294, ack 87, win 227, options [nop,nop,TS val 887977 ecr 60592392], length 293
		02:46:35.615297 IP 192.168.1.254.46861 > 192.168.1.10.80: Flags [.], ack 294, win 237, options [nop,nop,TS val 60592393 ecr 887977], length 0
		02:46:35.615460 IP 192.168.1.254.46861 > 192.168.1.10.80: Flags [F.], seq 87, ack 294, win 237, options [nop,nop,TS val 60592393 ecr 887977], length 0
		02:46:35.615519 IP 192.168.1.10.80 > 192.168.1.254.46861: Flags [F.], seq 294, ack 88, win 227, options [nop,nop,TS val 887977 ecr 60592393], length 0
		02:46:35.615694 IP 192.168.1.254.46861 > 192.168.1.10.80: Flags [.], ack 295, win 237, options [nop,nop,TS val 60592393 ecr 887977], length 0






'实验12：通过DNAT功能，隐藏服务器IP地址：'
	1、在上一个实验的基础上： 添加如下一条规则
		[root@test-2 ~]# iptables -t nat -A PREROUTING -d 172.6.1.70 -p tcp --dport 80 -j DNAT --to-destination 192.168.1.10
		
		[root@test-2 ~]# iptables -t nat -vnL
		Chain PREROUTING (policy ACCEPT 141 packets, 11965 bytes)
		 pkts bytes target     prot opt in     out     source               destination
		    0     0 DNAT       tcp  --  *      *       0.0.0.0/0            172.6.1.70           tcp dpt:80 to:192.168.1.10

		Chain INPUT (policy ACCEPT 4 packets, 727 bytes)
		 pkts bytes target     prot opt in     out     source               destination

		Chain OUTPUT (policy ACCEPT 1 packets, 255 bytes)
		 pkts bytes target     prot opt in     out     source               destination

		Chain POSTROUTING (policy ACCEPT 1 packets, 255 bytes)
		 pkts bytes target     prot opt in     out     source               destination
		   19  1987 SNAT       all  --  *      *       172.16.0.0/16        0.0.0.0/0            to:192.168.1.254
		[root@test-2 ~]#

	2、在另一台服务器上进行测试：
		[root@test-1 ~]# curl http://192.168.1.10
		<h1> hello world </h1>

		<h2> IP: 192.168.1.10 </h2>
		[root@test-1 ~]# curl http://172.16.1.70
		<h1> hello world </h1>

		<h2> IP: 192.168.1.10 </h2>
				
	3、查看httpd的日志
		要使得不再隐藏客户端IP，清楚POSTROUTING：
			$ iptables -t nat -D POSTROUTING 1
		再测试 

		再查看日志：
			[root@test-3 ~]# tail /var/log/httpd/access_log
			192.168.1.254 - - [08/Jun/2017:09:11:23 +0800] "GET / HTTP/1.1" 200 52 "-" "curl/7.29.0"
			192.168.1.254 - - [08/Jun/2017:09:12:35 +0800] "GET / HTTP/1.1" 200 52 "-" "curl/7.29.0"
			192.168.1.254 - - [08/Jun/2017:09:12:36 +0800] "GET / HTTP/1.1" 200 52 "-" "curl/7.29.0"
			172.16.1.100 - - [08/Jun/2017:09:13:19 +0800] "GET / HTTP/1.1" 200 52 "-" "curl/7.29.0"







'安装layer7，实现禁止登陆QQ，迅雷等程序：'
	参考http://maxiecloud.com博客下的关于layer7的文章

#yum -y groupinstall "Development Libraries" "Development Tools" 
#yum -y install ncurses-devel 
	1、拷贝ftp上的iptables目录到服务器
		$ lftp 172.16.0.1
		> mget pub/Source/source/kernel/linux.....2.6.32
		> mget pub/Source/source/iptables/*

	2、解压内核包以及netfilter-layer7-v2.23.tar.bz2
		$ tar xf linux... -C /usr/src
		$ tar xf netfilter-layer7-v2.23.tar.bz2 -C /usr/src

	3、创建软连接，并拷贝config文件到linux内核解压后的目录中
		$ ln –s  linux-2.6.28.10  linux
		$ cd /usr/src/linux/
		$ patch -p1  <  ../netfilter-layer7-v2.22/kernel-2.6.25-2.6.28-layer7-2.22.patch 

		$ cp /boot/config-2.6.18-164.el5  /usr/src/linux/.config
		$ make  menuconfig
			在打开的界面中执行如下的操作：将选择的模块加载：

			Networking support → Networking Options →Network packet filtering framework →Core Netfilter Configuration
			<M>  Netfilter connection tracking support 
			<M>  “layer7” match support
			<M>  “string” match support
			<M>  “time”  match support
			<M>  “iprange”  match support
			<M>  “connlimit”  match support
			<M>  “state”  match support
			<M>  “conntrack”  connection  match support
			<M>  “mac”  address  match support
			<M>   "multiport" Multiple port match support


			Networking support → Networking Options →Network packet filtering framework → IP: Netfilter Configuration
			<M> IPv4 connection tracking support (required for NAT)
			<M>   Full NAT
				<M>     MASQUERADE target support                                                                                   
				<M>     NETMAP target support                                                                               
				<M>     REDIRECT target support 


	4、编译内核：
		$ yum install screen 	#防止中途中断
		$ screen
		$ make 
		$ make modules_install
		$ make install


	5、开始编译iptables：
		Compiles iptables :

		$ cp /etc/init.d/iptables ~/iptables
		$ cp /etc/sysconfig/iptables-config ~/
		$ rpm  -e  iptables-ipv6  iptables  iptstate  --nodeps
		$ tar jxvf iptables-1.4.6.tar.bz2 –C  /usr/src
		$ cd /usr/src/iptables-1.4.6
		$ cp ../netfilter-layer7-v2.22/iptables-1.4.3forward-for-kernel-2.6.20forward/libxt_layer7.*   ./extensions/


		$ ./configure  --prefix=/usr  --with-ksource=/usr/src/linux
		$ make
		$ make install

		2.编译安装iptables
		2.1卸载系统上自带的rpm格式的iptables
		在卸载之前我们先把iptables的启动脚本及脚本配置文件拷贝到/目录下待会有用 
		#cp /etc/init.d/iptables / 
		#cp /etc/sysconfig/iptables-config / 
		卸载iptables 
		#rpm -e iptables-ipv6  iptables iptstate --nodeps 
		2.2编译安装iptables
		    首先下载iptables-1.4.6.tar.bz2包到系统的/usr/src目录,然后如下
		#cd /usr/src
		#tar jxvf iptables-1.4.6.tar.bz2 
		#cd iptables-1.4.6 
		#cp ../netfilter-layer7-v2.22/iptables-1.4.3forward-for-kernel-2.6.20forward/libxt_layer7.* ./extensions/ 
		#./configure --prefix=/usr --with-ksource=/usr/src/linux 
		#make 
		#make install 
		3.安装l7protocols 
		   l7protocols 是layer7所能够支持的协议包
		  下载l7-protocols-2009-05-28.tar.gz到/usr/src目录,然后如下,
		#cd /usr/src 
		#tar xzvf l7-protocols-2009-05-28.tar.gz 
		#cd l7-protocols-2009-05-28 
		#make install 
		4.修改iptables启动脚本
		   就是上面2.1复制的两个文件,在根目录下
		4.1 修改iptables启动脚本
		首先将脚本跟配置文件复制到相应的目录然后再做修改  
		#cp /iptables-config /etc/sysconfig/  
		#cp /iptables /etc/init.d/  
		#chmod a+x /etc/init.d/iptables  
		#vim /etc/init.d/iptables 把所有/sbin/$IPTABLES替换为/usr/sbin/$IPTABLES   在vim命令模式下:%s@/sbin/$IPTABLES@/usr/sbin/$IPTABLES@g  然后保存退出,  
		我们把修改后的/etc/init.d/iptables 脚本文件贴出来,如下  
		#!/bin/sh 
		# 
		# iptables  Start iptables firewall 
		# 
		# chkconfig: 2345 08 92 
		# description:  Starts, stops and saves iptables firewall 
		# 
		# config: /etc/sysconfig/iptables 
		# config: /etc/sysconfig/iptables-config 
		# Source function library. 
		. /etc/init.d/functions 
		IPTABLES=iptables
		IPTABLES_DATA=/etc/sysconfig/$IPTABLES 
		IPTABLES_CONFIG=/etc/sysconfig/${IPTABLES}-config 
		IPV=${IPTABLES%tables} # ip for ipv4 | ip6 for ipv6 
		PROC_IPTABLES_NAMES=/proc/net/${IPV}_tables_names 
		VAR_SUBSYS_IPTABLES=/var/lock/subsys/$IPTABLES 
		if [ ! -x /usr/sbin/$IPTABLES ]; then 
		    echo -n $"/usr/sbin/$IPTABLES does not exist."; warning; echo 
		    exit 0 
		fi 
		if lsmod 2>/dev/null | grep -q ipchains ; then 
		    echo -n $"ipchains and $IPTABLES can not be used together."; warning; echo 
		    exit 1 
		fi 
		# Old or new modutils 
		/sbin/modprobe --version 2>&1 | grep -q module-init-tools \ 
		    && NEW_MODUTILS=1 \ 
		    || NEW_MODUTILS=0
		# Default firewall configuration: 
		IPTABLES_MODULES=""
		IPTABLES_MODULES_UNLOAD="yes"
		IPTABLES_SAVE_ON_STOP="no"
		IPTABLES_SAVE_ON_RESTART="no"
		IPTABLES_SAVE_COUNTER="no"
		IPTABLES_STATUS_NUMERIC="yes"
		IPTABLES_SYSCTL_LOAD_LIST=""
		# Load firewall configuration. 
		[ -f "$IPTABLES_CONFIG" ] && . "$IPTABLES_CONFIG" 
		rmmod_r() { 
		    # Unload module with all referring modules. 
		    # At first all referring modules will be unloaded, then the module itself. 
		    local mod=$1 
		    local ret=0
		    local ref= 
		    # Get referring modules. 
		    # New modutils have another output format. 
		    [ $NEW_MODUTILS = 1 ] \ 
		    && ref=`lsmod | awk "/^${mod}/ { print \\\$4; }" | tr ',' ' '` \ 
		    || ref=`lsmod | grep ^${mod} | cut -d "[" -s -f 2 | cut -d "]" -s -f 1` 
		    # recursive call for all referring modules 
		    for i in $ref; do 
		    rmmod_r $i 
		    let ret+=$?; 
		    done 
		    # Unload module. 
		    # The extra test is for 2.6: The module might have autocleaned, 
		    # after all referring modules are unloaded. 
		    if grep -q "^${mod}" /proc/modules ; then 
		    modprobe -r $mod > /dev/null 2>&1 
		    let ret+=$?; 
		    fi 
		    return $ret 
		} 
		flush_n_delete() { 
		    # Flush firewall rules and delete chains. 
		    [ -e "$PROC_IPTABLES_NAMES" ] || return 1 
		    # Check if firewall is configured (has tables) 
		tables=`cat $PROC_IPTABLES_NAMES 2>/dev/null` 
		    [ -z "$tables" ] && return 1 
		    echo -n $"Flushing firewall rules: " 
		ret=0
		    # For all tables 
		    for i in $tables; do 
		        # Flush firewall rules. 
		    $IPTABLES -t $i -F; 
		    let ret+=$?; 
		        # Delete firewall chains. 
		    $IPTABLES -t $i -X; 
		    let ret+=$?; 
		    # Set counter to zero. 
		    $IPTABLES -t $i -Z; 
		    let ret+=$?; 
		    done 
		    [ $ret -eq 0 ] && success || failure 
		    echo 
		    return $ret 
		} 
		set_policy() { 
		    # Set policy for configured tables. 
		policy=$1 
		    # Check if iptable module is loaded 
		    [ ! -e "$PROC_IPTABLES_NAMES" ] && return 1 
		    # Check if firewall is configured (has tables) 
		tables=`cat $PROC_IPTABLES_NAMES 2>/dev/null` 
		    [ -z "$tables" ] && return 1 
		    echo -n $"Setting chains to policy $policy: " 
		ret=0
		    for i in $tables; do 
		    echo -n "$i " 
		    case "$i" in 
		        raw) 
		        $IPTABLES -t raw -P PREROUTING $policy \ 
		            && $IPTABLES -t raw -P OUTPUT $policy \ 
		            || let ret+=1 
		        ;; 
		        filter) 
		                $IPTABLES -t filter -P INPUT $policy \ 
		            && $IPTABLES -t filter -P OUTPUT $policy \ 
		            && $IPTABLES -t filter -P FORWARD $policy \ 
		            || let ret+=1 
		        ;; 
		        nat) 
		        $IPTABLES -t nat -P PREROUTING $policy \ 
		            && $IPTABLES -t nat -P POSTROUTING $policy \ 
		            && $IPTABLES -t nat -P OUTPUT $policy \ 
		            || let ret+=1 
		        ;; 
		        mangle) 
		            $IPTABLES -t mangle -P PREROUTING $policy \ 
		            && $IPTABLES -t mangle -P POSTROUTING $policy \ 
		            && $IPTABLES -t mangle -P INPUT $policy \ 
		            && $IPTABLES -t mangle -P OUTPUT $policy \ 
		            && $IPTABLES -t mangle -P FORWARD $policy \ 
		            || let ret+=1 
		        ;; 
		        *) 
		            let ret+=1 
		        ;; 
		        esac 
		    done 
		    [ $ret -eq 0 ] && success || failure 
		    echo 
		    return $ret 
		} 
		load_sysctl() { 
		    # load matched sysctl values 
		    if [ -n "$IPTABLES_SYSCTL_LOAD_LIST" ]; then 
		        echo -n $"Loading sysctl settings: " 
		ret=0
		        for item in $IPTABLES_SYSCTL_LOAD_LIST; do 
		            fgrep $item /etc/sysctl.conf | sysctl -p - >/dev/null 
		            let ret+=$?; 
		        done 
		        [ $ret -eq 0 ] && success || failure 
		        echo 
		    fi 
		    return $ret 
		} 
		start() { 
		    # Do not start if there is no config file. 
		    [ -f "$IPTABLES_DATA" ] || return 1 
		    echo -n $"Applying $IPTABLES firewall rules: " 
		OPT= 
		    [ "x$IPTABLES_SAVE_COUNTER" = "xyes" ] && OPT="-c"
		    $IPTABLES-restore $OPT $IPTABLES_DATA 
		    if [ $? -eq 0 ]; then 
		    success; echo 
		    else 
		    failure; echo; return 1 
		    fi 
		    # Load additional modules (helpers) 
		    if [ -n "$IPTABLES_MODULES" ]; then 
		    echo -n $"Loading additional $IPTABLES modules: " 
		ret=0
		    for mod in $IPTABLES_MODULES; do 
		        echo -n "$mod " 
		        modprobe $mod > /dev/null 2>&1 
		        let ret+=$?; 
		    done 
		    [ $ret -eq 0 ] && success || failure 
		    echo 
		    fi 
		    # Load sysctl settings 
		    load_sysctl 
		    touch $VAR_SUBSYS_IPTABLES 
		    return $ret 
		} 
		stop() { 
		    # Do not stop if iptables module is not loaded. 
		    [ -e "$PROC_IPTABLES_NAMES" ] || return 1 
		    flush_n_delete 
		    set_policy ACCEPT 
		    if [ "x$IPTABLES_MODULES_UNLOAD" = "xyes" ]; then 
		    echo -n $"Unloading $IPTABLES modules: " 
		ret=0
		    rmmod_r ${IPV}_tables 
		    let ret+=$?; 
		    rmmod_r ${IPV}_conntrack 
		    let ret+=$?; 
		    [ $ret -eq 0 ] && success || failure 
		    echo 
		    fi 
		    rm -f $VAR_SUBSYS_IPTABLES 
		    return $ret 
		} 
		save() { 
		    # Check if iptable module is loaded 
		    [ ! -e "$PROC_IPTABLES_NAMES" ] && return 1 
		    # Check if firewall is configured (has tables) 
		tables=`cat $PROC_IPTABLES_NAMES 2>/dev/null` 
		    [ -z "$tables" ] && return 1 
		    echo -n $"Saving firewall rules to $IPTABLES_DATA: " 
		OPT= 
		    [ "x$IPTABLES_SAVE_COUNTER" = "xyes" ] && OPT="-c"
		ret=0
		TMP_FILE=`/bin/mktemp -q /tmp/$IPTABLES.XXXXXX` \ 
		    && chmod 600 "$TMP_FILE" \ 
		    && $IPTABLES-save $OPT > $TMP_FILE 2>/dev/null \ 
		    && size=`stat -c '%s' $TMP_FILE` && [ $size -gt 0 ] \ 
		    || ret=1
		    if [ $ret -eq 0 ]; then 
		    if [ -e $IPTABLES_DATA ]; then 
		        cp -f $IPTABLES_DATA $IPTABLES_DATA.save \ 
		        && chmod 600 $IPTABLES_DATA.save \ 
		        || ret=1
		    fi 
		    if [ $ret -eq 0 ]; then 
		        cp -f $TMP_FILE $IPTABLES_DATA \ 
		        && chmod 600 $IPTABLES_DATA \ 
		            || ret=1
		    fi 
		    fi 
		    [ $ret -eq 0 ] && success || failure 
		    echo 
		    rm -f $TMP_FILE 
		    return $ret 
		} 
		status() { 
		tables=`cat $PROC_IPTABLES_NAMES 2>/dev/null` 
		    # Do not print status if lockfile is missing and iptables modules are not  
		    # loaded. 
		    # Check if iptable module is loaded 
		    if [ ! -f "$VAR_SUBSYS_IPTABLES" -a -z "$tables" ]; then 
		    echo $"Firewall is stopped." 
		    return 1 
		    fi 
		    # Check if firewall is configured (has tables) 
		    if [ ! -e "$PROC_IPTABLES_NAMES" ]; then 
		    echo $"Firewall is not configured. " 
		    return 1 
		    fi 
		    if [ -z "$tables" ]; then 
		    echo $"Firewall is not configured. " 
		    return 1 
		    fi 
		NUM= 
		    [ "x$IPTABLES_STATUS_NUMERIC" = "xyes" ] && NUM="-n"
		VERBOSE=  
		    [ "x$IPTABLES_STATUS_VERBOSE" = "xyes" ] && VERBOSE="--verbose"
		COUNT= 
		    [ "x$IPTABLES_STATUS_LINENUMBERS" = "xyes" ] && COUNT="--line-numbers"
		    for table in $tables; do 
		    echo $"Table: $table" 
		    $IPTABLES -t $table --list $NUM $VERBOSE $COUNT && echo 
		    done 
		    return 0 
		} 
		reload() { 
		IPTABLES_MODULES_UNLOAD="no"
		    restart 
		} 
		restart() { 
		    [ "x$IPTABLES_SAVE_ON_RESTART" = "xyes" ] && save 
		    stop 
		    start 
		} 
		case "$1" in 
		    start) 
		    stop 
		    start 
		RETVAL=$? 
		    ;; 
		    stop) 
		    [ "x$IPTABLES_SAVE_ON_STOP" = "xyes" ] && save 
		    stop 
		RETVAL=$? 
		    ;; 
		    reload) 
		    [ -e "$VAR_SUBSYS_IPTABLES" ] && reload 
		    ;;   
		    restart) 
		    restart 
		RETVAL=$? 
		    ;; 
		    condrestart) 
		    [ -e "$VAR_SUBSYS_IPTABLES" ] && restart 
		    ;; 
		    status) 
		    status 
		RETVAL=$? 
		    ;; 
		    panic) 
		    flush_n_delete 
		    set_policy DROP 
		RETVAL=$? 
		        ;; 
		    save) 
		    save 
		RETVAL=$? 
		    ;; 
		    *) 
		    echo $"Usage: $0 {start|stop|reload|restart|condrestart|status|panic|save}" 
		    exit 1 
		    ;; 
		esac 
		exit $RETVAL 
		5.重新启动iptables
		#service iptables restart 

		6.封qq,酷狗,迅雷等,
		假如本机是一个网关的情况下 
		封QQ 
		#iptables -A FORWARD -s 192.168.0.0/24 -m layer7 --l7proto qq -j DROP 
		封酷狗 
		#iptables -A FORWARD -s 192.168.0.0/24 -m layer7 --l7proto kugoo -j DROP 
		封迅雷 
		#iptables -A FORWARD -s 192.168.0.0/24 -m layer7 --l7proto xunlei -j DROP 
		7,测试封QQ的效果
		  我用的是rhel6.2的系统,所以qq的界面跟你们的不太一样,
		8,那有人说了,只能封这几个吗？, 不是的layer7 支持一百多种协议,如下命令查看
		#ls /etc/l7-protocols/protocols/  只要里面有的都可以封杀,使用方法跟上面的一样,将其目录中对应文件的后缀名去掉, 
		比如说,此目录里有个pplive.pat 的文件,想实现封杀pplive的方法如下 
		#iptables -A FORWARD -s 192.168.0.0/24 -m layer7 --l7proto pplive -j DROP 



		$ tar zxvf l7-protocols-2009-05-28.tar.gz
		$ cd l7-protocols-2009-05-28
		$ make install

		$ mv ~/iptables  /etc/rc.d/init.d/

		$ service iptables start


		l7-filter uses the standard iptables extension syntax 
		$ iptables [specify table & chain] -m layer7 --l7proto [protocol name] -j [action] 




'实验13：在forward链上进行控制：'






'tcp_wrapper:'

	






















