6.9 (Mage iptables)


通信子网：内核
资源子网：用户空间

两台主机之间通信(进程<-->进程)
	端口号：标识主机上的进程地址
	IP：标识主机地址

IANA:为众所周知的服务规定固定的端口号

监听：用户空间申请在内核空间独占某个端口
	监听进程状态：阻塞状态（一旦有请求，则改变状态）




'防火墙：保护端口访问'
	
	'包过滤型防火墙：'
		对进出服务器的每个数据包，根据防火墙策略进行过滤


	'必须在内核中实现防火墙'(主机防火墙)


Firewall：隔离工具，工作于主机或网络的边缘处，对经由的报文根据预先定义的规则（识别标准）进行检测，对于能够被规则匹配到的报文实行某种预定义的处理机制的一套组件；
		硬件防火墙：在硬件级别实现部分功能的；
		软件防火墙：应用软件逻辑在通用硬件基础上实现；
		
		主机防火墙：
		网络防火墙：


'Linux防火墙：'
	内核中：
		主机防火墙
		网络防火墙
	用户空间：
		进：
		出：
		

	'一般Linux上有5个钩子'
		PREROUTING：路由之前
		INPUT Hook：入站钩子(进入用户空间之前)
		FORWARD：转发
		OUTPUT Hook：出站钩子
		POSTROUTING：路由之后


	'防火墙历史：'
		ipfw(kernel 1.0) --> ipchians --> iptables(ip6tables) kernel 3.0 --> nftables(netfilter tables: kernel 4.0s)
		
		tddl(淘宝的分库分表开源产品)


	'CentOS7 firewalld：'

		查看状态：
		[root@test-1 ~]# systemctl status firewalld.service
		● firewalld.service - firewalld - dynamic firewall daemon
		   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)
		   Active: inactive (dead)

		启动图形化工具：
			$ firewalld-config







	
'iptables/netfilter：'
	iptables：规则管理工具；能够调用内核中的接口（用户空间），调用防火墙框架
	netfilter：防火墙框架，承载并生效规则；
	
	'hook functions(netfilter)：'
		prerouting：路由之前
		input：进入本机
		forward：转发
		output：出站本机
		postrouting：路由之后
		
	
	'iptables：'(链)
		PREROUTING
		INPUT
		FORWARD
		OUTPUT
		POSTROUTING
		
		允许用户自定义规则链；它们需要手动关联至指定的”钩子“；
		
	
	'netfilter：功能'
		filter(“防火”)：包过滤
		NAT：Network Address Translation
		mangle：拆解报文，做出修改，而后重新封装
		raw：关闭nat表上启用的连接追踪机制						
	

	'功能（表）<-->钩子'
		filter：input, forward, output
			过滤，防火墙
		
		nat：prerouting, input, output, postrouting
			network address translation;网络地址转换；用于修改源IP或目标IP，也可以改端口
			具有追踪功能：保存在缓存中
				NAT会话连接追踪表

		mangle：prerouting, input, forward, output, postrouting
			拆解报文，做出修改，并重新封装起来
				修改防火墙标记符，TTL之类的

		raw：prerouting, output
			关闭NAT表上启用的连接追踪机制

	'功能 <-- 链：'
		raw：PREROUTING, OUTPUT 
		mangle：PREROUTING, INPUT ,FORWARD, OUTPUT, POSTROUTING
		nat：PREROUTING, [INPUT, ]OUTPUT, POSTROUTING
		filter：INPUT, FORWARD, OUTPUT 

		优先级（由高而低）：raw --> mangle --> nat --> filter


	'报文流向：'
		流入本机：PREROUTING --> INPUT 
		由本机流出：OUTPUT --> POSTROUTING
		转发：PREROUTING --> FORWARD --> POSTROUTING


	'路由功能发生的时刻：'
		报文进入本机后：
			判断目标主机是?

		报文离开本机之前：
			判断经由哪个接口送往下一站？





'iptables规则的组成部分：'
	根据规则匹配条件来尝试匹配报文，一旦匹配成功，就由规则定义的处理动作作出处理。

		'匹配条件：'
			基本匹配条件
			扩展匹配条件:由扩展模块定义
			
				网络层首部：SourceIP, DestinationIP, ...
				传输层首部：SourtPort, DestinationPort, TCP Flags(SYN,ACK,FIN,URG,RST,PSH), ...
				扩展模块引入的辅助检查机制：


		'处理动作：'
			基本处理动作：內建
			扩展处理动作：由扩展模块定义
			自定义处理机制：自定义链

		'iptables的链：内置链和自定义链'
			内置链：对应于hook functions
			自定义链接：用于内置链的扩展和补充，可实现更灵活的规则管理机制；
				自定义链可以设置完之后，添加到内置链中，方便管理

		跳转目标：-j target 
			内建的处理机制：ACCEPT, DROP, REJECT, SNAT, DNAT, MASQUERADE, MARK, LOG, ...
			用户自定义链：
			
		
		'添加规则时需要考量的因素：'
			(1) 实现的功能：用于判定将规则添加至哪个表；
			(2) 报文的流经位置：用于判断将规则添加至哪个链；
			(3) 报文的流向：判定规则中何为”源“，何为”目标“；
			(4) 匹配条件：用于编写正确的匹配规则；
				(a) 专用于某种应用的同类规则，匹配范围小的放前面；
				(b) 专用于某些应用的不同类规则，匹配到的可能性较多的放前面；同一类别的规则可使用自定义链单独存放；
					访问量大的放前面，访问量小的放后面
				(c) 用于通用目的的规则放前面；	

			链：	链上的规则次序，即为检查的次序；因此，隐含一定的应用法则：
				(1)同类规则（访问统一应用），匹配范围小的放上面；
				(2)不同类的规则(访问不同应用)，匹配到报文频率较大的放在上面
				(3)将那些可由一条规则描述的多个规则合并起来；
				(4)设置默认策略

	
filter表：过滤，”防火墙“意义的核心所在；
	INPUT，FORWARD，OUTPUT






'iptables命令：'
	安装：
		netfilter：位于内核中的tcp/ip协议栈报文处理框架；
		iptables：
			CentOS 5/6：iptables命令生成规则，可保存于文件中以反复装载生效；
				# iptables -t filter -F
				# service iptables save
				
				man iptables
			CentOS 7：firewalld, firewall-cmd, firewall-config
				# systemctl disable firewalld.service
	
				man iptables
				man iptables-extensions
				


	'iptables命令：'
		'高度模块化，由诸多扩展模块实现其检查条件或处理动作的'
			/usr/lib64/xtables/
				IPv6适用范围：libip6t_
				IPv4适用范围：libipt_,libxt_


		
		iptables [-t table] {-A|-C|-D} chain rule-specification

		iptables [-t table] -I chain [rulenum] rule-specification
		iptables [-t table] -R chain rulenum rule-specification

		iptables [-t table] -D chain rulenum
		iptables [-t table] -S [chain [rulenum]]

		iptables [-t table] {-F|-L|-Z} [chain [rulenum]] [options...]

		iptables [-t table] -N chain

		iptables [-t table] -X [chain]

		iptables [-t table] -P chain target

		iptables [-t table] -E old-chain-name new-chain-name

			'rule-specification = [matches...] [target]'

			'match = -m matchname [per-match-options]'

			'target = -j targetname [per-target-options]'
		
		'规则格式：'
			iptables [-t table] COMMAND chain [-m matchname [per-match-options]] -j targetname [per-target-options]
				-t table:
					raw,mangle,nat,[filter]

				'COMMANDs：'
					'链管理：'
						-N, --new-chain chain：新建一个自定义的规则链；
						-X, --delete-chain [chain]：删除用户自定义的引用计数为0的空链；
							'只能删除自定义的、空的、引用计数为0的链'

						-F, --flush [chain]：清空指定的规则链上的规则；
						-E, --rename-chain old-chain new-chain：重命名链；
						-Z, --zero [chain [rulenum]]：置零计数器；
							注意：每个规则都有两个计数器
								packets：被本规则所匹配到的所有报文的个数；
								bytes：被本规则所匹配到的所有报文的大小之和；
						
						-P, --policy chain target：设置默认策略
							ACCEPT：接受
							DROP：丢弃
							REJECT：拒绝(可以达到快速拒绝客户端)

					
					'规则管理：'
						-A, --append chain rule-specification：追加新规则于指定链的尾部； 
						-I, --insert chain [rulenum] rule-specification：插入新规则于指定链的指定位置，默认为首部；
						-R, --replace chain rulenum rule-specification：替换指定的规则为新的规则；
						-D, --delete chain rulenum：根据规则编号删除规则；
						-D, --delete chain rule-specification：根据规则本身删除规则；
							(1)指明规则序号
							(2)指明规则本身				
					
					'规则显示：'
						-L, --list [chain]：列出规则；
							 -v, --verbose：详细信息； 
								-vv
							-n, --numeric：数字格式显示主机地址和端口号；
							-x, --exact：显示计数器的精确值，而非圆整后的数据；
							--line-numbers：列出规则时，显示其在链上的相应的编号；

							查看单个链：
								$ iptables -vnL INPUT  

						-S, --list-rules [chain]：显示指定链的所有规则；	




回顾：
	iptables/netfilter
		framework:netfilter
		五链：
			PREROUTING、INPUT、FORWARD、OUTPUT、POSTROUTING

		四表：
			filter：包过滤
			nat：地址转换
			mangle：报文的修改
			raw：关闭nat表上启用的连接追踪机制








		'rule-specification = [matches...] [target]'：规则说明
			matches：匹配条件 
			target：跳转目标
			
			'匹配条件：'
				通用匹配（PARAMETERS）：

					匹配所有地址：0.0.0.0

					[!] -s, --source address[/mask][,...]：检查报文的'源IP地址'是否符合此处指定的范围，或是否等于此处给定的地址；
					[!] -d, --destination address[/mask][,...]：检查报文的'目标IP地址'是否符合此处指定的范围，或是否等于此处给定的地址；
					[!] -p, --protocol protocol：'匹配报文中的协议'，可用值tcp, udp,  udplite, icmp,  icmpv6,esp,  ah, sctp, mh 或者  "all", 亦可以数字格式指明协议；
					 -m, --match match：调用指定的扩展匹配模块来扩展匹配条件检查机制；
					 
					[!] -i, --in-interface name：限定报文仅能够从指定的接口流入；only for packets entering the INPUT, FORWARD  and  PREROUTING  chains.
					[!] -o, --out-interface name：限定报文仅能够从指定的接口流出；for packets entering the FORWARD, OUTPUT and POSTROUTING chains.
				
				扩展匹配（MATCH EXTENSIONS）:可以出现多次，使用多个扩展模块
					-m tcp 
						--sport, --dport

			'处理动作：'
				基本处理动作：ACCEPT、DROP
				扩展处理动作：REJECT、RETURN、LOG、REDIRECT,...

				

		'匹配条件：'
			基本匹配条件：PARAMETERS
			扩展匹配条件：
				'隐式扩展：在使用-p选项指明了特定的协议时，无需再同时使用-m选项指明扩展模块的扩展机制；'
				'显式扩展：必须使用-m选项指明要调用的扩展模块的扩展机制；'
				
			'隐式扩展：'
				-p tcp：可直接使用tcp扩展模块的专用选项；
					[!] --source-port,--sport port[:port]  匹配报文源端口；可以给出多个端口，但只能是连续的端口范围 ；
					[!] --destination-port,--dport port[:port]   匹配报文目标端口；可以给出多个端口，但只能是连续的端口范围 ；
					[!] --tcp-flags mask comp  匹配报文中的tcp协议的标志位；Flags are: SYN ACK FIN RST URG PSH ALL NONE；
						mask：要检查的FLAGS list，以逗号分隔；
						comp：在mask给定的诸多的FLAGS中，其值必须为1的FLAGS列表，余下的其值必须为0；
						例如："--tcp-flags SYN,ACK,FIN,RST SYN"：表示，要检查的表示位为SYN,ACK,FIN,RST四个，其中SYN必须为1，余下的必须为0

							--tcp-flags SYN,ACK,FIN,RST  SYN
							--tcp-flags ALL ALL
							--tcp-flags ALL NONE
					[!] --syn：	--tcp-flags SYN,ACK,FIN,RST  SYN	
						'匹配第一次握手的'

						RST：重置ACK号
					
				-p udp：可直接使用udp协议扩展模块的专用选项：
					[!] --source-port,--sport port[:port]
					[!] --destination-port,--dport port[:port]
					
				[!] --icmp-type {type[/code]|typename}
					0/0： echo reply（请求的回显）
					8/0：echo request（发出去的请求）
					


			'实验：开放本地的samba端口服务'
				$ iptables -I INPUT -d 172.16.1.70 -p udp --dport 137:138 -j ACCEPT
				$ iptables -I INPUT -d 172.16.1.70 -p tcp -m multiport --dports 139,445 -j ACCEPT
				$ iptables -I OUTPUT -s 172.16.1.70 -p udp --sport 137:138 -j ACCEPT
				$ iptables -I OUTPUT -s 172.16.1.70 -p tcp -m multiport --sports 139,445 -j ACCEPT




			'显式扩展：必须使用-m选项指明要调用的扩展模块的扩展机制；'
				
				man iptables-extensions 查看扩展帮助

				1、multiport
					以离散或连续的 方式定义多端口匹配条件，最多15个；	
						支持tcp、udp、udplite、dccp、sctp
					
					[!] --source-ports,--sports port[,port|,port:port]...：指定多个源端口；
					[!] --destination-ports,--dports port[,port|,port:port]...：指定多个目标端口；
					
					# iptables -I INPUT  -d 172.16.0.7 -p tcp -m multiport --dports 22,80,139,445,3306 -j ACCEPT
					
				2、iprange
					以连续地址块的方式来指明多IP地址匹配条件；
					[!] --src-range from[-to]
					[!] --dst-range from[-to]
					
					# iptables -I INPUT -d 172.16.0.7 -p tcp -m multiport --dports 22,80,139,445,3306 -m iprange --src-range 172.16.0.61-172.16.0.70 -j REJECT
					
				3、time
					This  matches  if the packet arrival time/date is within a given range.
					
					 --timestart hh:mm[:ss]
					 --timestop hh:mm[:ss]
					 
					 [!] --weekdays day[,day...]
					 	1,2,3,4,5
					 
					 [!] --monthdays day[,day...]
					 
					--datestart YYYY[-MM[-DD[Thh[:mm[:ss]]]]]
					--datestop YYYY[-MM[-DD[Thh[:mm[:ss]]]]]
					
					 --kerneltz：使用内核配置的时区而非默认的UTC；
					 	CentOS6无需使用，默认就使用

					 'ntp端口号：'123，323
					 
				
				4、string(可以检查7层协议) '只能对明文编码的协议有效'

					This modules matches a given string by using some pattern matching strategy. 
					
					--algo {bm|kmp}：bm和kmp算法处理的速度其实无太大的差别

					[!] --string pattern
					[!] --hex-string pattern
					
					--from offset：从哪个位置开始
					--to offset：从哪个位置结束
					
					~]# iptables -I OUTPUT -m string --algo bm --string "gay" -j REJECT
				


				5、connlimit ：连接限制；单个客户端最多并发数量的限制

					Allows  you  to  restrict  the  number  of parallel connections to a server per client IP address (or client address block).
					
					取决于默认的策略：这里选择

						--connlimit-upto n：上限，小于等于
						--connlimit-above n：大于
					
					~]# iptables -I INPUT -d 172.16.0.7 -p tcp --syn --dport 22 -m connlimit --connlimit-above 2 -j REJECT
				

				6、limit ：速率限制
					This  module  matches  at  a limited rate using a token bucket filter. 
					
					--limit rate[/second|/minute|/hour|/day]：限制令牌发放的速率
					--limit-burst number：令牌桶最大收多少个令牌
					
					~]# iptables -I INPUT -d 172.16.1.70 -p icpmp --icmp-type 8 -m limit --limit-burst 5 --limit 4/minute -j ACCEPT
					~]# iptables -I OUTPUT -s 172.16.1.70 -p icmp --icmp-type 0 -j ACCEPT

					'使用hping命令测试'
						$ yum install hping3

					限制本机某tcp服务接收新请求的速率：
						使用 --sys, -m limit 就可以实现


				7、state：连接追踪(开启后，大大增强服务器安全性)
					The "state" extension is a subset of the "conntrack" module.  "state" allows access to the connection tracking state for this packet.
					
					连接追踪机制：
						连接过的，存在内存中的一个缓存表中。
						但是内存空间是有限的，记录具有超时时间
							对于访问量大的服务器：(不建议开启)
								解决办法：
								(1)关闭连接追踪
								(2)扩大内存空间


					[!] --state STATE
						INVALID, ESTABLISHED, NEW, RELATED or UNTRACKED.
						
					STATE：
						NEW: 新连接请求；
						ESTABLISHED：已建立的连接；(一旦接受新请求之后，NEW --> ESTABLISHED)
						INVALID：无法识别的连接；不合法的连接
						RELATED：相关联的连接；当前连接是一个新请求，但附属于某个已存在的连接；(与某个ESTABLISHED具有关系的)
						UNTRACKED：未追踪的连接；
											
						'state扩展：'
							内核模块装载：
								nf_conntrack
								nf_conntrack_ipv4
								
								手动装载：
									nf_conntrack_ftp 
									
					'追踪到的连接：'
						/proc/net/nf_conntrack
						
					
					'调整可记录的连接数量最大值：'
						/proc/sys/net/nf_conntrack_max
						
					'超时时长：'
						/proc/sys/net/netfilter/*timeout*
				

						'对80可以设置：INPUT NEW,ESTABLISHED'
								    OUTPUT ESTABLISHED
							这样保证了服务器的安全性：防止NEW请求从服务器80端口出去


		处理动作（跳转目标）：
			-j targetname [per-target-options]
				简单target：
					ACCEPT， DROP
					
				扩展target：
					REJECT
						This is used to send back an error packet in response to the matched packet: otherwise it is equivalent to  DROP  so it  is  a  terminating  TARGET,  ending  rule traversal.
						
					
					--reject-with type：'表示以什么理由去拒绝；下面的都是拒绝理由'
						The type given can be icmp-net-unreachable, icmp-host-unreachable, icmp-port-unreachable, icmp-proto-unreach‐ able, icmp-net-prohibited, icmp-host-prohibited, or icmp-admin-prohibited (*), which return  the  appropriate ICMP  error  message (icmp-port-unreachable is the default).
						
				LOG：记录日志 
					
					'默认日志信息保存于：/var/log/message'

					'日志规则要放在REJECT和ACCEPT之前'

					Turn  on  kernel  logging of matching packets.
						
					--log-level：日志级别
					--log-prefix：日志前缀(加一些字符在记录日志时)



				RETURN：返回主链(在自定义链的某个规则之前可以使用，直接返回主链)
				

			自定义链做为target：

	
	'保存和载入规则：'
		保存：iptables-save > /PATH/TO/SOME_RULE_FILE
		重载：iptabls-restore < /PATH/FROM/SOME_RULE_FILE
			-n, --noflush：不清除原有规则
			-t, --test：仅分析生成规则集，但不提交(测试规则是否正常，正常后再重载)

			'注意：重载时，不会自动装载 nf_conntrack_ftp模块；可以使用脚本实现'
			
		CentOS 6：
			保存规则：
				service iptables save
				保存规则于/etc/sysconfig/iptables文件，覆盖保存；
			重载规则：(直接重载)
				service iptables restart
				默认重载/etc/sysconfig/iptables文件中的规则 
				
			配置文件：/etc/sysconfig/iptables-config
			
		CentOS 7：
			(1) 自定义Unit File，进行iptables-restore；
			(2) firewalld服务；
			(3) 自定义脚本；
		



	'规则优化的思路：'
		使用自定义链管理特定应用的相关规则，模块化管理规则；
		
		(1) 优先放行双方向状态为ESTABLISHED的报文；
		(2) 服务于不同类别的功能的规则，匹配到报文可能性更大的放前面；
		(3) 服务于同一类别的功能的规则，匹配条件较严格的放在前面；
		(4) 设置默认策略：白名单机制
			(a) iptables -P，不建议；
			(b) 建议在规则的最后定义规则做为默认策略；
































































