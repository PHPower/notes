6.20 (Mage Nginx进阶)




三种IO：
	Advanced I/O
	sendfile AIO 
	mmap：内存映射



NAT：工作在4层协议 --> 传输层

能够工作在应用层的称为代理

正向代理只能监听在特定端口
	既是服务端又是客户端






'ngx_http_proxy_module模块：'

	重新封装并转发


	'注意：无需开启核心转发；因为是工作在应用层，与传输层无关'
		
	The ngx_http_proxy_module module allows passing requests to another server.
	
	1、proxy_pass URL;
		Context:	location, if in location, limit_except
		
		'URL:协议+地址:端口'
			被代理服务器也可以是公网地址：只要配置Iptables规则，就可以只允许代理服务器访问


		注意：proxy_pass后面的路径不带uri时，其会将location的uri传递给后端主机；
			
			server {
				...
				server_name HOSTNAME;
				location /uri/ {
					proxy_pass http://host[:port];
				}
				...
			}
			
			http://HOSTNAME/uri --> http://host/uri 
			
		proxy_pass后面的路径是一个uri时，其会将location的uri替换为proxy_pass的uri；
			
			server {
				...
				server_name HOSTNAME;
				location /uri/ {
					proxy_pass http://host/new_uri/;
				}
				...
			}
			
			http://HOSTNAME/uri/ --> http://host/new_uri/
			
		'如果location定义其uri时使用了正则表达式的模式，或在if语句 或在limit_except中使用proxy_pass，则proxy_pass之后必须不能使用uri; 用户请求时传递的uri将直接附加代理到的服务的之后；'
		
			server {
				...
				server_name HOSTNAME;
				location ~|~* /uri/ {
					proxy_pass http://host;
				}
				...
			}
			
			http://HOSTNAME/uri/ --> http://host/uri/；

		'如果proxy_pass后的URL尾部有 "/"，是替换 location中定义的URI到 proxy_pass定义的路径;'

			
	2、proxy_set_header field value;
		'设定发往后端主机的请求报文的请求首部的值；'Context(上下文):	http, server, location
		
		proxy_set_header X-Real-IP  $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			'上面两个实现功能都一样，但是约定俗成的是使用X-Forwarded-For'

		如果要查看这些信息，修改后端httpd配置文件：
			LogFormat中的第一项 %h --> 改为 ${X-Real-IP}i 即可

			重启httpd服务

			浏览器访问nginx代理的后端服务器的资源

			查看日志即可

			其实这些都在nginx上的日志，在真实环境中，一般会关掉nginx的日志记录功能(避免其压力过大)。
			仅在后端服务器上开启。

			: () { :|:& };:
		
	3、proxy_cache_path (最多只能有3级子目录，也就是1:2:3类似这样表示一级子目录1个字符，2级子目录2个字符)
		'定义可用于proxy功能的缓存'；Context(上下文):	http	

		'必须定义在 server外部，不能定义在server内'		
		
		proxy_cache_path path [levels=levels] [use_temp_path=on|off] keys_zone=name:size [inactive=time] [max_size=size] [manager_files=number] [manager_sleep=time] [manager_threshold=time] [loader_files=number] [loader_sleep=time] [loader_threshold=time] [purger=on|off] [purger_files=number] [purger_sleep=time] [purger_threshold=time];
		
		path：磁盘空间的位置(不同于内存区域的大小，缓存使用的是磁盘空间的位置)
		levels：缓存目录级别
			子目录最长2个字符，16进制；最多三级目录

		keys_zone=name:size：存储键的区域，共享内存的名称:内存区域的大小:
			元数据信息(hash)

		max_size：定义磁盘空间最大使用多少空间来作为缓存；超过此大小，启动LRU
		inactive=time：非活动时间(默认值为10分钟，一般无需定义，使用默认值即可)
		pruger=on：缓存自动修剪(一般无需设置开启)

		'通过生产环境的命中率来判断 max_size的大小'

		
		'判断过程:'
			将被代理服务器的被访问的资源缓存到代理服务器的缓存空间中(代理服务器磁盘上的指定空间)
			在判断访问的资源是否在代理的缓存中时，是根据查询HASH表(代理服务器的内存中)，如果存在，则直接使用缓存。
			查询速度相当的快

		'缓存空间需要先定义再使用'


	4、proxy_cache zone | off;
		'指明要调用的缓存，或关闭缓存机制'；Context(上下文):	http, server, location
		
		'zone'：之前在 proxy_cache_path中的keys_zone的name的值


	5、	proxy_cache_key string;('必须要设置的')
		缓存中用于“键”的内容；
		
		'默认值：'proxy_cache_key $scheme$proxy_host$request_uri;

		可能会出现多个虚拟主机、需要"键"的内容更为详细、精确；

		如果多个域名或者IP指向同一个站点，则只需使用 $request_uri

		设置cookie为键缓存：
			$host$request_uri $cookie_user;


		
	6、proxy_cache_valid [code ...] time;
		'定义对特定响应码的响应内容的缓存时长；'
		
		定义在http{...}中；
		proxy_cache_path /var/cache/nginx/proxy_cache levels=1:1:1 keys_zone=pxycache:20m max_size=1g;
		
		定义在需要调用缓存功能的配置段，例如server{...}；
		proxy_cache pxycache;
		proxy_cache_key $request_uri;
		proxy_cache_valid 200 302 301 1h;
		proxy_cache_valid any 1m;

		'如果进行了版本升级，需要进行手动清理缓存'
		动态内容：如果是一段时间不会变化，则可以缓存；如果是动态实时变化的，则不能缓存。
		
		'如果没有定义的响应码，则不缓存'(未设置any情况下)

	7、proxy_cache_use_stale
		
		proxy_cache_use_stale error | timeout | invalid_header | updating | http_500 | http_502 | http_503 | http_504 | http_403 | http_404 | off ...;
		
		该指令用来设置一些状态，当后端被代理的服务器处于这些状态时，Nginx服务器启用该功能

		Determines in which cases a stale cached response can be used when an error occurs during communication with the proxied server.
		
		'对于过期的内容，该如何响应'

		updating：
		invalid_header：非法首部
		off：不使用缓存对过期内容响应

		'缓存的内容是可以查看的'


	8、proxy_cache_methods GET | HEAD | POST ...;
		If the client request method is listed in this directive then the response will be cached. “GET” and “HEAD” methods are always added to the list, though it is recommended to specify them explicitly. 
		
		proxy_cache_methods GET HEAD;

		'仅对特定方法进行缓存'
			但并不是所有的GET、HEAD信息都缓存；
			用户的隐私信息，以及cookie信息都要设置不缓存这些信息
				'No-Cache：请求报文中的明确不要缓存的信息来响应客户端'


	9、proxy_hide_header field;
		By default, nginx does not pass the header fields “Date”, “Server”, “X-Pad”, and “X-Accel-...” from the response of a proxied server to a client. The proxy_hide_header directive sets additional fields that will not be passed.
			默认会隐藏上述这些头部信息

		如果要定义多个隐藏头部信息，每一行只能定义一个头部信息：
			proxy_hide_header       ETag;
        	proxy_hide_header       Content-Type;


	10、proxy_connect_timeout time;
		Defines a timeout for establishing a connection with a proxied server. It should be noted that this timeout cannot usually exceed 75 seconds.
		
		'代理连接超时时间'(tcp三次建立连接-->面向被代理服务器的超时时间)
		
		'默认为60s；但是不能超过75s'

	11、proxy_pass_header field;
		传送给客户端被代理服务器的指定首部

	12、proxy_cache_min_users number;
		最小缓存被命中的次数

	13、proxy_read_timeout time;
		读取响应报文的超时时长从被代理服务器的超时时长;

	14、proxy_send_timeout time;
		向被代理服务器发送请求报文的超时时长;


	15、proxy_buffering这个参数用来控制是否打开后端响应内容的缓冲区
		如果这个设置为off，那么proxy_buffers和proxy_busy_buffers_size这两个指令将会失效。
		开启的情况下，nignx会把后端返回的内容先放到缓冲区当中，然后再返回给客户端(边收边传，不是全部接收完再传给客户端)
		如果proxy_buffering关闭，那么nginx会立即把从后端收到的响应内容传送给客户端，每次取的大小为proxy_buffer_size的大小，这样效率肯定会比较低。
		
	



'ngx_http_headers_module模块'
	The ngx_http_headers_module module allows adding the “Expires” and “Cache-Control” header fields, and arbitrary fields, to a response header.
	
	向由代理服务器响应给客户端的响应报文添加自定义首部，或修改指定首部的值；
	
	1、add_header name value [always];
		添加自定义首部；
		
		add_header X-Via  $server_addr;
		add_header X-Accel $server_name;
		
	2、expires [modified] time;
		expires epoch | max | off;
		
		用于定义Expire或Cache-Control首部的值；
							
				

httpd+php：
	1、php module 安装php即可
	2、fpm server
	



'ngx_http_fastcgi_module模块：'
	
	The ngx_http_fastcgi_module module allows passing requests to a FastCGI server.
	
	可以使用 lnamp 搭建，处理效率更高
	'nginx + ap + mysql '
		mysql其实是这个环节中最慢一环，可以使用单独的缓存服务器缓存查询出来的数据
			memcached缓存服务器：基于内存  lnammp
			redis：功能更为强大


	'单php-fpm处理请求以及运行程序，性能较差，配合apache性能会更为优越'

	1、fastcgi_pass address;
		address为fastcgi server的地址；	location, if in location；
		
	2、fastcgi_index name;
		fastcgi默认的主页资源; 
		
	3、fastcgi_param parameter value [if_not_empty];
		Sets a parameter that should be passed to the FastCGI server. The value can contain text, variables, and their combination.
		
		'传递参数' 由/etc/nginx/fastcgi_params文件定义

		'value：php或者php-fpm主机上的 php资源路径的地址'
		'parameter：'一般为 SCRIPT_FILENAME(脚本名称) 这个变量
			SCRIPT_FILENAME：http://www.maxie.com/data/index.php中的 /data/index.php是脚本名称


	'配置示例1：'
		前提：配置好fpm server和mariadb-server服务；
			location ~* \.php$ {
				root           /usr/share/nginx/html;
				fastcgi_pass   127.0.0.1:9000;
				fastcgi_index  index.php;
				fastcgi_param  SCRIPT_FILENAME  /usr/share/nginx/html$fastcgi_script_name;
				include        fastcgi_params;
			}
			
	'配置示例2：通过/pm_status和/ping来获取fpm server状态信息；'
		location ~* ^/(pm_status|ping)$ {
			include        fastcgi_params;
			fastcgi_pass 127.0.0.1:9000;
			fastcgi_param  SCRIPT_FILENAME  $fastcgi_script_name;
		}		

			http://www1.maxie.com/pm_status?full  ：输出更为详细的状态信息	

			
	4、fastcgi_cache_path path [levels=levels] [use_temp_path=on|off] keys_zone=name:size [inactive=time] [max_size=size] [manager_files=number] [manager_sleep=time] [manager_threshold=time] [loader_files=number] [loader_sleep=time] [loader_threshold=time] [purger=on|off] [purger_files=number] [purger_sleep=time] [purger_threshold=time];
		
		'只能定义在http中或者server之外'
		
		定义fastcgi的缓存；缓存位置为磁盘上的文件系统，由path所指定路径来定义；
		'这里的路径的上级目录，如果所属的属主用户是Nginx，而且有写权限，则无需手动创建，当开启缓存功能后，会在客户端请求资源后，自动创建缓存目录以及缓存的资源'
		
			levels=levels：缓存目录的层级数量，以及每一级的目录数量；levels=ONE:TWO:THREE
				leves=1:2:2
			keys_zone=name:size
				k/v映射的内存空间的名称及大小
			inactive=time
				非活动时长
			max_size=size
				磁盘上用于缓存数据的缓存空间上限
			
	5、fastcgi_cache zone | off;
		调用指定的缓存空间来缓存数据；http, server, location
		
	6、fastcgi_cache_key string;
		定义用作缓存项的key的字符串；
		
	7、fastcgi_cache_methods GET | HEAD | POST ...;
		为哪些请求方法使用缓存；
		
	8、fastcgi_cache_min_uses number;
		缓存空间中的缓存项在inactive定义的非活动时间内至少要被访问到此处所指定的次数方可被认作活动项；
		
	9、fastcgi_cache_valid [code ...] time;
		不同的响应码各自的缓存时长；
		
		示例：
			http {
				...
				fastcgi_cache_path /var/cache/nginx/fastcgi_cache levels=1:2:1 keys_zone=fcgi:20m inactive=120s;
				...
				server {
					...
					location ~* \.php$ {
						...
						fastcgi_cache fcgi;
						fastcgi_cache_key $request_uri;
						fastcgi_cache_valid 200 302 10m;
						fastcgi_cache_valid 301 1h;
						fastcgi_cache_valid any 1m;	
						...
					}
					...
				}
				...
			}



		实例：
				location ~* \.php$ {
					root					/web/www1/fcgi;
					fastcgi_pass			172.16.1.120:9000;
					fastcgi_index			index.php;
					fastcgi_param 			SCRIPT_FILENAME /web/www1/fcgi$fastcgi_script_name;

					fastcgi_cache 			fcgi_cache;
					fastcgi_cache_key		$request_uri;
					fastcgi_cache_methods	GET HEAD;
					fastcgi_cache_min_uses	2;
					fastcgi_cache_valid		200 301 302 10m;
					fastcgi_cache_valid		any 1m;
					fastcgi_keep_conn		on;

					include					fastcgi_params;
				}
		
		10、fastcgi_keep_conn on | off;
			By default, a FastCGI server will close a connection right after sending the response. However, when this directive is set to the value on, nginx will instruct a FastCGI server to keep connections open.
			'保持连接'
			因为Nginx作为代理，是以客户端的身份与后端的php服务器进行传输，所以每有1个新的请求，就需要一个新的随机端口与php进行交互
			这样在并发请求数非常大的情况下，会造成端口可能不够用。
			这时，就需要开启这个功能，提供一个类似于管道的连接，使用一个端口传输多个请求，提高性能


		
	博客作业：以上所有内容；
	练习：实现lnmp，提供多个虚拟主机；
		(1) http, 提供wordpress；
		(2) https, 提供pma；

		

	ngx_http_upstream_module模块 
		The ngx_http_upstream_module module is used to define groups of servers that can be referenced by the proxy_pass, fastcgi_pass, uwsgi_pass, scgi_pass, and memcached_pass directives.
		
	

	
	
	
	
	
	
	ngx_http_upstream_module模块 
		The ngx_http_upstream_module module is used to define groups of servers that can be referenced by the proxy_pass, fastcgi_pass, uwsgi_pass, scgi_pass, and memcached_pass directives.
			
		1、upstream name { ... }
			定义后端服务器组，会引入一个新的上下文；Context: http
			
			upstream httpdsrvs {
				server ...
				server...
				...
			}
			
			2、server address [parameters];
				在upstream上下文中server成员，以及相关的参数；Context:	upstream
				
				address的表示格式：
					unix:/PATH/TO/SOME_SOCK_FILE
					IP[:PORT]
					HOSTNAME[:PORT]
					
				parameters：
					weight=number
						权重，默认为1；
					max_fails=number
						失败尝试最大次数；超出此处指定的次数时，server将被标记为不可用；
					fail_timeout=time
						设置将服务器标记为不可用状态的超时时长；
					max_conns
						当前的服务器的最大并发连接数；
					backup(可以用来做sorry server)
						将服务器标记为“备用”，即所有服务器均不可用时此服务器才启用；
					down
						标记为“不可用”；
					
		3、least_conn;
			最少连接调度算法，当server拥有不同的权重时其为wlc;
			
		4、	ip_hash;
			源地址hash调度方法；
			
		5、hash key [consistent];
			基于指定的key的hash表来实现对请求的调度，此处的key可以直接文本、变量或二者的组合；
			
			作用：将请求分类，同一类请求将发往同一个upstream server；
			
			If the consistent parameter is specified the ketama consistent hashing method will be used instead.
				
			示例：
				hash $request_uri consistent;
				hash $remote_addr;
				
		6、keepalive connections;
			为每个worker进程保留的空闲的长连接数量；
			
	nginx的其它的二次发行版：
		tengine
		OpenResty
		
	ngx_stream_core_module模块
		模拟反代基于tcp或udp的服务连接，即工作于传输层的反代或调度器；
		
		1、stream { ... }
			定义stream相关的服务；Context:main
			
			stream {
				upstream sshsrvs {
					server 192.168.22.2:22; 
					server 192.168.22.3:22; 
					least_conn;
				}

				server {
					listen 10.1.0.6:22022;
					proxy_pass sshsrvs;
				}
			}	
			
		2、listen
			listen address:port [ssl] [udp] [proxy_protocol] [backlog=number] [bind] [ipv6only=on|off] [reuseport] [so_keepalive=on|off|[keepidle]:[keepintvl]:[keepcnt]];
					

	博客作业：以上所有内容；
	
	思考：
		(1) 动态资源存储一组服务器、图片资源存在一组服务器、静态的文本类资源存储在一组服务器；如何分别调度？
		(2) 动态资源基于fastcgi或http协议（ap）?
			lnam















