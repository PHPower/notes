5.22 (Mage 上午笔记OpenSSL)



系统基础、系统管理、shell脚本编程

shell编程：
	以编程、计算机的思维方式来思考如何编写脚本
	看别人写的脚本


服务管理：
	openssl / openssh
	dns
	!!web服务：http协议/httpd服务：无线端和PC端
		lamp、MySQL
		vsftpd/nfs/samba（文件服务）
	nginx：重点
	iptables


集群服务：!!!!!!!!!!!!(重点)
	负载均衡集群lb：lvs/nginx/haproxy/varnish/tomcat
	高可用ha：keepalived/corosync


运维工具：
	ansible（被红帽收购）
	zabbix（监控工具）
	puppet

分布式存储、git、虚拟化




OpenSSL：
	
	服务器：
		IP:Port --> Socket 套接字

			IP：标识当前主机的地址
			端口号：标识当前主机上的进程地址
				可以理解为：进程地址
			监听：监听端口，等待访问
				LISTEN(ip:port)

			并发处理

			Nginx：不创建子进程，可以同时处理多个请求


	全站https：
		把http协议运行在 http over ssl 上，加密网站数据
		性能会稍差
		消耗CPU


	TCP：
		最上层：资源子网
		下三层：通信子网


	SSL：Secure Socket Layer(网景公司)
		http --> ssl --> https

	TLS：transport layer Security（传输层安全）

	安全的目标：
		保密性：confidentially
			数据在传输时，保证加密

		完整性：integrity
			不能随意篡改数据内容

		可用性：availabiltiy

	攻击类型：
		威胁保密性的攻击：窃听、通信录分析
		威胁完整性的攻击：更改、伪装、重放、否认
		威胁可用性的攻击：拒绝服务（Dos）
			耗尽系统资源，然后无资源去接收服务

	
	解决方案：
		技术（加密和解密）、服务（用于抵御攻击的服务，也即是为了上述安全目标而特地设计的安全服务）

		加密和解密：
			传统加密方法：替代加密方法、置换加密方法
			现代加密方法：现代块加密方法

		服务：
			认证机制
			访问控制机制

		密钥算法和协议：
			对称加密
				加密解密时使用同一个密钥

			公钥加密(非对称加密，起步512位)
				一对儿密钥：Pkey、Skey（公钥和密钥）
					Pkey加密的，只能用Skey解密
				比对称加密高出3个数量级（10^3）

				用于身份认证：发送数据时使用私密加密，对方可以用公钥解密，可以确保对方传送的数据时可靠的
					如何确保拿到公钥的真实性：
						由第三方可靠机构确认这个公钥的真实性：CA认证

			单向加密
			认证协议

		'Linux系统：OpenSSL(ssl)，GPG（pgp协议）'

			'OpenSSL由三部分组成：'
				libencrypto库
				libssl库
				openssl多用途命令行工具

			'加密算法和协议：'
				
					对称加密：数据加密（保密性），（3DES，AES）
					公钥加密：身份认证、密钥交换、数据加密（不常用，比对称加密要慢3个数量级），（RSA，DSA）
					单向加密：数据完整性，（MD5, SHA1, ...）
					密钥交换：RSA，DH（迪菲-赫尔曼），ECDH（椭圆曲线DH），ECDHE（临时椭圆曲线DH）


				对称加密：加密和解密使用同一个密钥:
					DES：Data Encryption Standard（IBM，数据加密标准）  56位
					3DES：Triple DES（3倍DES）
				主流	ASE：Advanced Encryption Standard；（128bits、192bits，256bits，384bits）
					Blowfish
					Twofish
					IDEA
					RC6
					CAST5


					特性：
						1、加密、解密使用同一个密钥;
						2、将原始数据分割成为固定大小的块，逐个进行加密；

					缺陷：
						1、密钥过多
						2、密钥分发过多


				公钥加密：密钥分为公钥与私钥（身份验证，秘钥叫唤）
					公钥：从私钥中提取产生；可公开给所有人：public key
					私钥：通过工具创建，使用者自己留存，必须保证其私密性，secret key
					特点：用公钥加密的数据，只能使用与之配对儿的私钥解密；反之亦然

					用途：
						数字签名：主要在于让接收方确认发送发的身份
						密钥交换：发送方用对方公钥加密一个对称密钥，并发送给对方
						数据加密

					算法：RSA，DSA，ELGamal(商业加密算法)
						DSS：Digtal Signature Standard 
						DSA：Digtal Signature Algorithm


				单向加密：即提出数据指纹；只能加密，不能解密
					特征：定长输出，雪崩效应
					功能：确保数据完整性
					算法：
						MD5：message digest 5，128bits
						sha1：secure hash Algorithm 1，160bits
							sha224，sha256，sha384，sha512

				gpg：是pgp协议的实现
					GNU Privacy Guard（GnuPG或GPG）是一种加密软件，它是PGP加密软件的满足GPL的替代物。
					GnuPG依照由IETF订定的OpenPGP技术标准设计[2]。GnuPG用于加密、数字签名及产生非对称匙对的软件。


			'各加密的功能:'
				对称加密：保证数据的数据的保密性
				公钥加密：密钥分为公钥与私钥（身份验证，秘钥叫唤）



'密钥交换：'
	密钥交换：
		IKE（internet key exchange）

		公钥加密：
			DH (Deffie-Hellman)：生成会话密钥,参看：https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange

		DH：
			1、A: a,p协商生成公开的整数a,大素数p
			B: a,p
			2、A:生成隐私数据:x (x<p )，计算得出a^x%p，发送给B
			B:生成隐私数据:y,计算得出a^y%p，发送给A
			3、A:计算得出[(a^y%p)^x] %p = a^xy%p，生成为密钥
			B:计算得出[(a^x%p)^y] %p = a^xy%p，生成为密钥


			A：p，g（互相发送的两个密钥）
			B：p，g


			A：x（A自己生成的密钥x，不发送）   %：取模
				--> p^x%g ==> B 

				A：（p^y%g)^x=p^xy%g  （生成的会话密钥）
			
			B：y
				--> p^y%g ==> A 
				B： (p^x%g)^y=p^xy%g  （生成的会话密钥）


'CA认证：'

	PKI: Public Key Infrastructure 公钥基础设施
		签证机构：CA（Certificate Authority）
		注册机构：RA
		证书吊销列表：CRL
			挂失机制：（证书吊销列表）CRL
			可以挂失证书
		证书存取库：

	X.509v3：定义了证书的结构以及认证协议标准
		版本号
		序列号
		签名算法
		颁发者
		有效期限
		主体名称
		
		主体公钥
		CRL分发点
		发行者的唯一标识
		主体的唯一标识
		扩展信息
		发行者签名






'OpenSSL:'
	
	OpenSSL由三部分组成：
		1、libencrypto库：
			加密库

		2、libssl库：
			实现了ssl协议

		3、openssl多用途命令行工具：
			命令行工具

	SSL会话主要三步：
			客户端向服务器端索要并验正证书；
			双方协商生成“会话密钥”；
			双方采用“会话密钥”进行加密通信；


	ssl handshake：ssl握手（发送服务端的CA证书到客户端）
		第一阶段：ClientHello：
					支持的协议版本，比如tls 1.2；
					客户端生成一个随机数，稍后用户生成“会话密钥”
					支持的加密算法，比如AES、3DES、RSA；
					支持的压缩算法；
					
		第二阶段：ServerHello
					确认使用的加密通信协议版本，比如tls 1.2；
					服务器端生成一个随机数，稍后用于生成“会话密钥”
					确认使用的加密方法；
					服务器证书；
					
		第三阶段：
					验正服务器证书，在确认无误后取出其公钥；（发证机构、证书完整性、证书持有者、证书有效期、吊销列表）				
					发送以下信息给服务器端：
						一个随机数；
						编码变更通知，表示随后的信息都将用双方商定的加密方法和密钥发送；
						客户端握手结束通知；
						
		第四阶段：
					收到客户端发来的第三个随机数pre-master-key后，计算生成本次会话所有到的“会话密钥”；
					向客户端发送如下信息：
						编码变更通知，表示随后的信息都将用双方商定的加密方法和密钥发送；
						服务端握手结束通知；


'SSL：Secure Socket Layer'
	Netscape：1994（网景公司）
		v1.0 v2.0 v3.0

'TLS：transport layer Security'
	IEFT:1999
	v1.0 v1.1 v1.2 v1.3

	分层设计：
		1、最底层：基础算法原语的实现，aes，rsa，md5
		2、向上一层：各种算法的实现
		3、再向上一层：组合算法实现的半成品
		4、用各种组件拼装而成的各种成品密码学协议软件

		协议的开源实现：OpenSSL

		自建CA














	

