Week8 所有实验题

'5.8 作业'

	作业：

	1、每天的2点和12点整，将/etc备份至/testdir/backup目录中，保存的文件名称格式为“etcbak-yyyy-mm-dd-HH.tar.xz”
		$ vim /etc/cron.d/etcbackup
			0 2,12 * * * root /root/0508shell/backup.sh
		$ cd /root/0508shell
		$ vim backup.sh 
			#!/bin/bash

			BACKUP=/testdir/backup/

			if [ -d $BACKUP ];then
				tar -Jcf ${BACKUP}/etecbak-`date +"%Y-%m-%d-%H"`.tar.xz /etc &> /dev/null
			else
				mkdir 
				tar -Jcf ${BACKUP}/etecbak-`date +"%Y-%m-%d-%H"`.tar.xz /etc &> /dev/null
			fi


	2、每周2, 4, 7备份/var/log/messages文件至/logs目录中，文件名形如“messages-yyyymmdd”
		$ vim /root/0508shell
			#!/bin/bash

			LOG=/logs
			MES=/var/log/messages

			if [ -d $LOG ];then
			        tar -zcf messages-`date +"%Y%m%d"`.tar.gz  $MES &> /dev/null
			else
			        mkidr -p $LOG
			        tar -zcf messages-`date +"%Y%m%d"`.tar.gz  $MES &> /dev/null
			fi
		$ vim /etc/cron.d/message-backup
			#every week on Tue,Thu,Sun backup the file of /var/log/messages to the /logs

			0 0 * * 2,4,7 root /root/0508shell/log-backup.sh



	3、每两小时取出当前系统/proc/meminfo文件中以S或M开头的信息追加至/tmp/meminfo.txt文件中
		$ vim /proc/meminfo
			#!/bin/bash

			MEM=/proc/meminfo
			TXT=/tmp/meminfo.txt

			if [ -f $MEM ]
			        egrep "^(S|M)" $MEM  &>> $TXT
			else
			        echo "$MEM文件不存在，请检查您的系统是否存在此文件."
			fi
		$ vim /etc/cron.d/meminfo
			#backup the file of /proc/meminfo every 2hours.
			0 */2 * * * root /root/0508shell/meminfo.sh



	4、工作日时间，每10分钟执行一次磁盘空间检查，一旦发现任何分区利用率高于80%，就执行wall警报 # df -h | tr -s ' ' | egrep -v "^/dev/sr0" | cut -d" " -f1,5 | egrep "\<[[:digit:]]+%"  |
		$ vim disk-check.sh
			#!/bin/bash
			#Dis:check disk space ,if any disk space used over 80 percent ,just wall for waring
			df -h | tr -s ' ' | egrep -v "^/dev/sr0" | cut -d" " -f5 | egrep -o "\<[[:digit:]]+"  | sort -nr  &> /root/df.txt

			WARN=`head -1 /root/df.txt`

			if [ $WARN -gt 80 ];then
			        DISK=`df -h | grep "${WARN}%" | cut -d" " -f1`
			        [ -z "$DISK" ] && echo "查找失败,退出退出!" && exit 3
			        wall "${DISK} used over 80 percent , please check u free space of the HardDisk !!!" && exit 1
			else
			        echo "There is no disk space used over 80 percent."  && exit 2
			fi

		$ vim /etc/cron.d/disk-check
			#工作日时间，每10分钟执行一次磁盘空间检查，一旦发现任何分区利用率高于80%，就执行wall警报

			*/10 * * * 1-6 root /root/0508shell/disk-check.sh



'5.8PDF题：'
	1、使用kill 命令实现让httpd服务重新载入配置文件
		1)安装httpd
			yum install httpd
		2)查看服务
			service httpd status
			service httpd start
			netstat -tnlp
		3)修改配置文件，自定义主页目录
			vim /etc/httpd/conf/httpd.conf
				DocumentRoot "/var/www/maxiesite"
		4)创建自定义目录以及index.html
			mkdir /var/www/maxiesite
			vim /var/www/maxiesite/index.html
				hello maxiesite.com
		5)重新加载配置文件
			pstree -p 查找httpd的最初进程（父进程）
			kill -1 15835
		6)浏览器查看是否成功
			http://172.16.1.130

	2、对另一个终端中正在执行的ping命令实现ctrl +C功能
		$ ping 172.16.0.1
		另一台终端：
		$ ps aux | grep ping 
		$ kill -2 16315
		或者
		$ kill -2 `pidof ping`


	3、系统检测到黑客用root用户登录了系统，如何将黑客所登录的终端杀死，并立即对root用户修改密码。
		1)查看自己当前终端
			$ tty
			/dev/pts/3
		2)查看当前使用root用户登录到终端的bash
			$ ps axo user,pid,tty,cmd | grep bash
		3)杀死除当前终端的所有bash进程
			$ kill -9 15061 && echo "mcy958623" | passwd --stdin root


	4、测试一下sshd进程是否还存活着
		$ ps axo user,pid,cmd | grep sshd
		$ kill -0 14081 或者 $ kill -0 `pidof ping`
		$ echo $?


	5、将hacker用户所开启的进程全部杀死
		$ pkill -9 -U hacker


	6、并行执行三个脚本程序 	
		$ (f1.sh &);(f2.sh &);(f3.sh &)
		或者
		$ { f1.sh& f2.sh& f3.sh& }
		或者vim all.sh
			f1.sh &
			f2.sh &
			f3.sh &


	7、计划每到周日的早上8点定时将服务器重启，如何实现？
		$ vim /etc/cron.d/reboot
			#every single week of Sunday ,reboot the server.
			0 8 * * 7 root /sbin/reboot


	8、查看/bin/rpm命令所依赖的库文件
		$ ldd /bin/rpm


	9、列举三个常用查看系统负载的命令
		$ top
		$ htop
		$ uptime
		$ iotop


	10、如何将进程置入后台，而且在关装终端后不退出 
		$ nohup ping 172.16.0.1 &> /dev/null &
		或者 
		$ screen;ping 172.16.0.1
		如果关闭了，恢复任务
		$ screen -r


	11、用crontab执行定时任务，写出定时任务，每周三的凌晨1到5点，每十分钟执行一次/bin/backup.sh
		$ vim /etc/cron.d/backup-bin
			0 1-5 * * 3 root /bin/backup.sh 
		或者
		$ crontab -e 
			0 1-5 * * 3 root /bin/backup.sh 

		

	12、linux系统如何查看占用80端口的进程，并统计其进程数，将这些进程杀掉

		$ lsof -i :80 查看80端口占用的程序

		$ vim kill-80.sh 
			#!/bin/bash
			SERVER=`netstat -tnlp | grep "\:80" | tr  -s " " | cut -d"/" -f2`
			echo $SERVER
			PROCESS=`ps aux | grep "^root.*/usr/sbin/httpd" | head -1 | tr -s " " | cut -d" " -f2`
			echo $PROCESS
			COUNT=`pstree -p | grep httpd | wc -l`
			if [ -n "$SERVER" ] && [ -n "$PROCESS"  ];then
			        echo "占用80端口的进程数：`expr 1+${COUNT}`"
			        echo "开始杀死进程..."
			        sleep 2
			        killall -9 $SERVER &> /dev/null
			        [ $? -eq 0 ] && echo "杀死成功!"
			else
			        echo "进程不存在/80端口没有被占用" && exit 2
			fi

	13、boot目录中的initramfs-3.10.0-327.el7.x86_64.img 文件被误删，如何恢复之？
		(1)rm -rf /boot/initramfs-3.10.0-327.el7.x86_64.img
		(2)reboot 
		(3)插入系统光盘
		(4)进入光盘启动模式，选择救援模式
		(5)切根
			$ chroot /mnt/sysimage/
			$ cd /boot/
			$ mkinitrd /boot/initramfs-`uname -r`.img `uname -r`
		(6)重启
			$ exit 
			$ reboot 
		(7)等待重启完毕，即可修复成功

			如果第五步中的`mkinitrd命令`不存在，则执行：
				1)切根，重新安装内核
					$ chroot /mnt/sysimage
					$ mount /dev/sr0 /mnt 
					$ rpm -ivh /mnt/Packages/kernel-2.6.32-642.e16.x86_64.rpm --force
					$ exit
					$ reboot



'5.10作业：'
	'练习：'
	1、编写脚本/root/bin/createuser.sh，实现如下功能：使用一个用户名做为参数，如果指定参数的用户存在，就显示其存在，否则添加之；显示添加的用户的id号等信息
	
	2、编写脚本/root/bin/yesorno.sh，提示用户输入yes或no,并判断用户输入的是yes还是no,或是其它信息
		#!/bin/bash
		#
		read -p "Yue ma ?  yes or no ? " input

		[ -z $input ] && echo "请输入yes or no，不要输入空值" && exit 1

		input=`echo $input | tr "[[:upper:]]" "[[:lower:]]"`

		case $input in
		yes|y)
		        echo "lets go"
		        ;;
		no|N)
		        echo "bye"
		        ;;
		*)
		        echo "fuck u"
		        ;;
		esac

		unset input

		系统级的启动脚本存放位置：/etc/init.d/目录下

			case "$1" in
			    start)
			        rh_status_q && exit 0
			        $1
			        ;;
			    stop)
			        rh_status_q || exit 0
			        $1
			        ;;
			    restart)
			        $1
			        ;;
			    reload)
			        rh_status_q || exit 7
			        $1
			        ;;
			    force-reload)
			        force_reload
			        ;;
			    status)
			        rh_status
			        ;;
			    condrestart|try-restart)
			        rh_status_q || exit 0
			        restart
			        ;;
			    *)
			        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
			        exit 2
			esac


	3、编写脚本/root/bin/filetype.sh,判断用户输入文件路径，显示其文件类型（普通，目录，链接，其它文件类型）
		[ -d $FILE ]
		[ -f $FILE ]
		[ -L $FILE ]


	4、编写脚本/root/bin/checkint.sh,判断用户输入的参数是否为正整数
		#!/bin/bash
		if [[ $1 =~ ^[0-9]*$ ]] && [ $1 -gt 0 ]; then
            echo "a is an integer"
        else
            echo "a is not an integer"
        fi 




    '此脚本保存在CentOS7中的/root/shell-Advance/0510shell-class-test/目录中'

		1、判断/var/目录下所有文件的类型

			#!/bin/bash
			#Descript:判断/var/目录下所有文件的类型
			#date:2017-05-10

			DIR=/var
			for type in `ls $DIR`;do
			        MyPath=${DIR}/${type}
			        if [ -f ${MyPath} ];then
			                echo "$MyPaht 是普通文件"
			        elif [ -L $MyPath ];then
			                echo "$MyPath 是连接文件"
			        elif [ -d $MyPath ];then
			                echo "$MyPath 是目录文件"
			        else
			                echo "$MyPath 文件类型未知"
			        fi
			done

		
		2、添加10个用户user1-user10，密码为8位随机字符
			随机8位数字：head -c 10000 /dev/urandom | tr -dc 0-9 | head -c 8;echo
			随机8位字母数字：head -c 10000 /dev/urandom | tr -dc A-Za-z0-9 | head -c 8;echo

				'[root@centos7 0510shell-class-test]# cat useradd-random-passwd.sh'
				#!/bin/bash
				#Descript:添加10个用户user1-user10，密码为8位随机字符
				#date:2017-05-10

				SUM=10

				for i in `seq 1 $SUM`;do
					useradd user${i}
					echo "head -c 10000 /dev/urandom | tr -dc A-Za-z0-9 | head -c 8;echo" | passwd --stdin user${i}
					echo "user${i}成功创建并修改密码"
				done

		3、/etc/rc.d/rc3.d目录下分别有多个以K开头和以S开头的文件；分别读取每个文件，以K开头的文件输出为文件加stop，以S开头的文件输出为文件名加start
			“K34filename stop”
			“S66filename start”

				'借鉴这个脚本：/etc/rc.d/rc '
					for i in /etc/rc$runlevel.d/K* ; do

						# Check if the subsystem is already up.
						subsys=${i#/etc/rc$runlevel.d/K??}
						[ -f /var/lock/subsys/$subsys -o -f /var/lock/subsys/$subsys.init ] || continue
						check_runlevel "$i" || continue

						# Bring the subsystem down.
						[ -n "$UPSTART" ] && initctl emit --quiet stopping JOB=$subsys
						$i stop
						[ -n "$UPSTART" ] && initctl emit --quiet stopped JOB=$subsys
					done

			'[root@centos7 0510shell-class-test]# vim KorS-file.sh'
			#!/bin/bash
			# Author: Maxie
			# Date: 2017-05-10-17:20:04
			# Description:/etc/rc.d/rc3.d目录下分别有多个以K开头和以S开头的文件；分别读取每个文件，以K开头的文件输出
			为文件加stop，以S开头的文件输出为文件名加start

			File_Path=/etc/rc.d/rc3.d/

			if [ -d $File_Path ];then
			for i in `ls $File_Path`;do
			    if [[ $i =~ ^K ]];then
			        echo "K开头的文件: $i"
			        ${File_Path}/$i stop
			    elif [[ $i =~ ^S  ]];then
			        echo "S开头的文件: "$i
			        ${File_Path}/$i start
			    else
			        echo "此文件既不是S开头也不是K开头"
			    fi
			done
			fi
		

		4、编写脚本，提示输入正整数n的值，计算1+2+…+n的总和
			#!/bin/bash
			# Author: Maxie
			# Date: 2017-05-10-12:32:01
			# Description: 提示输入正整数n的值，计算1+2+…+n的总和

			read -p "请输入正整数: " NUM

			SUM=0

			if [[ $NUM =~ ^[0-9]+$ ]];then
				echo "输入正确，下面开始计算1+..+n的值"
				for i in `seq $SUM $NUM`;do
					let SUM=SUM+i
				done
				echo "总和为:$SUM"
			else
				echo "输入错误，请输入正整数" && exit 1
			fi
		
		
		5、编写脚本，提示请输入网络地址，如192.168.0.0，判断输入的网段中主机在线状态
			测试：172.16.0.0/16网段内在线的IP地址
			
			'[root@centos7 0510shell-class-test]# cat ip-online.sh'
			#!/bin/bash
			#user:Maxie
			# 写一个脚本，提示请输入网络地址，如 172.16.0.0 ，判断输入的网段中主机在线状态

			echo -n "IP:"   # 提示输入IP
			read IP         # 说明信息IP


			# 定义变量名称=调用$IP获取的值 抽取 以.为分隔符 1-2的字符
			IpAddr=`echo $IP | cut -d. -f1-2`.

			# 定义变量名称=调用$IP获取的值 抽取 以.为分隔符 1-3的字符
			#ipdizhi=`echo $IP | cut -d. -f1-3 `.

			#ip地址扩展表达式
			if echo $IP | egrep '\<([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\>' &>/dev/null
			then
			  #这里的0 20是从172.16.0.X-172.16.10.X
			  for I in `seq 0 10`
			  do
				#这里的0 20是从172.16.0.0-172.16.0.20
			    	for i in `seq 0 20`
			    	do
			        	if ping -c 1 -W 1 ${IpAddr}${I}.${i} &> /dev/null
			        	then
			            		echo -e "${IpAddr}${I}.${i}\tonline"
			        	else
			           		echo -e "${IpAddr}${I}.${i}\toffline"
					fi
			    	done
			  done
			fi

		
		6、打印九九乘法表

			[root@centos7 0510shell-class-test]# ./99chengfabiao.sh
			1*1=1
			2*1=2 2*2=4
			3*1=3 3*2=6 3*3=9
			4*1=4 4*2=8 4*3=12 4*4=16
			5*1=5 5*2=10 5*3=15 5*4=20 5*5=25
			6*1=6 6*2=12 6*3=18 6*4=24 6*5=30 6*6=36
			7*1=7 7*2=14 7*3=21 7*4=28 7*5=35 7*6=42 7*7=49
			8*1=8 8*2=16 8*3=24 8*4=32 8*5=40 8*6=48 8*7=56 8*8=64
			9*1=9 9*2=18 9*3=27 9*4=36 9*5=45 9*6=54 9*7=63 9*8=72 9*9=81
			
			'[root@centos7 0510shell-class-test]# cat 99chengfabiao.sh'
			#!/bin/bash
			#Descript:99乘法表
			#date:2017-05-10

			for (( i=1;i<=9;i++  ))
			do
		        for  (( j=1;j<=i;j++ ))
        		do
                	let "sum=i*j"
                	echo  -e "$i*$j=$sum \c"
        	done
        			echo
			done
		
		
		7、在/testdir目录下创建10个html文件,文件名格式为数字N（从1到10）加随机8个字母，如：1AbCdeFgH.html
			[root@centos7 0510shell-class-test]# cat create-html.sh
			#!/bin/bash --login
			# Author: Maxie
			# Date: 2017-04-13-15:42:46
			# Description: Receive an integer of 1 to 5 as a parameter, the function for the creation of documents, text. The name of the file is 8 random capital letters and ends with .html.

			if echo "$1" | grep -q '^[0-9]\+$'; then
			echo "$1 is number."  &> /dev/null
			else
			echo "$1 is not number." &> /dev/null
			exit 2
			fi

			SUM=$1
			FILE_SUM=0

			while [ $SUM -gt $FILE_SUM ]
			do
				touch  `head -c 100 /dev/urandom | tr -dc A-Z | head -c 8;echo`.html
				let FILE_SUM++
			done


		8、打印等腰三角形
			sumline=10  #总行数
			sumstart=line*2-1  #一行的星星数
			sumspace=sumline-line   #一行的空格数
			line       #第几行
			
			公式：


			老师方法：
				#!/bin/bash
				#
				let sum=10
				for line in `seq 1 $sum`;do  #打印10行
					for space in `seq 1 $[sum-line]`;do   #打印空格
						echo -e " \c"	#删除换行
					done

					for starts in `seq 1 $[line*2-1]`;do  #打印星星数量
						echo -e "*\c" 	#删除换行
					done
					echo                #每打印完一行空格+星星之后 进行换行，打印下一行星星

				done

			自己做：
				#!/bin/bash
				#Descript:打印等腰三角形
				#date:2017-05-10
				sumline=10
				for line in `seq 1 $sumline`; do

				        for i in `seq 1 $[sumline-line]`;do
				                echo -e " \c"
				        done
				        for j in `seq 1 $[line*2-1]`;do
				                echo -e "*\c"
				        done
				        echo
				done







		9、测试172.16.0.0/16网段中，哪个ip能上网
			思路：
				1、修改自己的IP
				2、ping 一个网站
				因为这种IP地址是加过策略的，可以上网
				3、ipconfig命令临时加IP地址以及网关
					或者ip addr命令

				4、ping -I 指定网卡
					选择多个网段，并行执行脚本
				5、

		10、打印国际象棋

			#!/bin/bash
			# Author: Maxie
			# Date: 2017-05-10-18:43:54
			# Description:打印国际象棋

			#给国际象棋的长和宽赋值
			a=8

			for i in `seq 1 $a`;do
			b=8
			        for  j in `seq 1 $b`;do
			                sum=$[i+j]
			                c=`expr $sum  % 2`
			                if [ $c -eq 0 ];then
			                        echo -ne "\033[41;1m  \033[0m"
			                else
			                        echo -en "\033[43;1m  \033[0m"
			                fi
			        done
			        echo
			done

		11、打印五星红旗



'5.10课后实验题：'
	进程相关作业：
	'实验：' 把/etc/inittab文件中的runlevel修改成了6（无限重启）
			恢复方法：
				开机进入倒计时，使用回车
					进入菜单模式
						按a键，进入到内核启动参数编辑
							在行尾添加 3，这次启动进入3模式，绕过/etc/inittab文件


	'实验2：'忘记root用户密码，如果破解（只能在物理机上操作，不能通过远程）
			开机进入倒计时，使用回车
				进入菜单模式
					按a键，进入到内核启动参数编辑
						直接输入single 或者 single S 或者 single s 
						即可进入到单用户模式
						直接passwd修改密码

	'实验3：'删除/boot/vmlinuz...文件，如何恢复？
		1)进入救援模式
		2)挂载光盘
		3)拷贝光盘中的/mnt/cdrom/isolinux/vmlinuz文件或者 /mnt/images/pxeboot下的vmlinuz文件都可以
			这里需要修改这个文件的文件名
			cp /mnt/cdrom/isolinux/vmlinuz /mnt/sysimage/boot/vmlinuz-`uname -r` 即可





	'实验4：'把程序加入到服务中：（扩展：把编译安装的httpd添加成服务）

					$ vim /etc/rc.d/init.d/testsrv
						#!/bin/bash
						#chkconfig:345 98 01
						#description: test service
						case $1 in 
						start)
							echo testsrv is starting
							touch /app/testsrv
							;;
						stop)
							echo testsrv is stopped
							rm -f /app/testsrv
						status)
							[ -f /app/testsrv ] && echo testsrv is running || echo testsrv is stopped
							;;
						*)
							echo "testsrv usage:start|stop|status"
							;;
						esac
					$ chmod +x /etc/rc.d/init.d/testsrv
					$ chkconfig --add testsrv
					即可 添加成功


					删除服务：
					$ chkconfig --del testsrv
					$ rm -f /etc/rc.d/init.d/testsrv
					即可 删除成功


		'如果这个服务出故障了，启动时就会出BUG了，会一直停在那里；系统就起不来了'
						如何解决？
							解决方案：
							方法1、 
								1)开机进入到单用户模式
								2)chkconfig --level 5 testsrv off #关闭5模式的自启动服务
							
							方法2、如果1模式也被设置了自启动
								1)进入到菜单 按a键 
								2)修改内核启动参数：
									(1)kernel /vmlinuz-2.6.32-642.el6.x86_64 ro root=/dev/mapper/vg0-root rd_NO_LUKS rd_NO_DM LANG=en_US.UTF-8 rd_LVM_LV=vg0/swap rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto rd_LVM_LV=vg0/root  KEYBOARDTYPE=pc KEYTABLE=us rhgb crashkernel=auto quiet rhgb quiet
										在最后 加入：
										init=/bin/bash 
										开机后直接进入/bash
									(2)因为现在的/文件系统是只读的 ro
										重新挂载根文件系统 mount -o remount,rw /
									(3)再修改 服务的开机自启动
										$ chkconfig --level 135 testsrv off
									(4)重启即可

	'实验5：'
	?	'挂载ntf文件系统：（第4个视频的20分钟左右） 做这个实验'（思考：为什么开机没有启动网络服务之前，就能挂载nfs共享文件）
			原因：
				1、在网络服务没有起来时,nfs并没有真正挂载，在系统启动了网络服务之后，nfs才自己通过rpc协议，查找/etc/fstab文件中的NFS服务器，并挂载
			按照系统启动顺序的原理：
				1.应该是自动挂载会失败，因为系统启动时先执行初始化脚本/etc/rc.d/rc.sysinit，然后才会执行/etc/rc.d/下某个模式的开机服务脚本：也就是启动网络服务
				2.正常的nfs挂载是要写在/etc/rc.d/rc.local下的，这样才不会出现bug
					在	/etc/rc.d/rc.local中写入：
						mount -t nfs 172.16.23.136:/app /mnt/nfs

			'正确原因：'
				查看/etc/init.d/目录下，应该有 netfs这个服务
				所以/etc/rc.d/rc#.d/下 netfs比network服务晚启动，所以能运行这个服务并查找网络中的nfs服务器，并挂载NFS
			

	'实验6：破坏MBR 446个字节，并恢复'
		(1)如果有备份，直接使用dd命令可以恢复
		(2)如果没有备份，使用grub-install命令
			1）切根
			2) $ gurb-install  /dev/sda
		


	'实验6：破坏MBR 后续的扇区，并恢复' (stage1.5阶段的破坏)
		删除：
			$ dd if=/dev/zero of=/dev/sda count=2048 skip=512 seek=512

		修复方法1：
			$ grub-install /dev/sda   此命令可以修复 1，1.5，2阶段的破坏

		修复方法2：
			1)进入救援模式
			2)切根
			3) $ grub  进入grub界面
				在grub的界面输入：
					> root (hd0,0)
					> setup (hd0)        #此命令的执行前提：/boot/grub/下的文件都必须存在 一堆stage文件，如果不存在，则执行失败
					> quit 
			4)exit 
			5)reboot

	'实验7：删除/boot/grub/*，如何恢复'
		修复方法：
			1)$ 进入救援模式
			2)切根
			3)安装grub-install /dev/sda 
			4)但是 grub.conf文件就没了
			5)需要手写/boot/grub/grub.conf文件


	'实验：'
		'LFS自己构建一个Linux操作系统'





	'总结：'
		1、如果删除了MBR的前446字节的信息，恢复的话：
			1）使用grub-install命令修复，修复之后的前446字节将与/boot/grub/stage1文件中内容相同
			2）如果使用的是之前备份的MBR来恢复，则恢复的比较完整，一般恢复之后的信息还是与stage1文件内容不太相同
			3）而且如果执行了 '1）步骤'，MBR512个字节之后，将会出现stage1.5和stage2的信息（这是因为我们做了修复的操作）

		2、破坏stage1.5阶段：
			可以看到我们已经把512字节之后的2048字节的信息清空了
			现在已经找不到grub.conf的位置了，所以菜单都没有出来
			1)恢复方法：
				切根
					chroot /mnt/sysimage
				进入grub界面：
					grub 
				输入：
					root (hd0,0)
					setup (hd0)
					quit 
			2)方法2：
				使用备份进行恢复
		3、删除/boot/grub/*：
			$ 进入救援模式
			$ 切根
			$ grub-install 
			$ vim /boot/grub/grub.conf 
				default 0
				timeout 5
				title CentOS 6.8 (MaxieCloud version 1.0)
					kernel /vmlinuz-`uname -r` selinux=0 root=/dev/sda2
					initrd /initramfs-`uname -r`.img
	


'5.10课后PDF练习题：'
	
	1.编写一个脚本，可接收一个1-7 的数字作为参数，用if 和case 两种方法实现根据输入的数字输出对应星期的英文简称。

	[root@centos7 PDF-homework]# cat week.sh 2-week.sh
	#!/bin/bash
	# Author: Maxie
	# Date: 2017-05-10-19:43:17
	# Description:编写一个脚本，可接收一个1-7 的数字作为参数，用if 和case 两种方法实现根据输入的数字输出对应星期的英文简称。

	read -p "please input a num of week: " WEEK

	case $WEEK in

	1)
		echo "Mon"
		;;
	2)
		echo "Tue"
		;;
	3)
		echo "Wed"
		;;
	4)
		echo "Thur"
		;;
	5)
		echo "Fri"
		;;
	6)
		echo "Sat"
		;;
	7)
		echo "Sun"
		;;
	esac

	unset WEEK
	#!/bin/bash
	# Author: Maxie
	# Date: 2017-05-10-19:43:17
	# Description:编写一个脚本，可接收一个1-7 的数字作为参数，用if 和case 两种方法实现根据输入的数字输出对应星期的英文简称。

	read -p "please input a num of week: " WEEK

	[[ $WEEK =~  ^[0-7]$ ]] && echo "输入正确"  || echo "输入错误"; exit 1

	if [ $WEEK -eq 1 ];then
		echo "Mon"
	elif [ $WEEK -eq 2 ];then
		echo "Tue"
	elif [ $WEEK -eq 3 ];then
		echo "Wed"
	else
		echo "Sun"
	fi

	unset WEEK 

	2.编写一个脚本输出99 乘法表。


	[root@centos7 PDF-homework]# cat 99chengfabiao.sh
	#!/bin/bash
	# Author: Maxie
	# Date: 2017-05-11-11:12:12
	# Description: 99乘法表

	a=9
	for i in `seq 1 $a`;do
		for j in `seq 1 $i`;do
		let "sum=i*j"
		echo -e  "$i*$j=$sum\t\c"
		done
		echo
	done

	unset a
	unset sum
	unset i
	unset j


	3.编写一个脚本，随机生成10 个100 以内的整数，输出这10 个数字，并显示其中的最大值和最小值。

	echo $(( RANDOM % 100 ))

	echo $[RANDOM%100]


	[root@centos7 PDF-homework]# cat within100-random.sh
	#!/bin/bash
	# Author: Maxie
	# Date: 2017-05-11-11:35:53
	# Description:编写一个脚本，随机生成10 个100 以内的整数，输出这10 个数字，并显示其中的最大值和最小值。
	a=1
	num=$[RANDOM%100]
	max=$num
	min=$num
	while [ $a -lt 10 ];do

		echo "第${a}个随机数: ${num}"

		if [ $num -ge $max ];then
			max=$num
		fi
		if [ $num -le $min ];then
			min=$num
		fi
		num=`echo $[RANDOM%100]`
		let a++
	done

	echo "最大值 $max"
	echo "最小值 $min"

	unset a
	unset max
	unset min
	unset num
	unset i


	4.编写一个脚本，可接收一个整数n 作为参数，要求计算出0 到n 之间所有奇数的和。

	[root@centos7 PDF-homework]# vim jishu-count.sh
	#!/bin/bash
	# Author: Maxie
	# Date: 2017-05-11-14:43:16
	# Description:编写一个脚本，可接收一个整数n 作为参数，要求计算出0 到n 之间所有奇数的和。

	read -p "please input a number ,and i will count 0 to it of odd number count :" num

	[ -z $num ]  && echo "输出为空，重新输入" && exit 1

	sum=0
	for i in `seq 0 $num`;do
	        check=`expr $i % 2`
	        if  [ $check -eq 1 ];then
	                sum=`expr $i + $sum`
	        else
	                echo "此数是偶数 $i，不予计算"
	        fi
	done
	echo "奇数总和: $sum"

	unset sum
	unset num
	unset j
	unset i
	unset check



	'第二种方法：'

	#!/bin/bash

	read -p "please input a number ,and i will count 0 to it of odd number count :" num

	sum=0

	for i in `seq 1 2 $num`;do
		echo $i 
		let sum+=$i 
	done

	echo "奇数之和 $sum"



	'第三种方法：'

	#!/bin/bash


	5.编写一个脚本，可接收一个包含数字和大小写字母的字符串作为参数，功能为按字母顺序排序，数字在最前面。

	方法1：
	方法2：把字母转换成ACCII码再排序，排序完转换回来


	6.编写一个脚本，可接收一个绝对路径作为参数，统计该路径下每种文件类型各有多少个文件。

	[root@centos7 PDF-homework]# cat FileType.sh
	#!/bin/bash
	# Author: Maxie
	# Date: 2017-05-11-15:00:49
	# Description:
	cd $1 &> /dev/null
	if [[ $? = 0 ]]
	then
	DirName=$1
	    for i in `ls -A $1`
	    do
	        FileType=`ls -dl $DirName/$i | cut -c1`
	        case $FileType in
	            d)
	                echo "$i is a diretory."
			echo
	                ;;
	            -)
	                echo "$i is a common file."
			echo
	                ;;
	            l)
	                echo "$i is a link file."
			echo
	                ;;
	            b)
	                echo "$i is a block file."
			echo
	                ;;
	            c)
	                echo "$i is a character file."
			echo
	                ;;
	            p)
	                echo "$i is a pipe file."
			echob
	                ;;
	            s)
	                echo "$i is a socket file."
			echo
	                ;;
	            *)
	                echo "$i is other file"
			echo
	                ;;
	        esac
	    done
	else
	    echo "$1 is not a diretory"
	    exit 2
	fi


	方法2： 



	7.简述CentOS6 开机启动流程。

	POST --> BootSequence(BIOS) --> BootLoader（MBR）--> Kernel（ramdisk）--> rootfs（readonly）--> /sbin/init ()
	第一步加电自检
	第二步读取BIOS当中的启动次序，从而决定哪个磁盘设备是接下来的引导加载次序中的设备；
	第三步读取设备的Bootloader，（一般放在硬盘MBR中），
	第四步读取内核文件加载内核，启动操作系统；加载内核完成，内核在磁盘分区上，内核为了完成自身初始化过程中必须要加载真正的根文件系统，这就借助ramdisk来完成真正的根文件设备驱动程序的加载；所以一旦内核借助于ramdisk完成加载真正的根文件系统所在的设备，下一步就装载根文件系统，其实就是mount，不需手动mount，内核会自动mount根文件系统所在的设备挂载至根上，所以说根是在内核中就是这个道理




	8.Linux 下有几个运行级别，都代表什么意思？


		init0：系统关机，系统默认运行级别不能设为0，否则不能正常启动
		init1：单用户工作状态，root权限，用于系统维护，禁止远程登陆
		init 2：多用户状态(没有NFS) 
		init3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式
		init 4：系统未使用，保留
		init5：X11控制台，登陆后进入图形GUI模式
		init 6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动

		运行级别的原理：
		1   在目录/etc/init.d下有许多服务器脚本程序，一般称为服务(service) 
		2   在/etc下有7个名为rcN.d的目录，对应系统的7个运行级别
		3   rcN.d目录下都是一些符号链接文件，这些链接文件都指向init.d目录下的service脚本文件，命名规则为K+nn+服务名或S+nn+服务名，其中nn为两位数字。
		4   系统会根据指定的运行级别进入对应的rcN.d目录，并按照文件名顺序检索目录下的链接文件
		对于以K开头的文件，系统将终止对应的服务
		对于以S开头的文件，系统将启动对应的服务
		5   查看运行级别用：runlevel 
		6   进入其它运行级别用：init N 
		7   另外init0为关机，init 6为重启系统



'5.12课后实验题：'
	'实验1：如果grub.conf文件编写错误，如何恢复？'
		(1)进入菜单，按e键
		(2)修改顺序即可
			删除上面的，在下面手动添加

		(3)启动系统
		(4)再手动修改/boot/grub/grub.conf文件

	'实验2：如果grub.conf文件被删除，如何恢复？'
		(1)重启后，直接进入grub界面
		(2)手写：
			grub> kernel /vmlinuz-2.6.32-642.el6.x86_64 selinux=0 root=/dev/mapper/vg0-root
			grub> initrd /initramfs-2.6.32-642.el6.x86_64.img
			grub> boot  #启动
		(3)启动后，在/boot/grub/下创建grub.conf文件
			$ vim /boot/grub/grub.conf 
			default=0
			timeout=5
			splashimage=(hd0,0)/grub/splash.xpm.gz 
			title CentOS Maxie 2.0
				kernel /vmlinuz.... root=/dev/mapper/vg0-root selinux=0
				initrd /initramfs.....img 

			即可修复成功


			妈的。。。没写title。。。

	'实验3：删除/boot/grub/*，如何恢复'
		(1)进入救援模式
		(2)切根
		(3)$ gurb-install /dev/sda 
		   $ sync #同步磁盘
		(4)写一个/boot/grub/grub.conf 

			$ vim /boot/grub/grub.conf 
			default=0
			timeout=5
			splashimage=(hd0,0)/grub/splash.xpm.gz 
			title CentOS Maxie 2.0
				kernel /vmlinuz.... root=/dev/mapper/vg0-root selinux=0
				initrd /initramfs.....img 




	'实验4：删除/boot/*，如何恢复？'
		方法1：
			（1）挂载系统光盘（第一张盘）
			（2）VMware，ESC键，选择光盘引导
			（3）选择救援模式
			（4）切根，执行以下命令：
				$ grub-install /dev/sda 
				$ mount /dev/sr0 /mnt 
				$ rpm -ivh --force kernel-2.6.32-642.e16.x86_64.rpm 
				$ cd /boot/grub 
				$ vim grub.conf 
					default=0
					timeout=5
					title CentOS 6.8 (Maxie-2.6.32)
						root (hd0,0)
						kernel /vmlinuz-2.6.32-642.e16.x86_64 selinux=0 root=/dev/mapper/vg0-root LANG=en.US.UTF-8 rd_LVM_LV=vg0/root
						initrd /initramfs-2.6.32-642.e16.x86_64.img
				$ exit 
				$ reboot 即可
			如果是'CentOS7：'
				重建grub的命令是：
					grub-install 是grub 0.xx的了，grub2以后貌似是用 'update-grub'

		方法2：
			(1)进入救援模式
			(2)切根
			(3)挂载/dev/sr0 /mnt 
			(4)拷贝 cp /mnt/isolinux/vmlinux /boot/
			(5)执行mkinitrd命令：
				$ mkinitrd /boot/initramfs-`uname -r`.img  `uname -r`
				$ sync 
			(6)$ grub-install /dev/sda 
			(7)编辑/boot/grub/grub.conf
				default=0
				timeout=5
					titile CentOS 6.8
					kernel /vmlinuz root=/dev/sda2 selinux=0
					initrd /initramfs-2.6.32-642.e16.x86_64.img
			(8)同步磁盘 
				$ sync 
			(9)重启 


	'实验5：如果/sbin/init 程序被删除，如何恢复？'
		(1)在菜单界面，按a键
			输入 init=/bin/bash  （加载第一个进程为 bash）
		(2)启动后，直接进入到 bash界面
		(3)因为系统现在是 ro(只读)，需要重新挂载
			$ mount -o remount,rw /
		(4)挂载光盘，重新安装 upstart的rpm安装包
			或者
			之前有备份，直接拷贝/sbin/下

		!!!!!!(5)同步!!!!!!!!!!! 
			$ sync 

		(6)重启

		这里出问题 估计是没有 同步的问题！！！！


		但是可能会导致 init 这个二进制文件属性信息变化，因为有'selinux'
			$ ll -Z /sbin/init 


	'实验6：删除/etc/fstab文件和/boot/*，如何恢复？'（!!!!普通手动 划分区的情况下!!!!）
		(1)进入救援模式
		(2)因为fstab被删除，救援模式不会自动挂载/和其他分区
		(3)使用 $ blkid查看
		(4)使用 fsdisk 查看 
			$ fdisk -l 
			如果 BOOT 选项 有 *  ，则为boot分区
		(5)创建挂载点，并挂载
			$ mkdir /mnt/sda{1,2,3}
			$ mount /dev/sda1 /mnt/sda1 
			$ mount /dev/sda2 /mnt/sda2
				.....

				根据挂载后，查看每个挂载点上的数据信息，判断分区的类型是 boot  /  还是其他

		(6)找到根在哪个分区上，并创建fstab
			$ vi /mnt/sda2/etc/fstab 			#注意：fstab中/ 和/boot的填写顺序（也就是它们的挂载顺序）
				UUID=						 /     ext4 defaults 1 1
				UUID=22523-2242-52362-2352 /boot ext4 defaults 1 2
				UUID=						 swap  swap defaults 0 0

				'!!!!!!注意：这里UUID后面不能跟双引号（blkid命令获取的UUID会有引号）!!!!!!'

			$ sync    !!!!!同步!!!!!
			$ exit 
			$ reboot 
		(7)重新进入救援模式 !!!
			进入后：
				$ df  查看所有分区是否都挂载成功，如果没有，检查/etc/fstab文件 ，必须要全部挂载成功！

		(8)开始修复 /boot下的信息：
			按照之前实验做即可

				切根，执行以下命令：
				$ grub-install /dev/sda 
				$ mount /dev/sr0 /mnt 
				$ rpm -ivh --force kernel-2.6.32-642.e16.x86_64.rpm 
				$ cd /boot/grub 
				$ vim grub.conf 
					default=0
					timeout=5
					title CentOS 6.8 (Maxie-2.6.32)
						root (hd0,0)
						kernel /vmlinuz-2.6.32-642.e16.x86_64 selinux=0 root=/dev/mapper/vg0-root LANG=en.US.UTF-8 rd_LVM_LV=vg0/root
						initrd /initramfs-2.6.32-642.e16.x86_64.img
				$ exit 
				$ reboot 即可


	'实验7：如果centos是逻辑卷安装，删除/fstab文件和/boot*，如何恢复？'
		(1)进入救援模式
		(2)$ blkid查看 只能看到/dev/sda1 和 /dev/sda2是一个逻辑卷
		   $ /etc/rc.d/rc.sysinit （激活lvm卷）
		(3)查看逻辑卷
			$ lvdisplay  或者 lvs 
		(4)激活逻辑卷
			'也就是激活卷组：'
			$ vgchange -a y vg0
				这里vg0  要通过 vgdisplay查看一下，确认是不是
			$ lvdisplay #在查看一下，是否都激活


		(5)再查看 /dev/mapper 下应该就有文件了
		(6)挂载逻辑卷
			$ mkdir /mnt/root
			$ mount /dev/mapper/vg0-root /mnt/root 
		(7)创建/etc/fstab文件
			在 /dev/mapper下的所有逻辑卷都需要写入文件内
			$ vim /etc/fstab 
				/dev/mapper/vg0-root    /                       ext4    defaults        1 1
				UUID=cce14206-5f29-46e9-bd1c-adc739d1d3d0 /boot ext4    defaults        1 2
				/dev/mapper/vg0-usr     /usr                    ext4    defaults        1 2
				/dev/mapper/vg0-var     /var                    ext4    defaults        1 2
				/dev/mapper/vg0-swap    swap                    swap    defaults        0 0 
		(8)同步 $ sync
		(9)重启
		(10)再进入救援模式
			查看是否能自动挂载 / 
		(11)开始恢复/boot/*
			同上面的实验步骤：
				切根，执行以下命令：
				$ grub-install /dev/sda 
				$ mount /dev/sr0 /mnt 
				$ rpm -ivh --force kernel-2.6.32-642.e16.x86_64.rpm 
				$ cd /boot/grub 
				$ vim grub.conf 
					default=0
					timeout=5
					title CentOS 6.8 (Maxie-2.6.32)
						root (hd0,0)
						kernel /vmlinuz-2.6.32-642.e16.x86_64 selinux=0 root=/dev/mapper/vg0-root LANG=en.US.UTF-8 rd_LVM_LV=vg0/root
						initrd /initramfs-2.6.32-642.e16.x86_64.img
				$ exit 
				$ reboot 即可



'5.12 自制Linux系统实验题：'




'5.12 编译Linux内核：'
	'实验：编译安装内核'（足够空间，起码20G）
	使内核支持ntfs文件系统
		$ cat /boot/config-3.10.0-327.el7.x86_64  | grep -i ntfs
		# CONFIG_NTFS_FS is not set
			not set :就是不启用这个功能

	(1)解压内核文件
		$ tar -xvf linux-4.10.15....
	(2)$ du -sh linux-4.10.15....
	(3)$ cat /boot/config-3.10.0-327.el7.x86_64文件('作为参考的模板')
		内核启用了哪些功能
	(4)$ cp /boot/config-3.....   /root/linux-4.11/.config 
	(5)$ ll .config
	(6)$ 安装开发包组
		$ yum groupinstall "Development Tools"
	(7)$ make menuconfig     #打开编译安装菜单(一个基于curses的图形化配置界面)
		  yum install -y ncurses-devel    会缺少这个包，安装后再执行
		  1)进入菜单
		  	2)进入General setup菜单
		  		修改local VERSION
		  			设置自己的编译版本号
			3)进入File system菜单
				查找NTFS
					进入DOS/FAT/NT FILESYSTEM菜单
						选中NTFS和FAT
							NTFS file system support
			4)退出并保存
	(8)查看.config文件大小 是否比/boot下的config文件大了
	(9)查看NFFS功能是否启用：
		 $ grep -i ntfs .config
			CONFIG_NTFS_FS=m
			CONFIG_NTFS_DEBUG=y
			CONFIG_NTFS_RW=y
	(10)开始编译：
		$  make -j 4 && (for i in {1..10};do echo -e "\a";sleep 0.5; done)   #-j并行加速，4个CPU

			报错：
				scripts/sign-file.c:25:30: fatal error: openssl/opensslv.h: No such file or directory
				 #include <openssl/opensslv.h>
				                              ^
				compilation terminated.
				make[1]: *** [scripts/sign-file] Error 1
				make[1]: *** Waiting for unfinished jobs....
				  HOSTCC  scripts/mod/file2alias.o
				  HOSTLD  scripts/mod/modpost
				make: *** [scripts] Error 2
				make: *** Waiting for unfinished jobs....
				make: *** wait: No child processes.  Stop.

			安装：yum install openssl-devel -y 
		$ 需要等待20分钟 ： 开始时间：16：08  完成时间：16：30
			日本vps：开始时间16：37  完成时间： 

	?(11)$ make modules_install 
		[root@localhost linux-4.11]# updatedb
		[root@localhost linux-4.11]# locate ntfs.ko
		/root/linux-4.11/fs/ntfs/.ntfs.ko.cmd
		/root/linux-4.11/fs/ntfs/ntfs.ko
	?(12)$ make install    #boot分区必须要大，大于1G起码
	?(13)查看/boot分区下的内核文件（我们制作的4.11-1.0-Maxie的内核版本）
		查看/boot/grub2/grub2.cfg
	
	(14)删除编译的内核：
		(1) rm -r /boot/*4.11-Maxie*   #应该是4个文件
		(2) vim /boot/grub2/grub.conf 
			删除关于 4.11-Maxie 的启动项
		(3) rm /lib/modules/4.11-Maxie....  -rf 












