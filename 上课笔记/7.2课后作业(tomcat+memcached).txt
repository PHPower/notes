7.2课后作业(tomcat+memcached)






'博客作业：tomcat'
	(1) nginx + tomcat cluster, httpd(proxy_http_module)+tomcat cluster, httpd(proxy_ajp_module)+tomcat cluster；
		特别说明会话保持的实现方式；
	(2) tomcat cluster升级为'session cluster', 使用'deltaManager'；
	(3) tomcat cluster将'会话保存至memcached中'；

	测试页：
		<%@ page language="java" %>
		<%@ page import="java.util.*" %>
		<html>
		    <head>
		        <title>Test Page</title>
		    </head>
		    <body>
		        <font size=10 color="#38B0DE" > Tomcat One Server  </font>
		        <table align="centre" border="1">
		        <tr>
		                <td>Session ID</td>
		                <% session.setAttribute("magedu.com","magedu.com"); %>
		                <td><%= session.getId() %></td>
		        </tr>
		        <tr>
		                <td>Created on</td>
		                        <td><%= session.getCreationTime() %></td>
		                </tr>
		        </table>
		        <br>
		        <% out.println("hello world");
		        %>
		    </body>
		</html>



(1)第一题：
	'实验1：配置一个测试jsp页面，并配置tomcat-user文件'
		$ yum install -y java-1.8.0-openjdk-devel tomcat tomcat-lib tomcat-admin-webapps tomcat-webapps tomcat-docs-webapp
		$ vim /etc/tomcat/tomcat-users.xml
		<role rolename="admin-gui"/>
		<role rolename="manager-gui"/>
		<user username="root" password="root@123" roles="manager-gui"/>
		<user username="tomcat" password="root@123" roles="admin-gui"/>

		$ systemctl start tomcat 

		$ mkdir /usr/share/tomcat/webapps/test/{classes,META-INF,WEB-INF}
		$ vim /usr/share/tomcat/webapps/test/index.jsp
		<%@ page language="java" %>
		<%@ page import="java.util.*" %>
		<html>
		    <head>
		        <title>Test Page</title>
		    </head>
		    <body>
		        <font size=10 color="#38B0DE" > Tomcat One Server  </font>
		        <table align="centre" border="1">
		        <tr>
		                <td>Session ID</td>
		                <% session.setAttribute("magedu.com","magedu.com"); %>
		                <td><%= session.getId() %></td>
		        </tr>
		        <tr>
		                <td>Created on</td>
		                        <td><%= session.getCreationTime() %></td>
		                </tr>
		        </table>
		        <br>
		        <% out.println("hello world");
		        %>
		    </body>
		</html>

		$ systemctl restart tomcat



	'实验2：配置LNMT，nginx反向代理'

		本机IP：
			172.16.3.10    192.168.1.30

		
		在实验1的基础上：

		1、安装nginx,并修改其配置文件
			$ yum install -y nginx 
			$ cd /etc/nginx/
			$ vim con.d/maxie.conf 
			upstream 
			server {
				listen 80;
				server_name www1.maxie.com;
				location / {
					proxy_pass http://192.168.1.30:80;
				}
			}

			$ nginx -t
			$ systemctl start nginx 

		2、修改客户端hosts文件
			$ vim /etc/hosts
			172.16.3.10 www1.maxie.com

		3、打开网页测试即可：
			http://www1.maxie.com  



	'实验3：使用http作为tomcat的反向代理'(http协议与ajp协议)
		在实现之前，需要将nginx服务停止


		'http协议'
		1、安装httpd，并修改其配置
			$ yum install httpd 
			$ cd /etc/httpd/conf.d/
			$ vim maxie.conf
			<VirtualHost *:80>
				ServerName www1.maxie.com
				ProxyRequests Off              # 关闭正向代理
				ProxyVia	  On           # 添加首部Via(由谁代理)--> 有可能会httpd被取消掉 
				ProxyPreserveHost On           # 把主机头部发送到后端；保留代理服务器上虚拟主机的头部(域名)
				<Proxy *>
					Require all granted
				</Proxy>
				ProxyPass / http://192.168.1.30:8080/          # 把/ 代理到后端服务器的地址
				#或者可以定义成：
				ProxyPass / http://192.168.1.30:8080/test/     # 把 / 代理到后端的 /test 上
				ProxyPassReverse / http://192.168.1.30:8080/   # 把重定向返回给客户端

				<Location />                                   # 设置代理的/ 允许谁访问
					Require all granted
				</Location>

			</VirtualHost>	


		2、查看httpd是否支持代理模块，并启动

			$ httpd -t 
			$ httpd -M | grep proxy 
			$ systemctl start httpd 

		3、打开网页测试
			http://www1.maxie.com 



		'ajp协议'

		1、修改conf文件即可
			$ vim maxie.conf

			<VirtualHost *:80>
				ServerName www1.maxiecloud.com
				DocumentRoot "/data/maxie/"
				ProxyRequests Off 			
				ProxyVia	  On 					
				ProxyPreserveHost On 		
				<Proxy *>
					Require all granted
				</Proxy>
				ProxyPass / ajp://192.168.1.30:8009/ 
				ProxyPassReverse / ajp://192.168.1.30:8009/ 

				<Location /> 
					Require all granted
				</Location>

			</VirtualHost>

		2、重新启动服务
			$ systemctl restart httpd 

		3、打开网页测试



	'实验4：使用nginx负载均衡后端tomcat服务器'
		增加一台tomcat服务器，并将其配置与之前的一台tomcat服务器的配置相同

		1、停止httpd服务，并修改nginx配置文件
			$ systemctl stop httpd 
			$ cd /etc/nginx/conf.d
			$ vim /etc/nginx/conf.d/maxie.conf 
			upstream tomcatsrv {
				server 192.168.1.50:8080;
				server 192.168.1.60:8080;
			}
			server {
			    listen          80;
			    server_name     www.maxie.com;
			    
			    location / {
			    	proxy_pass http://tomcatsrv;
			    }
			}

		2、启动服务 
			$ nginx -t 
			$ nginx -s reload 

		3、打开网页测试即可 
			http://www.maxie.com 




	'实验5：使用httpd负载均衡后端tomcat服务器，并设置httpd內建的负载均衡状态页开启'

		停止nginx服务

		1、编辑httpd配置文件
			$ vim /etc/http/conf.d/maxie.conf 	
			<Proxy balancer://tomcatsrv>
				BalancerMember http://192.168.1.50:8080
				BalancerMember http://192.168.1.60:8080
				ProxySet lbmethod=byrequests
			</Proxy>


			<VirtualHost *:80>
				ServerName www.maxie.com
				ProxyRequests Off                  # 关闭正向代理
				ProxyVia	  On               # 添加首部Via(由谁代理)--> 有可能会httpd被取消掉 
				ProxyPreserveHost On               # 把主机头部发送到后端；保留代理服务器上虚拟主机的头部(域名)
				<Proxy *>
					Require all granted
				</Proxy>
				ProxyPass / balancer://tomcatsrv/              # 把/ 代理到后端服务器的地址
				
				ProxyPassReverse / balancer://tomcatsrv/       # 把重定向返回给客户端

				<Location />                                   # 设置代理的/ 允许谁访问
					Require all granted
				</Location>

			</VirtualHost>	

			$ httpd -t 
			$ systemctl restart httpd 

		2、打开网页测试即可
			http://www.maxie.com 


		3、添加负载均衡状态页，并设置会话粘性
			$ vim /etc/http/conf.d/maxie.conf 	

			Header add Set-Cookie "MYID=.%{BALANCER_WORKER_ROUTE}e; path=/" env=BALANCER_ROUTE_CHANGED

			<Proxy balancer://tomcatsrv>
			        BalancerMember http://192.168.1.50:8080 route=tom1 loadfactor=2
			        BalancerMember http://192.168.1.60:8080 route=tom2 loadfactor=1
			        ProxySet lbmethod=byrequests
			        ProxySet stickysession=MYID
			</Proxy>
			<VirtualHost *:80>
			    ServerName wwww.maxie.com
			    ProxyRequests Off
			    ProxyVia      On
			    ProxyPreserveHost On
			    <Proxy *>
			        Require all granted
			    </Proxy>
			    ProxyPass / balancer://tomcatsrv/
			    ProxyPassReverse / balancer://tomcatsrv/

			    <Location />
			        Require all granted
			    </Location>

			    <Location /http-stats>                  # 开启管理负载均衡的接口
			        SetHandler balancer-manager         # 启动balancer-manager这个內建功能
			        ProxyPass !                         # !表示 不反代，只在本机处理
			        Require all granted
			    </Location>

			</VirtualHost>

			$ httpd -t 
			$ systemctl restart httpd 


		4、打开网页进行测试
			http://www.maxie.com 

			http://www.maxie.com/http-stats










(2)第二题
	tomcat cluster升级为'session cluster', 使用'deltaManager'；

	'3台机器：1台调度器，2台tomcat'


	1、同步时间
		$ ntpdate 172.16.0.1

	2、安装tomcat+jdk1.8
		$ yum install -y java-1.8.0-openjdk java-1.8.0-openjdk-devel 
		$ yum install -y tomcat tomcat-webapps tomcat-docs-webapp tomcat-admin-webapps

	3、配置两台tomcat节点的配置文件
		$ vim /etc/tomcat/tomcat-users.xml 
		<role rolename="admin-gui"/>
		<role rolename="manager-gui"/>
		<user username="root" password="root@123" roles="manager-gui"/>
		<user username="tomcat" password="root@123" roles="admin-gui"/>

		$ vim /etc/tomcat/server.xml
		<Connector port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               # 修改字符集编码为 UTF-8
               URIEncoding="UTF-8"
               # 自定义服务器名称，隐藏真实服务器版本
               Server="WTF MAN"
               redirectPort="8443" />


        $ vim /etc/sysconfig/tomcat 
        # 自定义配置文件： 以服务器模式启动，堆最大空间为1g，默认初始也是1g
        JAVA_OPTS="-server -Xms1g -Xmx1g"

    4、拷贝配置文件至另一台tomcat服务器中
    	$ scp /etc/tomcat/tomcat-users.xml /etc/tomcat/server.xml  root@172.16.3.50:/etc/tomcat/
    	$ scp /etc/sysconfig/tomcat root@172.16.3.50:/etc/sysconfig/


    5、启动服务器
    	$ systemctl start tomcat 
    	$ ss -tnl 

   	6、打开浏览器输入 http://172.16.3.20:8080 http://172.16.3.50:8080

   	7、创建测试jsp页面：
   		$ mkdir -pv /usr/share/tomcat/webapps/test/{WEB-INF,classes,META-INF}
   		$ vim /usr/share/tomcat/webapps/test/index.jsp
   		<%@ page language="java" %>
		<%@ page import="java.util.*" %>
		<html>
		    <head>
		        <title>Server One</title>
		    </head>
		    <body>
		        <font size=10 color="#38B0DE" > Tomcat First Server  </font>
		        <table align="centre" border="1">
		        <tr>
		                <td>Session ID</td>
		                <% session.setAttribute("maxie.com","maxie.com"); %>
		                <td><%= session.getId() %></td>
		        </tr>
		        <tr>
		                <td>Created on</td>
		                        <td><%= session.getCreationTime() %></td>
		                </tr>
		        </table>
		        <br>
		        <% out.println("hello world");
		        %>
		    </body>
		</html>


		'将测试文件夹发送至另一台'
		$ scp -rp /usr/share/tomcat/webapps/test root@172.16.3.50:/usr/share/tomcat/webapps
		$ vim /usr/share/tomcat/webapps/test/index.jsp 
		修改
		 <title>Server Two</title>
		 <font size=10 color="#32CD99" > Tomcat Second Server  </font>

	8、启动服务器，并打开http://172.16.3.20:8080/test http://172.16.3.50:8080/test 

   	9、配置nginx调度器
   		$ yum install nginx 
   		$ vim /etc/nginx/conf.d/maxie.conf
   		upstream tomcatsrv {
   			server 172.16.3.20:8080;
   			server 172.16.3.50:8080;
   		}
   		server {
   			listen 80;
   			server_name www1.maxie.com;
			location / {
				proxy_pass http://tomcatsrv;
			}
		}
   		
   		$ nginx -t 
   		$ systemctl start nginx 


   	10、配置tomcat 的cluster；实现 session replication 
   		$ vim /etc/tomcat/server.xml
   		在 host段中添加：
   		<Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"
				channelSendOptions="8">

			<Manager className="org.apache.catalina.ha.session.DeltaManager"
				expireSessionsOnShutdown="false"
				notifyListenersOnReplication="true"/>

			<Channel className="org.apache.catalina.tribes.group.GroupChannel">
			<Membership className="org.apache.catalina.tribes.membership.McastService"
!!	修改				address="228.16.3.10"
					port="45564"
					frequency="500"
					dropTime="3000"/>
			<Receiver className="org.apache.catalina.tribes.transport.nio.NioReceiver"
!!					address="172.16.3.20"			#另一台为 172.16.3.50
					port="4000"
					autoBind="100"
					selectorTimeout="5000"
				maxThreads="6"/>

			<Sender className="org.apache.catalina.tribes.transport.ReplicationTransmitter">
			<Transport className="org.apache.catalina.tribes.transport.nio.PooledParallelSender"/>
			</Sender>
			<Interceptor className="org.apache.catalina.tribes.group.interceptors.TcpFailureDetector"/>
			<Interceptor className="org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor"/>
			</Channel>

			<Valve className="org.apache.catalina.ha.tcp.ReplicationValve"
				filter=""/>
			<Valve className="org.apache.catalina.ha.session.JvmRouteBinderValve"/>

			<Deployer className="org.apache.catalina.ha.deploy.FarmWarDeployer"
				tempDir="/tmp/war-temp/"
				deployDir="/tmp/war-deploy/"
				watchDir="/tmp/war-listen/"
				watchEnabled="false"/>

			<ClusterListener className="org.apache.catalina.ha.session.JvmRouteSessionIDBinderListener"/>
			<ClusterListener className="org.apache.catalina.ha.session.ClusterSessionListener"/>
		</Cluster>	


		'创建测试页的web.xml'
			$ cp /etc/tomcat/web.xml /usr/share/tomcat/webapps/test/WEB-INF/
			$ vim /usr/share/tomcat/webapps/test/WEB-INF/web.xml 
			在<servlet>段上添加一条 ：
			<distributable/>
			即可

			$ systemctl restart tomcat 
			$ ss -tnl 


		'复制其到另一台tomcat'

		$ scp /etc/tomcat/server.xml root@172.16.3.50:/etc/tomcat/
		$ scp /usr/share/tomcat/webapps/test/WEB-INF/web.xml  root@172.16.3.50:/etc/tomcat/test/WEB-INF/
		$ systemctl restart tomcat 

	11、打开网页测试即可
		https://ws2.sinaimg.cn/large/006tKfTcly1fh5v34l28rg30qo0ushdx.gif



(3)tomcat cluster将'会话保存至memcached中'；

	连接器下载地址：http://repo1.maven.org/maven2/de/javakaffee/msm/

	
	'实验之前需要将上一个实验中的 server.xml中的 session replication的配置段删除掉'


	在上一个实验的基础上，新建两台虚拟机，进行配置memcached 

	'在两台memcached操作：'

		1、安装memcached;监听端口11211
			$ yum install -y memcached

		2、查看一下memcached的配置文件
		$ cat /etc/sysconfig/memcached
		PORT="11211"
		USER="memcached"
		MAXCONN="1024"
		CACHESIZE="64"
		OPTIONS=""

		3、启动服务
			$ systemctl start memcached


	'在两台tomcat上的操作：'
	4、编辑server.xml
		$ vim /etc/tomcat/server.xml 
		在host段中添加 ：
		<Context path="/test" docBase="test" reloadable="true" >
	    	<Manager className="de.javakaffee.web.msm.MemcachedBackupSessionManager"
			    memcachedNodes="mem1:172.16.3.60:11211,mem2:172.16.3.70:11211"
			    failoverNodes="mem2"
			    requestUriIgnorePattern=".*\.(ico|png|gif|jpg|css|js)$"
			    transcoderFactoryClass="de.javakaffee.web.msm.serializer.javolution.JavolutionTranscoderFactory"
	    	/>
        </Context>

        将其发送到另一台tocmat
        $ scp server.xml root@172.16.3.50:/etc/tomcat/

    5、下载所需的tomcat-memcached-connector连接器
    	$ cd /usr/share/java/tomcat 
    	$ wget ftp://172.16.0.1/pub/Sources/7.x86_64/msm/*
    	$ rm -f memcached-session-manager-tc8-1.8.3.jar

    	传送jar包至另一台tomcat
    	$ scp javolution-5.4.3.1.jar memcached-session-manager-* spymemcached-2.11.1.jar msm-javolution-serializer-1.8.3.jar root@172.16.3.50:/usr/share/java/tomcat/

    6、重新启动tomcat

    7、打开网页测试
    	https://ws2.sinaimg.cn/large/006tKfTcly1fh5wqvhpapg30qo0usb2j.gif









'实验：使用JVM分析工具'

	'JVM常用的分析工具： '
	https://www.ibm.com/developerworks/cn/java/j-5things8.html


	'如果想使用这些工具，必须要使用tar包进行安装tomcat  使用rpm安装oracle jdk'
		
		'JDK:'
		$ lft 172.16.0.1/pub/Sources
		> get 7.x86_64/jdk/jdk-8u25-linux-x64.rpm
		$ yum install ./jdk-8u25-linux-x64.rpm 
		$ vim /etc/profile.d/java.sh
		export JAVA_HOME=/usr/java/latest
		export PATH=$JAVA_HOME/bin:$PATH
		$ . /etc/profile.d/java.sh


		'Tomcat'
		$ lftp 172.16.0.1/pub/Sources
		$ tar -xf apache-tomcat-8.0.23.tar.gz -C /usr/local/
		$ cd /usr/local/
		$ ln -sv apache-tomcat-8.0.23/ tomcat
		$ useradd -r tomcat
		$ chown -R tomcat.tomcat tomcat/
		$ vim /etc/profile.d/
		export CATALINA_BASE=/usr/local/tomcat 
		export PATH=$CATALINA_BASE/bin:$PATH

		启动tomcat：
		$ useradd -r tomcat 
		$ su - tomcat -c '/usr/local/tomcat/catalina.sh start'
		$ ss -tnl

		$ jps 




























