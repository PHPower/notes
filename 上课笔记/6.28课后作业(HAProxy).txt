6.28课后作业



实验之前：
	安装 haproxy
		$ yum install -y haproxy

	设置2台静态网站初始化
		$ yum install -y httpd 
		$ echo "Static Server One" > /var/www/html/index.html
		$ echo "Static Server Two" > /var/www/html/index.html
		$ systemctl start httpd

	设置缩进：
		set ts=4
		set expandtab
		set autoindent


'实验1、实现负载均衡后端静态服务器'
	
	HAProxy主机操作：

	1、添加静态网站到配置文件中
		$ cd /etc/haproxy
		$ vim haproxy.cfg
		无需设置gobal与defaults的选项
		frontend web *:80
			use_backend	static_websrvs
			

		backend static_websrvs
			balance roundrobin
			server web1 172.16.1.70:80 check weight2
			server web2 172.16.1.20:80 check weight1
			hash-type consistent


		$ systemctl start haproxy
		$ ss -tnl

	2、打开网页测试



'实验2：实现stats页面的自定义，并配置acl访问控制，只允许本机几个IP使用stats admin功能'

	$ vim haproxy.cfg
	frontend web
	    bind *:80
	    default_backend websrvs
	    acl auth_admin  src 172.16.250.15 172.16.1.11 		# 仅允许源IP是这里设置的使用stat admin功能
	    stats           enable
	    stats uri       /myha?stats
	    stats realm     "HAProxy Admin Area"
	    stats refresh   20s
	    stats auth      root:root@123
	    stats admin     if auth_admin


    $ systemctl restart haproxy
    $ ss -tnl




'实验3：实现代理22端口和3306,也就是ssh和mysql'

	$ vim haproxy.cfg
	#---------------------------------------------------------------------
	# sshd backend
	#---------------------------------------------------------------------
	listen sshsrvs
	    bind        :22022
	    balance     leastconn
	    hash-type   consistent
	    mode        tcp
	    server      ssh1    172.16.1.70:22  check maxconn 5
	    server      ssh2    172.16.1.20:22  check maxconn 2

	$ systemctl restart haproxy.service 
    $ ssh root@172.16.1.100 -p 22022



    $ vim haproxy.cfg
    #---------------------------------------------------------------------
	# mysql backend
	#---------------------------------------------------------------------
	listen sshsrvs
	    bind        :3306
	    balance     leastconn
	    hash-type   consistent
	    mode        tcp
	    server      ssh1    172.16.1.70:3306  check maxconn 5
	    server      ssh2    172.16.1.20:3306  check maxconn 2

	$ systemctl restart haproxy.service 

	$ mysql -uroot -proot@123 -h172.16.1.100



'实验4：使用acl访问控制，禁止使用firefox和curl访问haproxy服务器'
	frontend web
	    maxconn 2
	    bind *:80
	    use_backend websrvs
	    acl auth_admin  src 172.16.250.15 172.16.1.11
	    acl badgay      hdr_sub(User-Agent) -i curl
	    acl firefox     hdr_sub(User-Agent) -i firefox
	    block           if firefox
	    block           if badgay
	    stats           enable
	    stats uri       /myha?stats
	    stats realm     "HAProxy Admin Area"
	    stats refresh   20s
	    stats auth      root:root@123
	    stats admin     if auth_admin

	#---------------------------------------------------------------------
	# static backend for serving up images, stylesheets and such
	#---------------------------------------------------------------------
	backend websrvs
	    option      httpchk /index.html
	    log global
	    balance     roundrobin
	    option      forwardfor  header  X-Client
	    server      web1 172.16.1.70:80 check weight 2
	    server      web2 172.16.1.20:80 check weight 1
	    hash-type   consistent
	    timeout     client-fin  3s







课外实践：参考文档实现combined格式的记录


lease refer to the table below for currently defined variables :

  +---+------+-----------------------------------------------+-------------+
  | R | var  | field name (8.2.2 and 8.2.3 for description)  | type        |
  +---+------+-----------------------------------------------+-------------+
  |   | %o   | special variable, apply flags on all next var |             |
  +---+------+-----------------------------------------------+-------------+
  |   | %B   | bytes_read           (from server to client)  | numeric     |
  | H | %CC  | captured_request_cookie                       | string      |
  | H | %CS  | captured_response_cookie                      | string      |
  |   | %H   | hostname                                      | string      |
  | H | %HM  | HTTP method (ex: POST)                        | string      |
  | H | %HP  | HTTP request URI without query string (path)  | string      |
  | H | %HQ  | HTTP request URI query string (ex: ?bar=baz)  | string      |
  | H | %HU  | HTTP request URI (ex: /foo?bar=baz)           | string      |
  | H | %HV  | HTTP version (ex: HTTP/1.0)                   | string      |
  |   | %ID  | unique-id                                     | string      |
  |   | %ST  | status_code                                   | numeric     |
  |   | %T   | gmt_date_time                                 | date        |
  |   | %Ta  | Active time of the request (from TR to end)   | numeric     |
  |   | %Tc  | Tc                                            | numeric     |
  |   | %Td  | Td = Tt - (Tq + Tw + Tc + Tr)                 | numeric     |
  |   | %Tl  | local_date_time                               | date        |
  |   | %Th  | connection handshake time (SSL, PROXY proto)  | numeric     |
  | H | %Ti  | idle time before the HTTP request             | numeric     |
  | H | %Tq  | Th + Ti + TR                                  | numeric     |
  | H | %TR  | time to receive the full request from 1st byte| numeric     |
  | H | %Tr  | Tr (response time)                            | numeric     |
  |   | %Ts  | timestamp                                     | numeric     |
  |   | %Tt  | Tt                                            | numeric     |
  |   | %Tw  | Tw                                            | numeric     |
  |   | %U   | bytes_uploaded       (from client to server)  | numeric     |
  |   | %ac  | actconn                                       | numeric     |
  |   | %b   | backend_name                                  | string      |
  |   | %bc  | beconn      (backend concurrent connections)  | numeric     |
  |   | %bi  | backend_source_ip       (connecting address)  | IP          |
  |   | %bp  | backend_source_port     (connecting address)  | numeric     |
  |   | %bq  | backend_queue                                 | numeric     |
  |   | %ci  | client_ip                 (accepted address)  | IP          |
  |   | %cp  | client_port               (accepted address)  | numeric     |
  |   | %f   | frontend_name                                 | string      |
  |   | %fc  | feconn     (frontend concurrent connections)  | numeric     |
  |   | %fi  | frontend_ip              (accepting address)  | IP          |
  |   | %fp  | frontend_port            (accepting address)  | numeric     |
  |   | %ft  | frontend_name_transport ('~' suffix for SSL)  | string      |
  |   | %lc  | frontend_log_counter                          | numeric     |
  |   | %hr  | captured_request_headers default style        | string      |
  |   | %hrl | captured_request_headers CLF style            | string list |
  |   | %hs  | captured_response_headers default style       | string      |
  |   | %hsl | captured_response_headers CLF style           | string list |
  |   | %ms  | accept date milliseconds (left-padded with 0) | numeric     |
  |   | %pid | PID                                           | numeric     |
  | H | %r   | http_request                                  | string      |
  |   | %rc  | retries                                       | numeric     |
  |   | %rt  | request_counter (HTTP req or TCP session)     | numeric     |
  |   | %s   | server_name                                   | string      |
  |   | %sc  | srv_conn     (server concurrent connections)  | numeric     |
  |   | %si  | server_IP                   (target address)  | IP          |
  |   | %sp  | server_port                 (target address)  | numeric     |
  |   | %sq  | srv_queue                                     | numeric     |
  | S | %sslc| ssl_ciphers (ex: AES-SHA)                     | string      |
  | S | %sslv| ssl_version (ex: TLSv1)                       | string      |
  |   | %t   | date_time      (with millisecond resolution)  | date        |
  | H | %tr  | date_time of HTTP request                     | date        |
  | H | %trg | gmt_date_time of start of HTTP request        | date        |
  | H | %trl | locla_date_time of start of HTTP request      | date        |
  |   | %ts  | termination_state                             | string      |
  | H | %tsc | termination_state with cookie status          | string      |
  +---+------+-----------------------------------------------+-------------+

    R = Restrictions : H = mode http only ; S = SSL only












'实践（博客）作业：'
			http:
				(1) 动静分离部署wordpress，动静都要能实现负载均衡，要注意会话的问题；
				(2) 在haproxy和后端主机之间添加varnish进行缓存；
				(3) 给出设计拓扑，写成博客；
				
				(4) haproxy的设定要求：
					(a) stats page，要求仅能通过本地访问使用管理接口； 
					(b) 动静分离；
					(c) 分别考虑不同的服务器组的调度算法；
				(5) haproxy高可用；



'实验之前：'
	1、时间同步
    $ ntpdate 172.16.0.1

	2、配置IP地址，保证网络连通性

	3、在各节点主机安装所需程序包

		haproxy：
			$ yum install haproxy keepalvied

		varnish：
			$ yum install -y varnish 

		静态web页面：
			$ yum install httpd 

		动态AP站点：
			$ yum install httpd php php-mysql php-mbstring php-mcrypt

		NFS：
			$ vim /etc/exports
			添加共享的目录即可

		MySQL：
			$ vim /etc/my.cnf.d/server.conf
			添加 
			[mysqld]
			skip_name_resolve=ON
			innodb_file_per_table=ON
			log-bin=mysql_bin


	4、制作快照




先实现通过 haproxy对后端 动静组的负载均衡调度，并配置要求(4)中的设定


	1、配置安装 静态WEB页面以及动态测试页
		'静态WEB：'
			$ yum install httpd
			$ echo "First Static Server PAGE" > /var/www/html/index.html
			$ echo "Second Static Server PAGE" > /var/www/html/index.html
			$ systemctl start httpd


		'动态AP站点：'
			$ yum install httpd php php-mysql php-mbstring php-mcrypt
			$ vim /var/www/html/index.php 
			<?php 
				phpinfo();
			?>
			$ systemctl start httpd

			其实先可以在此把wordpress部署上来，等待调度成功后，再将其重新在NFS上部署

	2、配置haproxy：
		$ yum install -y haproxy 
		$ cd /etc/haproxy/
		$ vim haproxy.cfg
    #---------------------------------------------------------------------
    # main frontend which proxys to the backends
    #---------------------------------------------------------------------
    frontend websrvs
        bind            *:80
        rspadd          X-Via:\ HAProxy-1
        rspidel         Server.*
        acl static      path_end -i .html .css .js
        acl static      path_beg -i /images /static
        use_backend     websrvs if static
        default_backend appsrvs
        acl badgay      hdr_sub(User-Agent) -i curl
        block           if badgay

    #---------------------------------------------------------------------
    # Admin Stats
    #---------------------------------------------------------------------
    listen status
        bind *:9909
        acl auth_admin  src 172.16.250.15 172.16.1.11
        stats           enable
        stats uri       /myha?stats
        stats realm     HAProxy\ Admin\ Area
        stats auth      root:root@123
        stats admin     if auth_admin

    #---------------------------------------------------------------------
    # WEB static backend
    #---------------------------------------------------------------------
    backend websrvs
        option      httpchk /index.html
        option      forwardfor header X-Client
        balance     roundrobin
        server      web1    192.168.1.50:80 check weight 2
        server      web2    192.168.1.60:80 check weight 1
        hash-type   consistent
        #option      httpchk /index.html

    #---------------------------------------------------------------------
    # ap backend
    #---------------------------------------------------------------------

    backend appsrvs
        option      httpchk /index.php
        option      forwardfor header X-Client
        balance     roundrobin
        server      app1    192.168.1.70:80 check weight 1
        server      app2    192.168.1.80:80 check weight 1
        hash-type   consistent

    $ systemctl restart haproxy 

  


'配置NFS和MySQL，并挂载至静态web组和动态AP组上'
  1、配置mysql
    $ vim /etc/my.cnf.d/server.conf 
    [mysqld]
    skip_name_resolve=ON
    innodb_file_per_table=ON
    log-bin=mysql_bin

    $ systemctl start mariadb.service 
    $ mysql
    > CREATE DATABASE wordpress_db;
    > CREATE DATABASE discuzx;
    > GRANT ALL PRIVILEGES ON wordpress_db.* TO 'wordpress'@'192.168.1.50' IDENTIFIED BY 'root@123';
    > GRANT ALL PRIVILEGES ON wordpress_db.* TO 'wordpress'@'192.168.1.60' IDENTIFIED BY 'root@123';
    > GRANT ALL PRIVILEGES ON wordpress_db.* TO 'wordpress'@'192.168.1.70' IDENTIFIED BY 'root@123';
    > GRANT ALL PRIVILEGES ON wordpress_db.* TO 'wordpress'@'192.168.1.80' IDENTIFIED BY 'root@123';
    > GRANT ALL PRIVILEGES ON wordpress_db.* TO 'wordpress'@'192.168.1.90' IDENTIFIED BY 'root@123';

    > GRANT ALL PRIVILEGES ON discuzx.* TO 'discuzx'@'192.168.1.50' IDENTIFIED BY 'root@123';
    > GRANT ALL PRIVILEGES ON discuzx.* TO 'discuzx'@'192.168.1.60' IDENTIFIED BY 'root@123';
    > GRANT ALL PRIVILEGES ON discuzx.* TO 'discuzx'@'192.168.1.70' IDENTIFIED BY 'root@123';
    > GRANT ALL PRIVILEGES ON discuzx.* TO 'discuzx'@'192.168.1.80' IDENTIFIED BY 'root@123';
    > GRANT ALL PRIVILEGES ON discuzx.* TO 'discuzx'@'192.168.1.90' IDENTIFIED BY 'root@123';

    > FLUSH PRIVILEGES;


  2、配置NFS
    $ vim /etc/exports
    /data/my_wordpress      192.168.1.50(rw,no_root_squash) 192.168.1.60(rw,no_root_squash) 192.168.1.70(rw,no_root_squash) 192.168.1.80(rw,no_root_squash)
    /data/my_discuzx        192.168.1.50(rw,no_root_squash) 192.168.1.60(rw,no_root_squash) 192.168.1.70(rw,no_root_squash) 192.168.1.80(rw,no_root_squash)
    $ mkdir -pv /data/my_wordpress
    $ mkdir -pv /data/my_discuzx
    $ tar -xf wordpress-4.7.4-zh_CN.tar.gz -C /data/
    $ mv /data/wordpress/* /data/my_wordpress

    $ unzip Discuz_X3.3_SC_UTF8.zip -C /data/
    $ mv /data/upload/* /data/my_discuzx

    $ useradd -u 48 -r apache 
    $ chown -R apache.apache /data/

    $ systemctl start nfs.service 

  3、动静组分别挂载wordpress discuzx (4台同样操作)
    $ mount -t nfs 192.168.1.90:/data/my_wordpress /wordpress
    $ mount -t nfs 192.168.1.90:/data/my_discuzx /discuzx

  4、打开网页进行访问WordPress测试是否可以正常访问并连接数据库




'配置varnish设置规则缓存除登陆信息的其他信息都进行缓存：'
  1、修改haproxy代理规则，将所有规则代理到varnish
    $ vim /etc/haproxy/haproxy.cfg

    #---------------------------------------------------------------------
    # main frontend which proxys to the backends
    #---------------------------------------------------------------------
    frontend websrvs
        bind            *:80
        rspadd          X-Via:\ HAProxy-1
        rspidel         Server.*
        default_backend varnish

    #---------------------------------------------------------------------
    # Admin Stats
    #---------------------------------------------------------------------
    listen status
        bind *:9909
        acl auth_admin  src 172.16.250.15 172.16.1.11
        stats           enable
        stats uri       /myha?stats
        stats realm     HAProxy\ Admin\ Area
        stats auth      root:root@123
        stats admin     if auth_admin

    #---------------------------------------------------------------------
    # varnish static backend
    #---------------------------------------------------------------------
    backend varnish
        option      forwardfor header X-Client
        balance     roundrobin
        server      web1    192.168.1.30:80 check weight 2 cookie var1
        hash-type   consistent

    $ systemctl restart haproxy
    $ ss -tnl 

  2、安装并配置varnish
    $ yum install varnish
    $ vim /etc/varnish/varnish.params
    VARNISH_LISTEN_PORT=80
    VARNISH_STORAGE="malloc,512M"

    $ vim /etc/varnish/default.vcl

    #
    # This is an example VCL file for Varnish.
    #
    # It does not do anything by default, delegating control to the
    # builtin VCL. The builtin VCL is called when there is no explicit
    # return statement.
    #
    # See the VCL chapters in the Users Guide at https://www.varnish-cache.org/docs/
    # and http://varnish-cache.org/trac/wiki/VCLExamples for more examples.

    # Marker to tell the VCL compiler that this VCL has been adapted to the
    # new 4.0 format.
    vcl 4.0;
    import directors;

    # Default backend definition. Set this to point to your content server.
    backend default {
        .host = "127.0.0.1";
        .port = "8080";
    }

    probe chk_health {
        .url = "/";
        .timeout = 3s;
        .interval = 3s;
        .window = 5;
        .threshold = 3;
    }

    backend web1 {
        .host = "192.168.1.50";
        .port = "80";
        .probe = chk_health;
    }

    backend web2 {
        .host = "192.168.1.60";
        .port = "80";
        .probe = chk_health;
    }

    backend app1 {
        .host = "192.168.1.70";
        .port = "80";
        .probe = chk_health;
    }

    backend app2 {
        .host = "192.168.1.80";
        .port = "80";
        .probe = chk_health;
    }

    sub vcl_init {
        new websrv = directors.round_robin();
        websrv.add_backend(web1);
        websrv.add_backend(web2);

        new appsrv = directors.round_robin();
        appsrv.add_backend(app1);
        appsrv.add_backend(app2);
    }

    sub vcl_purge {
        return (synth(200,"Pruged Succeed"));
    }

    acl prugers {
        "172.16.1.11";
        "172.16.250.15";
        "127.0.0.0"/8;
    }

    sub vcl_recv {
        if (req.method == "PURGE") {
            if (client.ip !~ prugers)
            {
                return(synth(403,"Purging not allowed for" + client.ip));
            }
            return(purge);
        }


        if (req.url ~ "(?i)\.(html|css|js)") {
            set req.backend_hint = websrv.backend();
        } else {
            set req.backend_hint = appsrv.backend();
        }

        #
        if (req.restarts == 0) {
            if (req.http.X-Forwarded-For) {
                set req.http.X-Forwarded-For = req.http.X-Forwarded-For + "," + client.ip;
            } else {
                set req.http.X-Forwarded-For = client.ip;
            }
        }

        if (!(req.url ~ "wp-(login|admin)")) {
            unset req.http.cookie;
        }

        # Happens before we check if we have this in cache already.
        #
        # Typically you clean up the request here, removing cookies you don't need,
        # rewriting the request, etc.
    }

    sub vcl_hash {
        hash_data(req.http.host + req.url);
        return(lookup);
    }

    sub vcl_backend_response {
        unset beresp.http.X-Powered-By;

        if (bereq.url ~ "\.(css|js|png|gif|jp(e?)g|swf|ico|txt|eot|svg|woff)") {
            unset beresp.http.cookie;
            set beresp.http.cache-control = "public, max-age=3600";
        }

        if ( beresp.status != 200 && beresp.status != 404 ) {
            set beresp.uncacheable = true;
            set beresp.ttl = 120s;
            return (deliver);
        }

        #unset beresp.http.set-cookie;

        set beresp.ttl = 1h;
        set beresp.grace = 30s;
        return (deliver);
        # Happens after we have read the response headers from the backend.
        #
        # Here you clean the response headers, removing silly Set-Cookie headers
        # and other mistakes your backend does.
    }

    sub vcl_deliver {
        if (obj.hits>0) {
      set resp.http.X-Cache = "Hit Via " + server.ip;
        } else {
      set resp.http.X-Cache = "Miss from " + server.ip;
        }
        # Happens when we have all the pieces we need, and are about to send the
        # response to the client.
        #
        # You can do accounting or modifying the final object here.
    }

    $ systemctl start varnish
    $ ss -tnl



    3、打开网页输入VIP地址： http://172.16.3.200/wordperss 进行访问测试

    




























'无varnish的haproxy配置文件：'

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000
    timeout client-fin      3s

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend websrvs
    bind            *:80
    rspadd          X-Via:\ HAProxy-1
    rspidel         Server.*
    acl static      path_end -i .html .css .js
    acl static      path_beg -i /images /static
    use_backend     websrvs if static
    default_backend appsrvs
    acl badgay      hdr_sub(User-Agent) -i curl
    block           if badgay

#---------------------------------------------------------------------
# Admin Stats
#---------------------------------------------------------------------
listen status
    bind *:9909
    acl auth_admin  src 172.16.250.15 172.16.1.11
    stats           enable
    stats uri       /myha?stats
    stats realm     HAProxy\ Admin\ Area
    stats auth      root:root@123
    stats admin     if auth_admin

#---------------------------------------------------------------------
# WEB static backend
#---------------------------------------------------------------------
backend websrvs
    option      httpchk /index.html
    option      forwardfor header X-Client
    balance     roundrobin
    server      web1    192.168.1.50:80 check weight 2
    server      web2    192.168.1.60:80 check weight 1
    hash-type   consistent
    #option      httpchk /index.html

#---------------------------------------------------------------------
# ap backend
#---------------------------------------------------------------------

backend appsrvs
    option      httpchk /index.php
    option      forwardfor header X-Client
    balance     roundrobin
    server      app1    192.168.1.70:80 check weight 1
    server      app2    192.168.1.80:80 check weight 1
    hash-type   consistent









'配置缓存后的haproxy配置文件'

cat /etc/haproxy/haproxy.cfg
#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000
    timeout client-fin      3s

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend websrvs
    bind            *:80
    rspadd          X-Via:\ HAProxy-1
    rspidel         Server.*
    default_backend varnish

#---------------------------------------------------------------------
# Admin Stats
#---------------------------------------------------------------------
listen status
    bind *:9909
    acl auth_admin  src 172.16.250.15 172.16.1.11
    stats           enable
    stats uri       /myha?stats
    stats realm     HAProxy\ Admin\ Area
    stats auth      root:root@123
    stats admin     if auth_admin

#---------------------------------------------------------------------
# varnish static backend
#---------------------------------------------------------------------
backend varnish
    option      forwardfor header X-Client
    balance     roundrobin
    server      web1    192.168.1.30:80 check weight 2 cookie var1
#    server      web2    192.168.1.60:80 check weight 1
    hash-type   consistent
    #option      httpchk /index.html








'varnish配置文件(除了wp-admin|login的其他所有页面，并去除其cookie信息)'

cat default.vcl
#
# This is an example VCL file for Varnish.
#
# It does not do anything by default, delegating control to the
# builtin VCL. The builtin VCL is called when there is no explicit
# return statement.
#
# See the VCL chapters in the Users Guide at https://www.varnish-cache.org/docs/
# and http://varnish-cache.org/trac/wiki/VCLExamples for more examples.

# Marker to tell the VCL compiler that this VCL has been adapted to the
# new 4.0 format.
vcl 4.0;
import directors;

# Default backend definition. Set this to point to your content server.
backend default {
    .host = "127.0.0.1";
    .port = "8080";
}

probe chk_health {
    .url = "/";
    .timeout = 3s;
    .interval = 3s;
    .window = 5;
    .threshold = 3;
}

backend web1 {
    .host = "192.168.1.50";
    .port = "80";
    .probe = chk_health;
}

backend web2 {
    .host = "192.168.1.60";
    .port = "80";
    .probe = chk_health;
}

backend app1 {
    .host = "192.168.1.70";
    .port = "80";
    .probe = chk_health;
}

backend app2 {
    .host = "192.168.1.80";
    .port = "80";
    .probe = chk_health;
}

sub vcl_init {
    new websrv = directors.round_robin();
    websrv.add_backend(web1);
    websrv.add_backend(web2);

    new appsrv = directors.round_robin();
    appsrv.add_backend(app1);
    appsrv.add_backend(app2);
}

sub vcl_purge {
    return (synth(200,"Pruged Succeed"));
}

acl prugers {
    "172.16.1.11";
    "172.16.250.15";
    "127.0.0.0"/8;
}

sub vcl_recv {
    if (req.method == "PURGE") {
        if (client.ip !~ prugers)
        {
            return(synth(403,"Purging not allowed for" + client.ip));
        }
        return(purge);
    }


    if (req.url ~ "(?i)\.(html|css|js)") {
        set req.backend_hint = websrv.backend();
    } else {
        set req.backend_hint = appsrv.backend();
    }

    #
    if (req.restarts == 0) {
        if (req.http.X-Forwarded-For) {
            set req.http.X-Forwarded-For = req.http.X-Forwarded-For + "," + client.ip;
        } else {
            set req.http.X-Forwarded-For = client.ip;
        }
    }

    if (!(req.url ~ "wp-(login|admin)")) {
        unset req.http.cookie;
    }

    #wordpress set
    #if (req.http.Authorization || req.method == "POST") {
    #    return(pass);
    #}

    #if (req.url ~ "wp-(login|admin)" || req.url ~ "preview=true") {
    #    return(pass);
    #}

    #if (req.http.Cookie ~ "wordpress_logged_in_") {
    #    return(pass);
    #}

    #unset req.http.cookie;

    #return (hash);

    # Happens before we check if we have this in cache already.
    #
    # Typically you clean up the request here, removing cookies you don't need,
    # rewriting the request, etc.
}

sub vcl_hash {
    hash_data(req.http.host + req.url);
    return(lookup);
}

sub vcl_backend_response {
    unset beresp.http.X-Powered-By;

    if (bereq.url ~ "\.(css|js|png|gif|jp(e?)g|swf|ico|txt|eot|svg|woff)") {
        unset beresp.http.cookie;
        set beresp.http.cache-control = "public, max-age=3600";
    }

#    if (bereq.url ~ "wp-(login|admin)" || bereq.url ~ "preview=true") {
#        set beresp.uncacheable = true;
#        set beresp.ttl = 30s;
#        return (deliver);
#    }

#    if ( bereq.method == "POST" || bereq.http.Authorization ) {
#        set beresp.uncacheable = true;
#        set beresp.ttl = 120s;
#        return (deliver);
#    }

    if ( beresp.status != 200 && beresp.status != 404 ) {
        set beresp.uncacheable = true;
        set beresp.ttl = 120s;
        return (deliver);
    }

    unset beresp.http.set-cookie;

    set beresp.ttl = 1h;
    set beresp.grace = 30s;
    return (deliver);
    # Happens after we have read the response headers from the backend.
    #
    # Here you clean the response headers, removing silly Set-Cookie headers
    # and other mistakes your backend does.
}

sub vcl_deliver {
    if (obj.hits>0) {
	set resp.http.X-Cache = "Hit Via " + server.ip;
    } else {
	set resp.http.X-Cache = "Miss from " + server.ip;
    }
    # Happens when we have all the pieces we need, and are about to send the
    # response to the client.
    #
    # You can do accounting or modifying the final object here.
}














				 

