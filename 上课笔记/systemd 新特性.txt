systemd 新特性

systemd的新特性：
		系统引导时实现服务并行启动
		按需激活进程
		系统状态快照
		基于依赖关系定义服务控制逻辑


核心概念：unit
	unit由其相关配置文件进行标识、识别和配置；
		文件中主要包含了系统服务、监听的socket、保存的快照及其其他与init相关的信息；
			这些配置文件主要保存在：
				/usr/lib/systemd/system/
				/run/systemd/system/
				/etc/systemd/system/

	unit常见类型：
		service unit：文件扩展名.service , 用于定义系统服务；
		target unit：文件扩展名.target , 用于模拟实现”运行级别“；
		device unit：文件扩展名.device , 用于定义内核识别的设备
		mount unit：文件扩展名.mount , 定义文件系统挂载点
		socket unit：文件扩展名.socket , 用于标识进程间通信用到的socket文件
		snapshot unit：文件扩展名.snapshot , 管理系统快照
		swap unit：文件扩展名.swap , 用于标识swap设备
		automount unit：文件扩展名.automount , 文件系统挂载点设备
		path unit：文件扩展名.path , 用于定义文件系统中的一文件或目录


关键特性：
	基于socket的激活机制：socket与程序分离
	基于bus的激活机制
	基于device的激活机制：当某个设备插入，自动激活Mount、automount；自动激活设备
	基于path的激活机制；
	系统快照：保存各unit的当前状态信息于持久存储设备中
	向后兼容sysv init脚本
		/etc/init.d/

	不兼容：
		systemctl的命令是固定不变的
		非由systemd启动的服务，systemctl无法与之通信


'管理系统服务'
	CentOS7：service

		'systemctl命令'：
			语法：
			systemctl [OPTIONS...] COMMAND [NAME...]

			启动服务：
				service NAME start ==> systemctl start NAME.service
			停止服务：
				service NAME stop ==> systemctl stop NAME.service 
			重启服务：
				service NAME restart ==> systemctl restart NAME.service 
			状态：
				service NAME status ==> systemctl status NAME.service 
			条件式重启：
				service NAME condrestart ==> systemctl try-restart NAME.service
			重载或重启服务：
				systemctl reload-or-try-restart NAME.service
					支持重载就重载，不支持就重启
			重载或条件式重启服务：
				systemctl reload-or-try-restart NAME.service
			查看某服务当前激活与否的状态：
				systemctl is-active NAME.service
			查看所有已激活的服务：
				systemctl list-units -t service 
			查看所有服务（已激活和未激活）：
				chkconfig --list ==> systemctl list-units -t servie --all


			开机自启：
				chkconfig NAME on ==> systemctl enable NAME.service
			禁止开机自启：
				chkconfig NAME off ==> systemctl disable NAME.service
			查看某服务是否能开机自启：
				chkconfig --list NAME ==> systemctl is-enabled NAME.service

			禁止某服务设定为开机自启：
				systemctl mask NAME.service
			取消此禁止：
				systemctl unmask NAME.service

			查看服务的依赖关系：
				systemctl list-dependencies NAME.service 

'管理target units：'
	
	运行级别：
		0 ==> runlevel0.target , poweroff.target		  0级别
		1 ==> runlevel1.target , rescue.target (救援模式)  1级别
		2 ==> runlevel2.target , multi-user.target （多用户级别）
		3 ==> runlevel3.target , multi-user.target （多用户级别）
		4 ==> runlevel4.target , multi-user.target （多用户级别）
		5 ==> runlevel5.target , graphical.target (图形界面)
		6 ==> runlevel6.target , reboot.target （重启）

	级别切换：
		init N ==> systemctl isolate NAME.target

	查看级别：
		runlevel ==> systemctl list-units -t target

	查看所有级别：
		systemctl list-units -t target -a

	查看当前默认运行级别：
		systemctl get-default
	修改默认运行级别：
		systemctl set-default NAME.target

	切换至紧急救援模式：
		systemctl rescue
	切换至紧急模式： （级别1）
		systemctl emergency




'其他常用命令：'
	
	关机：
		systemctl halt,poweroff
	重启: 
		systemctl reboot 
	挂起：
		systemctl suspend 
	快照：
		systemctl hibernate
	快照并挂起：
		systemctl hybrid-sleep



'service unit file：'
	/usr/lib/systemd/system/目录

	以httpd.service文件为例：

	文件通常由三部分组成：
		[Unit]
			定义与Unit类型无关的通用选项；用于提供unit的描述信息、unit行为及依赖关系等；
		
		[Service|Traget]
			定义与此处类型相关的专用选项；此处为service类型
		
		[Install]
			定义由"systemctl enable"以及"systemctl disable" 命令在实现服务启用或禁用时用到的一些选项


	'Unit段的常用选项：'
		Description:描述信息；意义性描述
		After：定义unit的启动次序；表示当前unit应该晚于那些unit启动；其功能与before相反
		Requires：依赖到的其他units（这些units必须都能激活启动）强依赖：被依赖的units无法激活时，当前unit无法激活
		Wants：指明依赖到的其他units；弱依赖
		Confilcts：定义untis之间的冲突关系


	'Service段的常用选项：'
		Type：用于定义影响ExecStart及相关参数的功能的unit进程启动类型；
			类型：
				simple：（默认值）ExecStart启动起来的父进程
				forking：由ExecStart启动的进程的子进程，为父进程
				oneshot：一次性的
				dbus：
				notify：类似于simple，
				idle

		Environment：环境配置文件
		ExecStart：指明启动unit要运行的命令或脚本；ExecStartPre，ExecStartPost
		EXecStop：指明停止unit要运行的命令或脚本
		Restart：服务意外退出时，自动重启服务


	'Install段的常用选项：'
		Alias：别名
		RequiredBy：被哪些units所依赖
		WantedBy：被哪些unit所依赖


	注意：
		对于新创建的unit文件或修改了的unit文件，必须让系统重新reload，要通知systemd重载此配置文件；

		$ systemctl daemon-reload   （重载守护进程相关的配置文件）

	'注意：'
		在/usr/lib/systemd/system目录下的service文件相当于ecntos6中的/etc/rc.d/init.d下各种服务的启动脚本

	练习：
		为当前系统的httpd服务提供一个unit文件

		[root@localhost system]# pwd
		/usr/lib/systemd/system
		
		[root@localhost system]# cat httpd.service
		[Unit]
		Description=Maxies httpd service
		After=network.target remote-fs.target
		[Service]
		Type=notify
		ExecStart=/app/httpd/bin/apachectl -k start -DFOREGROUND
		ExecReload=/app/httpd/bin/apachectl -k restart
		ExecStop=/app/httpd/bin/apachectl -k stop
		[Install]
		WantedBy=multi-user.target








