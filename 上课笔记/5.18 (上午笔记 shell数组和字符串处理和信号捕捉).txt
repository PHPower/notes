5.18 (上午笔记 shell数组和字符串处理和信号捕捉)



'bash中数组'
	
	变量：存储单个元素的内存空间
	数组：存储多个元素的连续的内存空间

	数组名：整个数组只有一个名字；
		数组索引：编号从0开始
			数组名[索引]：例如 var[0]=1   var[1]=2
			
			'数组引用：'
				${ARRAY_NAME[INDEX]}：引用单个元素
				${ARRAY_NAME[*]}：引用数组内的所有元素

		注意：
			bash-4...及之后的版本，支持自定义索引格式，而不仅仅是0,1,2....数字的格式		
				此类数组称之为“关联数组”


	声明数组：
		declare -a ARRAY_NAME：声明'索数组'
		declare -A ARRAY_NAME：声明'关联数组'


	'数组中元素的赋值方式：'
		(1)一次只赋值一个元素：
			ARRAY_NAME[INDEX]=VALUE

			$ weekday[0]="Sunday"
			$ weekday[1]="Monday"
			$ echo ${weekday[1]}
			Monday
		(2)一次赋值全部元素：
			$ ARRAY_NAME=("VAL1" "VAL2" "VAL3" ...)

		(3)只赋值特定元素：
			$ ARRAY_NAME=([0]="VAL1" [3]="VAL3")

		(4)交互式数组值对赋值：
			$ read -a ARRAY

			注意：bash支持稀疏格式的数组

		'(5)关联数组赋值：'
			先声明再赋值：
			$ declare -A ARRAY_NAME
			$ ARRAY_NAME[NAME]=VALUE 
				[root@centos7 0516shell-homework]# declare -A world
				[root@centos7 0516shell-homework]# world[us]="United State"
				[root@centos7 0516shell-homework]# world[uk]="United Kingdom"
				[root@centos7 0516shell-homework]# echo ${world[uk]}
				United Kingdom
				[root@centos7 0516shell-homework]# echo ${#world[*]}
				2

	'引用数组中的元素：'
		${ARRAY_NAME[INDEX]}

			注意：引用时，只给数组名，表示引用下标为0的元素

		${ARRAY_NAME[*]}：引用数组中的所有元素
		${ARRAY_NAME[@]}：引用数组中的所有元素

			[root@centos7 shell-Advanced]# name=("jerry" "maxie" "tom")
			[root@centos7 shell-Advanced]# echo ${name[@]}
			jerry maxie tom
	

	'数组元素切片：'（从指定位置开始，到指定位置结束）
		${ARRAY_NAME[@]:offset:number}
			offset：偏移量，要跳过的元素个数
			number：要取出的元素个数；省略number时，表示取偏移量之后的所有元素

			[root@centos7 shell-Advanced]# name=("jerry" "maxie" "tom")
			[root@centos7 shell-Advanced]# echo ${name[@]}
			jerry maxie tom
			[root@centos7 shell-Advanced]# echo ${name[@]:0}
			jerry maxie tom
			[root@centos7 shell-Advanced]# echo ${name[@]:1}
			maxie tom
			[root@centos7 shell-Advanced]# echo ${name[@]:2}
			tom


	数组的长度：（数组中元素的个数）
		${#ARRAY_NAME[*]}
		或者
		${#ARRAY_NAME[@]}

		[root@centos7 shell-Advanced]# name=("jerry" "maxie" "tom")
		[root@centos7 shell-Advanced]# echo ${#name[@]}
		3


	'向非稀释数组中追加元素：'（稀疏格式的数组貌似也可以加，但是只能加一次，第二次加时就会覆盖掉）
		ARRAY_NAME[${#ARRAY_NAME[*]}]=VALUE
			[${#ARRAY_NAME[*]}]：代表当前数组内有多少个数（总和信息）

			[root@centos7 array-shell]# name[${#name[*]}]=wuyue
			[root@centos7 array-shell]# echo ${name[@]}
			jerry maxie tom hello wuyue
			[root@centos7 array-shell]# name[${#name[*]}]=liyaojun
			[root@centos7 array-shell]# echo ${name[@]}
			jerry maxie tom hello liyaojun


			取消变量，重新定义为非稀释数组：
			[root@centos7 array-shell]# unset name
			[root@centos7 array-shell]# name=("maxie" "tom")
			[root@centos7 array-shell]# name[${#name[*]}]=liyaojun
			[root@centos7 array-shell]# echo ${name[@]}
			maxie tom liyaojun
			[root@centos7 array-shell]# name[${#name[*]}]=wuyue
			[root@centos7 array-shell]# echo ${name[@]}
			maxie tom liyaojun wuyue


	'删除数组中的某个元素：'
		unset ARRAY_NAME[index]  ： 移除指定数组内指定的元素
		unset ARRAY_NAME ：删除数组

		'关联数组：'

		第一步：
			declare -A ARRAY_NAME
		第二步：
			ARRAY_NAME=([index_name]="value1" [index_name2]="value2" ...)
				index_name：常用字符串即可（不要使用特殊符号）



	实例：
		1、生成十个随机数，并找出其中的最大值和最小值
			[root@centos7 array-shell]# cat max-and-min.sh
			#!/bin/bash
			# Author: Maxie
			# Date: 2017-05-17-18:41:00
			# Description: RANDOM , and take out the max or min.

			declare -a rand
			declare -i max=0
			declare -i min=0

			for i in {0..9};do
			    rand[$i]=$[RANDOM%100]
			    echo ${rand[$i]}
			    if [ $i -eq 0 ];then
			        min=${rand[$i]}
			    fi
			    [ ${rand[$i]} -gt $max ] && max=${rand[$i]}
			    [ ${rand[$i]} -lt $min ] && min=${rand[$i]}
			done

			echo
			echo "MAX: $max"
			echo "MIN: $min"

			unset min
			unset max
			unset rand

		2、生成10个随机数，从小到大排序
			#!/bin/bash
			# Author: Maxie
			# 用户输入数字并生成数组
			read -p "Enter a number more than four:" num
			for sb in `seq 0 $num`;do
			  avriables[$sb]=$[$[RANDOM%1000]]
			done
			#显示数组（可省）
			echo -e "${avriables[@]} \n------"
			#从左到右比较大小
			let index=$[$num-1]
			compare(){
			for i in `seq 0 $index`
			do
			  let j=$i+1
			  a=${avriables[$i]}
			  b=${avriables[$j]}
			      if  [[ $a > $b ]];then
			        temp=$a
			       avriables[$i]=$b
			       avriables[$j]=$temp
			      fi
			done
			}
			#循环n-1次，确保数组从小到大排列。
			for cycle in `seq 1 $num`
			do
			  compare
			done
			echo ${avriables[*]}

		3、定义一个数组，数组中的元素是/var/log目录下所有以.log结尾的文件；
			统计其下标为偶数的文件中的行数之和

			把所有以 .log 结尾的文件加入到数组中
			log_file=(/var/log/*.log)

			[root@centos7 array-shell]# bash eachlines.sh
			/var/log/boot.log
			/var/log/wpa_supplicant.log
			/var/log/Xorg.1.log
			/var/log/yum.log
			Lines: 3291
			
			[root@centos7 array-shell]# cat eachlines.sh
			#!/bin/bash
			# Author: Maxie
			# Date: 2017-05-17-19:09:18
			# Description:定义一个数组，数组中的元素是/var/log目录下所有以.log结尾的文件；统计其下标为偶数的文件中的行数之和

			declare -i lines
			declare -a files
			#一次赋值全部元素（命令行展开）
			files=(/var/log/*.log)

			#这里${#files[*]-1} 是因为数组下标是从0开始，所以数组有3个，那么就是0-2
			for i in `seq 0 ${#files[*]-1}`;do
			    if [ $[i%2] -eq 0 ];then
			        let lines+=$(wc -l  ${files[$i]} | cut -d" " -f1)
			        echo ${files[$i]}
			    fi
			done

			echo "Lines: $lines"

			unset lines
			unset files



'bash的内置字符串处理工具：'
	
	'字符串切片：'
		$(var:offset:number)  ： 取字符串的子串
		var：变量名
		offset：跳过的字符数
		number：获取的字符数

			也可以使用 "-4 -2" 之类的，表示从右往左取
			或者
			"+1 +2"，表示从左往右取
				注意：使用这种方法时，:号后面有空格

			[root@centos7 array-shell]# name=jerry
			[root@centos7 array-shell]# echo ${name:2}
			rry
			[root@centos7 array-shell]# echo ${name:1}
			erry
			[root@centos7 array-shell]# echo ${name:1:3}
			err
			[root@centos7 array-shell]# echo ${name: -4}
			erry


	'基于模式取子串：'

		${var#*word}：
			其中'word'是指定的分隔符；
			功能：'自左而右'，查找var变量所存储的字符串中，'第一次'出现的word分隔符，删除字符串开头至此分隔符之间的所有字符；

		${var##word}：（相当于取路径基名的作用）
			其中'word'是指定的分隔符；
			功能：'自左而右'，查找var变量所存储的字符串中，'最后一次'出现的word分隔符，删除字符串开头至此分隔符之间的所有字符；


			实例： 此处以"/"为分隔符
				[root@centos7 array-shell]# echo ${mypath#*/}
				etc/init.d/functions
				[root@centos7 array-shell]# echo ${mypath##*/}
				functions



		${var%word*}： （相当于取路径工作目录的作用）
			其中'word'是指定的分隔符；
			功能：'自右而左'，查找var变量所存储的字符串中，'第一次'出现的word分隔符，删除此分隔符至字符串尾部所有字符；

		${var%%word*}： 
			其中'word'是指定的分隔符；
			功能：'自右而左'，查找var变量所存储的字符串中，'最后一次'出现的word分隔符，删除此分隔符至字符串尾部所有字符；

			实例：
				[root@centos7 array-shell]# echo ${mypath%/*}
				/etc/init.d
				[root@centos7 array-shell]# echo ${mypath%%/*}

			url=http://www.mcy95.com:80
				${url##*:}  --> 取出的是80，也就是端口号
				${url%%:*}  --> 取出的是http，也就是协议



	'查找替换：'
		${var/PATTERN/SUBSTI}：查找var所表示的字符串中，'第一次'被PATTERN所匹配到的字符串，将其替换为SUBSTI所表示的字符串 
			仅替换第一次出现
		${var//PATTERN/SUBSTI}：查找var所表示的字符串中，'所有'被PATTERN所匹配到的字符串，'全部'替换为SUBSTI所表示的字符串 


		行首行尾替换：
			${var/#PATTERN/SUBSTI}：查找var所表示的字符串中，'行首'被PATTERN所匹配到的字符串，'全部'替换为SUBSTI所表示的字符串 

			${var/%PATTERN/SUBSTI}：查找var所表示的字符串中，'行尾'被PATTERN所匹配到的字符串，'全部'替换为SUBSTI所表示的字符串 

		注意：PATTERN中使用glob风格的通配符

		实例：
			[root@centos7 array-shell]# userinfo="root:0:0:root admin:/root:/bin/chroot"
			[root@centos7 array-shell]# echo ${userinfo/root/ROOT}
			ROOT:0:0:root admin:/root:/bin/chroot
			[root@centos7 array-shell]# echo ${userinfo//root/ROOT}
			ROOT:0:0:ROOT admin:/ROOT:/bin/chROOT
			[root@centos7 array-shell]# echo ${userinfo/#root/ROOT}
			ROOT:0:0:root admin:/root:/bin/chroot
			[root@centos7 array-shell]# echo ${userinfo/%root/ROOT}
			root:0:0:root admin:/root:/bin/chROOT




	'查找删除：'
		${var/PATTERN}：以PATTERN为模式，查找var字符串中'第一次'的匹配，并删除之
		${var//PATTERN}：以PATTERN为模式，查找var字符串中'所有'的匹配，并删除之

		${var/#PATTERN}：以PATTERN为模式，查找var字符串中'行首'的匹配，并删除之；如果没有，则不做任何操作
		${var/%PATTERN}：以PATTERN为模式，查找var字符串中'行尾'的匹配，并删除之


			[root@centos7 array-shell]# echo ${userinfo/root}
			:0:0:root admin:/root:/bin/chroot
			[root@centos7 array-shell]# echo ${userinfo/admin}
			root:0:0:root :/root:/bin/chroot
			[root@centos7 array-shell]# echo ${userinfo//root}
			:0:0: admin:/:/bin/ch
			[root@centos7 array-shell]# echo ${userinfo/#admin}
			root:0:0:root admin:/root:/bin/chroot
			[root@centos7 array-shell]# echo ${userinfo/#root}
			:0:0:root admin:/root:/bin/chroot
			[root@centos7 array-shell]# echo ${userinfo/%root}
			root:0:0:root admin:/root:/bin/ch
			[root@centos7 array-shell]# echo ${userinfo/%chdadwa}
			root:0:0:root admin:/root:/bin/chroot



	'字符大小写转换：'
		${var^^}：把var中的所有小写字母 转换为 大写
		${var,,}：把var中的所有大写字母 转换为 小写

		实例：
			[root@centos7 array-shell]# url="http://ww.mcy95.com:80"
			[root@centos7 array-shell]# echo ${url^^}
			HTTP://WW.MCY95.COM:80
			[root@centos7 array-shell]# myurl=${url^^}
			[root@centos7 array-shell]# echo $myurl
			HTTP://WW.MCY95.COM:80
			[root@centos7 array-shell]# echo ${myurl,,}
			http://ww.mcy95.com:80



	'变量赋值：'
		${var:-VALUE}：如果变量var为空，或未设置（没声明），那么返回VALUE；否则，返回var变量的值
			[root@centos7 array-shell]# echo $hi
			
			[root@centos7 array-shell]# echo ${hi:-HELLO}
			HELLO
			[root@centos7 array-shell]# hi=america
			[root@centos7 array-shell]# echo ${hi:-HELLO}
			america

		${var:=VALUE}：如果变量var为空，或未设置（没声明），那么返回VALUE，并将VALUE赋值给 var变量；否则，返回var变量的值
			[root@centos7 array-shell]# echo $hi

			[root@centos7 array-shell]# echo ${hi:=hello}
			hello
			[root@centos7 array-shell]# echo $hi
			hello

		${var:+VALUE}：如果变量var不为空，那么返回VALUE；
			[root@centos7 array-shell]# echo $hi
			hello
			[root@centos7 array-shell]# echo ${hi:+HELLO}
			HELLO

		${var:?ERROR_INFO}：如果var为空，或未设置，那么返回ERROR_INFO为错误提示；否则，返回var的值
			[root@centos7 array-shell]# echo ${ma:?ERROR_INFO}
			-bash: ma: ERROR_INFO
			[root@centos7 array-shell]# echo ${ma:?var is not exist}
			-bash: ma: var is not exist


	'变量间接调用：'
		a=b 
		b=2

		c=${!a}

		[root@centos7 array-shell]# a=b
		[root@centos7 array-shell]# b=2
		[root@centos7 array-shell]# c=${!a}
		[root@centos7 array-shell]# echo $c
		2


	'命令替换：'
		time=date
		echo $time
		eval $time

			[root@centos7 array-shell]# time=date
			[root@centos7 array-shell]# echo $time
			date
			[root@centos7 array-shell]# eval $time
			2017年 05月 18日 星期四 01:40:40 CST
			[root@centos7 array-shell]# date
			2017年 05月 18日 星期四 01:40:42 CST


'eval命令'
	将字符串转换为命令，并执行


	[root@centos7 array-shell]# type eval
	eval 是 shell 内嵌
	[root@centos7 array-shell]# help eval
	eval: eval [参数 ...]
	    将参数作为 shell 命令执行。

	    将 ARGs 合成一个字符串，用结果作为 shell 的输入，
	    并且执行得到的命令。

	    退出状态：
	    以命令的状态退出，或者在命令为空的情况下返回成功。



'install命令：'
	install --help
	用法：install [选项]... [-T] 源文件 目标文件
	　或：install [选项]... 源文件... 目录
	　或：install [选项]... -t 目录 源文件...
	　或：install [选项]... -d 目录...

  
  -d, --directory	将所有参数视为目录名称；为指定的目录创建所有组件
  -D			创建目标目录的所有必要的父目录，然后将源文件复制至该目录
  -g, --group=组	自行设置所属组，而不是进程目前的所属组
  -m, --mode=模式	自行设置权限模式(像chmod)，而不是rwxr-xr-x
  -o, --owner=所有者	自行设置所有者(只适用于超级用户)
  -p, --preserve-timestamps	修改源文件的访问/修改时间以与目标文件保持一致
  -Z                      set SELinux security context of destination
                            file to default type
      --context[=CTX]     like -Z, or if CTX is specified then set the
                            SELinux or SMACK security context to CTX
      --help		显示此帮助信息并退出
      --version		显示版本信息并退出






'信号捕捉：'
	
	trap 命令：（內建命令）

		通过部署陷阱，捕获信号

		'不能捕捉Terminal和kill信号'

		语法：
			trap [-lp] [[参数] 信号声明 ...]
			trap 'COMMAND' SIGNALS
				这里COMMAND，也可以直接调用函数

		选项：
			-l：列出所有信号
				如需查每个信号的详细意义：
					man 7 signal
			-p：

		常可以进行步骤的信号：	
			1) SIGHUP: 无须关闭进程而让其重读配置文件
			2) SIGINT: 中止正在运行的进程；相当于'Ctrl+c'
			3) SIGQUIT:相当于'ctrl+\'
				
				'ctrl + \:
					表示退出 交互式命令的 界面（如bc命令，mail 命令）'



		实例：
			#!/bin/bash
			# Author: Maxie
			# Date: 2017-05-17-21:40:07
			# Description:trap signal test

			trap 'echo "Quit"; exit' INT

			for i in {1..254};do
			    ping -W 1 -c1 172.16.$i.1
			done

		[root@centos7 signal-shell]# cat 2-trap.sh
		#!/bin/bash
		# Author: Maxie
		# Date: 2017-05-17-22:01:46
		# Description:

		#创建一个数组，里面保存，所有生成的临时文件，一个元素对应一个临时文件
		declare -a hostmpfiles

		mytrap() {
		    echo "Quit"
		    rm -f ${hostmpfiles[@]}
		    exit 1
		}

		trap 'mytrap' INT

		for i in {1..10}; do
			#生成一个临时文件，把临时文件的路径赋值给变量tmpfile
		    tmpfile=$(mktemp /tmp/ping.XXXXXX)
		    if ping -W 1 -c 1 172.16.$i.1 &> /dev/null;then
		        echo "172.16.$i.1 is up" | tee $tmpfile
		    else
		        echo "172.16.$i.1 is down" | tee $tmpfile
		    fi
		    #把变量tmpfile中的up/down的信息，输入到数组中的一个元素当中
		    hostmpfiles[${#hostmpfiles[*]}]=$tmpfile
		done

		#清空数组内的所有元素对应的文件
		rm -f ${hostmpfiles[@]}



'dialog：对话框'
	可实现窗口化编程
	yum install dialog

		语法：
			dialog --clear
	    	dialog --create-rc file
	    	dialog --print-maxsize
	    	dialog common-options box-options


	    选项：
	    	--msgbox TEXT Height Width：信息框大小
	    	--backtitle TEXT ：背景标题
	    	--title：标题名
	    	--inputbox TEXT Height Width：输入框


	    实例：
	    	$ dialog --msgbox TEXT Height Width
	    	$ dialog --msgbox hello 17 30
	    	'修改主机名：'
	    		hostname=`dialog --stdout --backtitle "Test" --title "Hostname" --inputbox "hostname" 10 30`


	如何获取用户选择或键入的内容？
		默认，其输出信息被定向到了'错误输出流'；

	a=$(dialog) 这样是无法获取到用户的输入信息，因为捕获的是标准输出，而非错误输出

	所以要使用：
		dialog --stdout 

	如果脚本要使用 dialog，则必须安装了dialog


	实例：
		[root@centos7 signal-shell]# cat useradd-dialog.sh
		#!/bin/bash
		# Author: Maxie
		# Date: 2017-05-18-11:59:22
		# Description:addusers with dialog command.

		#!/bin/bash
		#
		username=`dialog --stdout --backtitle "Add user:" --title "Username" --inputbox "Enter u name: " 10 30`
		retval=$?

		if [ $retval -eq 0 -a -n "$username" ];then
		    if ! id $username $> /dev/null;then
		        useradd $username
		        pass=`dialog --stdout --backtitle "Add Password" --title "Paasword" --passwordbox "Enter u password: " 10 30`
		        echo $pass | passwd --stdin $username &> /dev/null
		        dialog --backtitle "Add a user." --title "Add a user" --msgbox "Add user $username finished." 10 30
		    else
		        dialog --backtitle "Add a user" --title "Add a user." --msgbox "$username is already exist." 10 30
		    fi
		fi
















