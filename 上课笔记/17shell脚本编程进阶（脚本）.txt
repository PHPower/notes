17shell脚本编程进阶（脚本）


'阶乘函数：'
			阶乘公式：
				n!=(n-1)!*n  
					10!=9!*10
				n!：n的阶乘


			实例：
				vim jiecheng.sh 
				#!/bin/bash
				#
				fact() {
					if [ $1 -eq 0 -o $1 -eq 1 ];then 
						echo 1
					else 
							echo $[$1*$(fact $[$1-1])]
					fi
				}

'斐波那契数列：（每一项等于前两项的和）'
	实例：
		#!/bin/bash
		#
		fab() {
			if [ $1 -eq 1 ];then
				echo  "1"
			elif [ $1 -eq 2 ];then 
				echo  "1"
			else 
				echo  "$[$(fab $[$1-1])+$(fab $[$1-2])]"
			fi
		}

		for i in `seq 1 $1`; do
			fab $i 
		done 
		echo

	实例：斐波那契数列前N项的排列组合
		#!/bin/bash
		# Author: Maxie
		# Date: 2017-05-16-16:54:54
		# Description:
		fab() {
		    if [ $1 -eq 1 ]
		    then
		        echo "1"
		    elif [ $1 -eq 2 ]
		    then
		        echo "1"
		    else
		        echo  "$[$(fab $[$1-1])+$(fab $[$1-2])]"
			    fi
		}
		for i in `seq 1 $[$1-1]`;do
			fab $i
		done

练习：
	1、指定一个用户，获取该用户的ID号和默认shell
		$ grep "^root\>" | cut -d: -f3,7
		0:/bin/bash

		$ vim id-shell.sh
		#!/bin/bash
		userinfo() {
		    if id $username &> /dev/null; then
		        grep "^$username\>" /etc/passwd | cut -d: -f3,7
		    else
		        echo "no such usuer"
		    fi
		}
		#开始调用函数
		username=$1
		userinfo
		
		username=$2
		userinfo

	2、服务脚本框架
		$ vim testsrv
		[root@centos7 function]# cat testsrv
		#!/bin/bash
		#
		# chkconfig: - 50 50
		# description: test service scrpti
		
		prog=$(basename $0)
		lockfile=/var/lock/subsys/$prog
		
		start() {
		    if [ -f $lockfile ];then
		        echo "$prog is running yet"
		    else
		        touch $lockfile
		        [ $? -eq 0 ] && echo "start $prog finshed"
		   fi
		}
		
		stop() {
		    if [ -f $lockfile ];then
		        rm -f $lockfile
		        [ $? -eq 0 ] && echo "stop $prog finshed"
		    else
		        echo "$prog is not running"
		    fi
		}
		
		status() {
		    if [ -f $lockfile ]; then
		        echo "$prog is running"
		    else
		        echo "$prog is stopped"
		    fi
		}
		
		usage() {
		    echo "Usage: $prog {start|stop|restart|status}}"
		}

		case $1 in
		start)
		    start ;;
		stop)
		    stop ;;
		restart)
		    stop
		    start
		    ;;
		status)
		    status ;;
		*)
			usage
			exit 1 ;;
		esac

	3、添加10个用户：
		[root@centos7 0516shell-class]# cat useradd-func.sh
		#!/bin/bash
		# Author: Maxie
		# Date: 2017-05-16-16:06:12
		# Description:add 10 users
		adduser() {
		    if id $1 &> /dev/null;then
		        return 2
		    else
		        useradd $1
		        retval=$?
		        return $retval
		    fi
		}
		for i in {1..10};do
		    adduser ${1}${i}
		    retval=$?
		        if [ $retval -eq 0 ];then
		            echo "add user ${1}${i} finished."
		        elif [ $retval -eq 5 ];then
		            echo "user ${1}${i}  exists"
		        else
		            echo "Unknown Error"
		        fi
		done



		'#这里函数adduser()中$1是在脚本中的   adduser ${1}${i}  这个${1}${i}代表函数中$1'



1、写一个脚本：
	使用函数实现ping一个主机来测试主机的在线状态；主机地址通过参数传递诶函数
	主程序：测试172.16.1.1-172.16.67.1范围内各主机的在线状态
		[root@centos7 0516shell-class]# cat ip-online.sh
		#!/bin/bash
		#user:Maxie
		# 写一个脚本，提示请输入网络地址，如 172.16.0.0 ，判断输入的网段中主机在线状态
		read -p "请输入IP地址的网络地址：" IP         # 说明信息IP
		# 定义变量名称=调用$IP获取的值 抽取 以.为分隔符 1-2的字符
		IpAddr=`echo $IP | cut -d. -f1-2`.
		sum=`echo $IP | cut -d. -f3`
		addr_ping() {
		                for i in `seq 0 5`;do
		                if ping -c 1 -W 1 ${IpAddr}${1}.${i} &> /dev/null
		                then
		                                echo -e "${IpAddr}${1}.${i}\tonline"
		                else
		                        echo -e "${IpAddr}${1}.${i}\toffline"
		                    fi
		                done
		}
		if echo $IP | egrep '\<([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\>' &>/dev/null;then
		    for I in `seq 1 $sum`;do
		        addr_ping $I
		        [ $I -eq $sum ] && break
		    done
		fi
		
		unset IP 
		unset sum 
		unset IpAddr


2、写一个脚本：
	实现打印 n,n （例如4,3)乘法表；

	[root@centos7 0516shell-class]# cat nnchengfabiao.sh
	#!/bin/bash
	# Author: Maxie
	# Date: 2017-05-16-18:26:35
	# Description:print triangle and Trapezoid


	Multi() {
	    for ((i=1;i<=$1;i++));do
	        for ((j=1;j<=$2 && j<=i;j++));do
	            echo -e -n "${i}x${j}=$[${i}*${j}]\t"
	        done
	        echo
	    done
	}

	n1=$1
	n2=$2
	Multi $n1 $n2

	unset n1
	unset n2



3、打印三角形，梯形

	[root@centos7 0516shell-class]# cat triangle.sh
	#!/bin/bash
	# Author: Maxie
	# Date: 2017-05-16-18:38:37
	# Description:打印三角形和梯形

	TRIANGLE() {
	    for ((line=1;line<=$1;line++));do
	        for ((space=1;space<=$[$1-line];space++));do
	            echo -n " "
	        done

	        for ((start=1;start<=$[line*2-1];start++));do
	            echo -n "*"
	        done
	        echo
	    done
	}

	sum_line=$1

	TRIANGLE $sum_line

	unset sum_line

	echo
	echo

	#print Trapezoid

	TRAPEZOID() {
	    for i in `seq $1 $2`;do
	        for j in `seq $i`;do
	            echo -n "* "
	        done
	        echo
	    done
	}

	_MIN=$2
	_MAX=$3

	TRAPEZOID $_MIN $_MAX

	unset _MIN
	unset _MAX






PDF课后题：Page48

1、编写服务脚本/root/bin/testsrv.sh，完成如下要求
	(1) 脚本可接受参数：start, stop, restart, status
	(2) 如果参数非此四者之一，提示使用格式后报错退出
	(3) 如是start:则创建/var/lock/subsys/SCRIPT_NAME, 并显示“启动成功”
	考虑：如果事先已经启动过一次，该如何处理？
	(4) 如是stop:则删除/var/lock/subsys/SCRIPT_NAME, 并显示“停止完成”
	考虑：如果事先已然停止过了，该如何处理？
	(5) 如是restart，则先stop, 再start
	考虑：如果本来没有start，如何处理？
	(6) 如是status, 则如果/var/lock/subsys/SCRIPT_NAME文件存在，则显示“SCRIPT_NAMEis running...”
	如果/var/lock/subsys/SCRIPT_NAME文件不存在，则显示“SCRIPT_NAME is stopped...”
	其中：SCRIPT_NAME为当前脚本名
	(7)在所有模式下禁止启动该服务，可用chkconfig和service命令管理

	$ vim testsrv
	[root@centos7 function]# cat testsrv
	#!/bin/bash
	#
	# chkconfig: - 50 50
	# description: test service scrpti
	
	prog=$(basename $0)
	lockfile=/var/lock/subsys/$prog
	
	start() {
	    if [ -f $lockfile ];then
	        echo "$prog is running yet"
	    else
	        touch $lockfile
	        [ $? -eq 0 ] && echo "start $prog finshed"
	   fi
	}
	
	stop() {
	    if [ -f $lockfile ];then
	        rm -f $lockfile
	        [ $? -eq 0 ] && echo "stop $prog finshed"
	    else
	        echo "$prog is not running"
	    fi
	}
	
	status() {
	    if [ -f $lockfile ]; then
	        echo "$prog is running"
	    else
	        echo "$prog is stopped"
	    fi
	}
	
	usage() {
	    echo "Usage: $prog {start|stop|restart|status}}"
	}

	case $1 in
	start)
	    start ;;
	stop)
	    stop ;;
	restart)
	    stop
	    start
	    ;;
	status)
	    status ;;
	*)
		usage
		exit 1 ;;
	esac


2、编写脚本/root/bin/copycmd.sh
	(1) 提示用户输入一个可执行命令名称
	(2) 获取此命令所依赖到的所有库文件列表
	(3) 复制命令至某目标目录(例如/mnt/sysroot)下的对应路径下；
	如：/bin/bash ==> /mnt/sysroot/bin/bash
	/usr/bin/passwd==> /mnt/sysroot/usr/bin/passwd
	(4) 复制此命令依赖到的所有库文件至目标目录下的对应路径下：
	如：/lib64/ld-linux-x86-64.so.2 ==> /mnt/sysroot/lib64/ld-linux-x86-64.so.2
	(5)每次复制完成一个命令后，不要退出，而是提示用户键入新的要复制的命令，并重复完成上述功能；直到用户输入quit退出

	$ cat /root/Desktop/copycmd.sh
	#!/bin/bash
	 
	ch_root="/mnt/root"
	[ ! -d $ch_root ] && mkdir $ch_root
	 
	bin_copy() {
	    if which $1 &>/dev/null; then

	        local cmd_path=`which --skip-alias $1`
	        local bin_dir=`dirname $cmd_path`
	        [ -d ${ch_root}${bin_dir} ] || mkdir -p ${ch_root}${bin_dir}
	        [ -f ${ch_root}${cmd_path} ] || cp $cmd_path ${ch_root}${bin_dir}
	        return 0
	    else
	        echo "Command not found."
	        return 1
	    fi
	}
	 
	lib_copy() {
	    local lib_list=$(ldd `which --skip-alias $1` | grep -Eo '/[^[:space:]]+')
	    for loop in $lib_list;do
	        local lib_dir=`dirname $loop`
	        [ -d ${ch_root}${lib_dir} ] || mkdir -p  ${ch_root}${lib_dir}
	        [ -f ${ch_root}${loop} ] || cp $loop ${ch_root}${lib_dir}
	    done
	}
	 
	 
	read -p "Please input a command: " command
	 
	while [ "$command" != "quit" ];do
	    if bin_copy $command ;then
	        lib_copy $command
	    fi
	    read -p "Please input a command or quit: " command
	done


3、编写函数实现两个数字做为参数，返回最大值

	$ vim two-args.sh 
	#!/bin/bash
	#
	_Max() {
		if [ $1 -lt $2 ];then 
			echo "MAX: $2"
		else 
			echo "MAX: $1"
		fi 
	}
	arg1=$1
	arg2=$2
	_Max $arg1 $arg2


4、编写函数实现数字的加减乘除运算，例如输入1 + 2，，将得出正确结果
	
	$ vim bc2-shell.sh
	#!/bin/bash
	#
	jisuanqi() {
		echo $@ | bc 
	}

	read -p "Please input u want calc: " CALC 
	jisuanqi $CALC


5、斐波那契数列又称黄金分割数列，因数学家列昂纳多·斐波那契以兔子繁殖为例子而引入，故又称为“兔子数列”，
	指的是这样一个数列：0、1、1、2、3、5、8、13、21、34、……，
	斐波纳契数列以如下被以递归的方法定义：F（0）=0，F（1）=1，F（n）=F(n-1)+F(n-2)（n≥2）
	利用函数，求n阶斐波那契数列

	#!/bin/bash
	# Author: Maxie
	# Date: 2017-05-17-14:23:24
	# Description:Fibonacci sequnence

	fib() {
	    if [ $1 -eq 0 ];then
	        echo "0"
	    elif [ $1 -eq 1 -o $1 -eq 2 ];then
	        echo "1"
	    else
	        echo "$[$(fib $[$1-1])+$(fib $[$1-2])]"
	    fi
	}

	read -p "please input number: " num
	if let num+1 &> /dev/null;then
	    for ((i=1;i<=num;i++));do
	        fib $num
	    done

	    else
	        echo "only int number allowed" && exit 2
	fi



6、汉诺塔（又称河内塔）问题是源于印度一个古老传说。
	大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。
	大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。
	并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘
	利用函数，实现N片盘的汉诺塔的移动步骤

#!/bin/bash  
  
move=0

dohanoi()
{
	if [ $1 -eq 0 ]  
	then  
		echo ""   
	else  
		dohanoi "$(($1-1))" $2 $4 $3  
		echo "move $2 ----> $3"  
  
		let "move=move+1"  
  
		dohanoi "$(($1-1))" $4 $3 $2  
	fi  
      
	if [ $# -eq 1 ]  
	then  
		if [ "$(( $1 > 1 ))" -eq 1 ]  
		then  
			dohanoi $1 A C B  
			echo "Total moves  = $move"  
			else  
			echo "The number of disk which you input is illegal! "  
		fi
	fi
}

echo "Please input the num of disk:"  
read num  
dohanoi $num ‘A‘ ‘B‘ ‘C‘









