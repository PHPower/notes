5.4下午笔记（进程和计划任务）

'进程概念：'

	内核的功用：进程管理、文件系统、网络功能、内存管理、驱动程序、安全功能等
	
	Process: 运行中的程序的一个副本，是被载入内存的一个指令集合
		进程ID（Process ID，PID）号码被用来标记各个进程
		UID、GID、和SELinux语境决定对文件系统的存取和访问权限，
			UID：以哪个用户的身份执行的
			GID：以哪个组的身份来执行的
		通常从执行进程的用户来继承
		存在生命周期
	
	task struct（任务结构）：Linux内核存储进程信息的数据结构格式
	task list：多个任务的的task struct组成的链表

	进程创建：
		init：第一个进程
			父子关系
				[root@centos6 ~]# pstree -p
				init(1)─┬─NetworkManager(1688)───{NetworkManager}(1742)
				        ├─abrtd(2058)
				        ├─acpid(1806)
				CentOS7:
				[root@centos7 ~]# pstree
				systemd─┬─NetworkManager───2*[{NetworkManager}]
				        ├─2*[abrt-watch-log]
				        ├─abrtd

		进程：都由其父进程创建，CoW
			CoW：
				写时复制（当写的时候，子进程才会复制父进程的信息，没有写操作的时候，读的是父进程的信息）
				C：copy
				W：write

			fork(), clone()


	'相关概念：'
		
		'进程内存：'
			Page Frame: 页框，用存储页面数据，存储Page 4k
				给进程分配的最小单位

			LRU：Least Recently Used 近期最少使用算法,释放内存
			物理地址空间和线性地址空间
				线性内存：所有可用内存
				物理内存：实际应用程序用了的内存
					对于应用程序：
						看到的是线性内存，但是分配给应用程序的是对应的物理内存

			MMU：Memory Management Unit负责转换线性和物理地址
				负责维护物理内存和线性内存的对应关系

			TLB:Translation Lookaside Buffer 翻译'后备缓冲器',用于保存虚拟地址和物理地址映射关系的缓存
				相当于缓存表

			查看物理内存和线性内存的对应关系：
				$ ps aux   其中VSZ是线性内存，RSS是物理内存


		'IPC: Inter Process Communication'

			同一主机: signal:信号
				shm: shared memory（共享内存）
					通常每个进程占用的内存都是不一样的，通过实现两个进程使用一个内存，实现两个进程的通信
				semaphore:信号量，一种计数器
				UNIX socket：同机使用Unix 套接字（程序在本机上进行通信使用）
			
			不同主机：rpc: remote procedure call
				socket: IP和端口号


		LRU算法：
			假设序列为4 3 4 2 3 1 4 2
			物理块有3个，则
			第1轮4调入内存4
			第2轮3调入内存3 4
			第3轮4调入内存4 3
			第4轮2调入内存2 4 3
			第5轮3调入内存3 2 4 
			第6轮1调入内存1 3 2
			第7轮4调入内存4 1 3
			第8轮2调入内存2 4 1


'进程优先级：'
	进程优先级：
		系统优先级：数字越小，优先级越高
			0-139（CentOS4,5）
				各有140个运行队列和过期队列
					运行队列：需要运行的队列内的各个进程
					过期队列：当运行队列中的一个进程运行完之后，会进入到过期队列，当运行队列中的所有进程都运行完毕之后，过期队列会变成运行队列，运行队列变成过期队列

			0-98，99（CentOS6）
		
		实时优先级（realtime）:99-0：值最大优先级最高
		
		nice值：-20到19，对应系统优先级100-139或99
			-20：优先级最高
			19：优先级最小

	Big O：时间复杂度，用时和规模的关系
		O(1)：不论你规模多大， 花的时间都一样
		O(logn)：随规模增长，时间增长
		O(n)线性：随规模增长，时间增长（成本越高），比logn增长更快
		O(n^2)抛物线：更抖，增长更快
		O(2^n)：指数型增长，最快


	'使用一种方法，绑定一个进程到多核心CPU的一个核心上，也就是一个核心只运行这一个进程'



'进程状态：'

	Linux内核：抢占式多任务
	
	进程类型：（两类）
		守护进程: 'daemon',在系统引导过程中启动的进程，和终端无关进程
			开机启动

		前台进程：跟终端相关，通过终端启动的进程
			终端关闭，进程关闭

		注意：两者可相互转化


	进程状态：
		运行态：running
		就绪态：ready     
		睡眠态：
			可中断：interruptable
			不可中断：uninterruptable
		停止态：stopped,暂停于内存，但不会被调度，除非手动启动
		僵死态：zombie，结束进程，父进程结束前，子进程不关闭


	写脚本时，要注意释放变量：unset n



'系统管理工具：'
	
	进程的分类：
		CPU-Bound：CPU密集型，非交互
		IO-Bound：IO密集型，交互

	Linux系统状态的查看及管理工具：pstree, ps, pidof, pgrep, top, htop, glance, pmap, vmstat, dstat, kill, pkill, job, bg, fg, nohup

	pstree命令：
		pstree-display a tree of processes
	
	ps: process state
		ps-report a snapshot of the current processes
			查看当前进程的快照

		Linux系统各进程的相关信息均保存在/proc/PID目录下的各文件中



'ps命令'
	查看进程信息

	语法：
		ps [OPTIONS]

	支持三种选项：
		UNIX选项如：-A -e
		BSD选项如：a
		GNU选项如：--help

	默认显示当前终端中的进程
		a选项：包括所有终端中的进程
			和终端相关的进程

		x选项：包括不链接终端的进程
			和终端无关的进程，'一般是守护进程'

		u选项：显示进程所有者的信息
			查看谁运行进程

		f选项：显示进程的父进程
		
		o属性... 选项显示定制的信息：
			pid、comm、%cpu、%mem、state、tty、euser、ruser

			# 查看当前Shell的进程以及其父进程
			# 	[root@centos7 ~]# echo $$
			# 	6167
			# 	[root@centos7 ~]# echo $PPID
			# 	6165

	VSZ: Virtual memory SiZe，虚拟内存集，线性内存
	
	RSS: ReSidentSize, 常驻内存集
	
	STAT：进程状态
		R：running
		S: interruptablesleeping
		D: uninterruptable sleeping
		T: stopped
		Z: zombie
		+: 前台进程
		l: 多线程进程
		L：内存分页并带锁
		N：低优先级进程
		<: 高优先级进程
		s: session leader，会话（子进程）发起者

	TIME：累计消耗的CPU的时间片(秒为单位)


	'常用命令选项组合：'
		常用组合：-ef	
			-e: 显示所有进程
			-f: 显示完整格式程序信息
			可以显示父进程（PPID）
			
		常用组合：-eFH
			-F: 显示更完整格式的进程信息
			-H: 以进程层级格式显示进程相关信息
			
		常用组合：自定义
			-eo pid,tid,class,rtprio,ni,pri,psr,
				pcpu,stat,comm

				psr：跑在哪个核心上
				ni: nice值
				pri: priority优先级
				psr: processor CPU编号
				rtprio: 实时优先级
				
				示例：
					ps axo pid,cmd,psr,ni,pri,rtprio

			
			axo stat,euid,ruid,tty,tpgid,sess,pgrp,ppid,
				pid,pcpu,comm
					euid：有效用户ID
					ruid：实际用户ID
						相对于suid的情况来说
							[root@centos7 ~]# ps axo pid,cmd,euid,ruid
							6895 passwd                          0  1001
					cmd：执行的命令
					tty：运行在哪个终端
					ppid：父进程ID号
					pid：进程号


			$ ps axo pid,cmd：调一些字段进行显示	
				axo 后跟一些你想要显示的字段


'进程优先级：'
	
	进程优先级调整：
		静态优先级：100-139
		进程默认启动时的nice值为0，优先级为120
		只有根用户才能降低nice值（提高优先性）


'nice命令：'

	nice命令：
		nice [OPTION] [COMMAND [ARG]...]

		实例：
			$ nice -n -10 dd if=/dev/zero of=/dev/null
			$ nice --10 COMMAND    #等同于上面这个命令
			指定优先级为-10
	
	
	renice命令：
		renice[-n] priority pid...

		实例：
			$ renice -n 10 PID 
			修改优先级为10
	
	查看：
		ps axo pid,comm,ni


'搜索进程：'

	最灵活：ps选项| 其它命令

	按预定义的模式：pgrep
		pgrep [options] pattern
			-u uid: effective user，生效者
			-U uid: real user，真正发起运行命令者
			-t terminal: 与指定终端相关的进程
			-l: 显示进程名
			-a: 显示完整格式的进程名
			-P pid: 显示指定进程的子进程
	
	按确切的程序名称：/sbin/pidof
		pidof bash

	[root@centos7 ~]# which pidof
	/usr/sbin/pidof
	[root@centos7 ~]# ll /usr/sbin/pidof
	lrwxrwxrwx. 1 root root 18 3月  19 10:00 /usr/sbin/pidof -> /usr/sbin/killall5
	[root@centos7 ~]# ll /usr/sbin/killall5
	-rwxr-xr-x. 1 root root 23728 6月  10 2014 /usr/sbin/killall5


	生成软连接，让其生成的效果不一样。执行killall5和pidof的效果不一样

	如何实现呢？

	






