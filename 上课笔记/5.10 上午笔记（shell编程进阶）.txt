5.10 上午笔记（shell编程进阶）
	
复习：
	进程管理工具：
		ps
		pstree
		top
		htop
		dstat
		vmstat
		iostat
		uptime
		kill
		pkill
		killall
		pgrep
		pidof
		glances
		bg fg nohup
		jobs
		at 
		crontab
		sleep  usleep

	Linux启动流程：
		post（加电自检） --> bios --> Bootloader(MBR 446字节 stage1) --> stage1.5 加载系统启动需要的启动 
		-->grub stage2 /boot/grub --> /boot/gurb/grub.conf/ 
		--> /boot/vmlinuz-`uname -r` linux内核文件 --> /boot/initramfs-`uname -r`.img linux启动驱动文件 
		--> rootfs  --> init(7是：systemd)



'Shell编程进阶：'
	
	本章内容：
		流程控制
		函数
		数组
		高级字符串操作
		高级变量

'流程控制：'
	过程式编程语言：
		顺序执行
		选择执行
		循环执行

	'注意：'
		当语法错误时，脚本会停止执行


'条件选择if语句：'
	选择执行：
		注意：if 语句可以嵌套

	单分支：
		if 判断条件;then
			条件为真的分支代码
		fi

	双分支：
		if 判断条件; then
			条件为真的分支代码
		else
			条件为假的分支代码
		fi

	多分支
		if 判断条件1; then
			条件为真的分支代码
		elif 判断条件2; then
			条件为真的分支代码
		elif 判断条件3; then
			条件为真的分支代码
		else
			以上条件都为假的分支代码
		fi

	逐条件进行判断，第一次遇为“真”条件时，执行其分支，而后结束整个if语句


	实例：
		根据命令的退出状态来执行命令
		if ping -c1 -W2 station1 &> /dev/null;then
			echo'Station1isUP' 
		elif grep"station1" ~/maintenance.txt &> /dev/null
		then
			echo'Station1 is under going maintenance'
		else 
			echo 'Station1 is unexpectedly DOWN!' 
			exit1
		fi



'条件判断：case语句'
	case 变量引用 in
	PAT1)
		分支1
		;;
	PAT2)
		分支2
		;;
	...
	*)
		默认分支
		;;
	esac


	case支持glob风格的通配符：
		*: 任意长度任意字符
		?: 任意单个字符
		[]：指定范围内的任意单个字符
		a|b: a或b


	实例：
		case $number in 
		1|2|3)
			CMD1
			;;
		4|5|6)
			CMD2
			;;
		*)
			CMD3
			;;
		esac

		如果是1，2，3则执行CMD1，如果是4，5，6则执行CMD2，如果是其他任意值，执行CMD3



'练习：'
	1、编写脚本/root/bin/createuser.sh，实现如下功能：使用一个用户名做为参数，如果指定参数的用户存在，就显示其存在，否则添加之；显示添加的用户的id号等信息
	
	2、编写脚本/root/bin/yesorno.sh，提示用户输入yes或no,并判断用户输入的是yes还是no,或是其它信息
		#!/bin/bash
		#
		read -p "Yue ma ?  yes or no ? " input

		[ -z $input ] && echo "请输入yes or no，不要输入空值" && exit 1

		input=`echo $input | tr "[[:upper:]]" "[[:lower:]]"`

		case $input in
		yes|y)
		        echo "lets go"
		        ;;
		no|N)
		        echo "bye"
		        ;;
		*)
		        echo "fuck u"
		        ;;
		esac

		unset input

		系统级的启动脚本存放位置：/etc/init.d/目录下

			case "$1" in
			    start)
			        rh_status_q && exit 0
			        $1
			        ;;
			    stop)
			        rh_status_q || exit 0
			        $1
			        ;;
			    restart)
			        $1
			        ;;
			    reload)
			        rh_status_q || exit 7
			        $1
			        ;;
			    force-reload)
			        force_reload
			        ;;
			    status)
			        rh_status
			        ;;
			    condrestart|try-restart)
			        rh_status_q || exit 0
			        restart
			        ;;
			    *)
			        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
			        exit 2
			esac


	3、编写脚本/root/bin/filetype.sh,判断用户输入文件路径，显示其文件类型（普通，目录，链接，其它文件类型）
		[ -d $FILE ]
		[ -f $FILE ]
		[ -L $FILE ]


	4、编写脚本/root/bin/checkint.sh,判断用户输入的参数是否为正整数
		#!/bin/bash
		if [[ $1 =~ ^[0-9]*$ ]] && [ $1 -gt 0 ]; then
            echo "a is an integer"
        else
            echo "a is not an integer"
        fi 




'循环：'
	
	循环执行：
		将某代码段重复运行多次
		重复运行多少次：
			循环次数事先已知
			循环次数事先未知
		有进入条件和退出条件

	for, while, until



'for循环：'
	
	语法：
		for 变量名 in 列表;do
			循环体
		done

		变量名：无需加$符号，直接输入变量的名字
			for input in {a,b,c};do
				CMD1 
			done

			第一次循环时，input=a
			第二次	  ，input=b 
			...

		'第二种语法格式：'
			for (( 表达式1; 表达式2; 表达式3 )); do 命令; done
    		
			上面这一条等价于：
   
	    		(( EXP1 ))
	    		while (( EXP2 )); do
	    				COMMANDS
	    				(( EXP3 ))
	    		done


	执行机制：
		依次将列表中的元素赋值给“变量名”; 每次赋值后即执行一次循环体; 直到列表中的元素耗尽，循环结束


	列表生成方式：
		(1) 直接给出列表
		(2) 整数列表：
			a) {start..end}
			b) $(seq [start [step]] end)	
				step是步进的值

		(3) 返回列表的命令
			$(COMMAND)
		(4) 使用glob，如：*.sh
		(5) 变量引用；
			$@, $*

	for循环实现1+100：
		#!/bin/bash
		let sum=0
		let i 
		for i in {1..100};do
			let sum=sum+i
		done
		echo "sum is $sum"

		unset i 
		unset sum


	'练习：'
		
		'此脚本保存在CentOS7中的/root/shell-Advance/0510shell-class-test/目录中'

		1、判断/var/目录下所有文件的类型

			#!/bin/bash
			#Descript:判断/var/目录下所有文件的类型
			#date:2017-05-10

			DIR=/var
			for type in `ls $DIR`;do
			        MyPath=${DIR}/${type}
			        if [ -f ${MyPath} ];then
			                echo "$MyPaht 是普通文件"
			        elif [ -L $MyPath ];then
			                echo "$MyPath 是连接文件"
			        elif [ -d $MyPath ];then
			                echo "$MyPath 是目录文件"
			        else
			                echo "$MyPath 文件类型未知"
			        fi
			done

		
		2、添加10个用户user1-user10，密码为8位随机字符
			随机8位数字：head -c 10000 /dev/urandom | tr -dc 0-9 | head -c 8;echo
			随机8位字母数字：head -c 10000 /dev/urandom | tr -dc A-Za-z0-9 | head -c 8;echo

				'[root@centos7 0510shell-class-test]# cat useradd-random-passwd.sh'
				#!/bin/bash
				#Descript:添加10个用户user1-user10，密码为8位随机字符
				#date:2017-05-10

				SUM=10

				for i in `seq 1 $SUM`;do
					useradd user${i}
					echo "head -c 10000 /dev/urandom | tr -dc A-Za-z0-9 | head -c 8;echo" | passwd --stdin user${i}
					echo "user${i}成功创建并修改密码"
				done


?		3、/etc/rc.d/rc3.d目录下分别有多个以K开头和以S开头的文件；分别读取每个文件，以K开头的文件输出为文件加stop，以S开头的文件输出为文件名加start
			“K34filename stop”
			“S66filename start”

				'借鉴这个脚本：/etc/rc.d/rc '
					for i in /etc/rc$runlevel.d/K* ; do

						# Check if the subsystem is already up.
						subsys=${i#/etc/rc$runlevel.d/K??}
						[ -f /var/lock/subsys/$subsys -o -f /var/lock/subsys/$subsys.init ] || continue
						check_runlevel "$i" || continue

						# Bring the subsystem down.
						[ -n "$UPSTART" ] && initctl emit --quiet stopping JOB=$subsys
						$i stop
						[ -n "$UPSTART" ] && initctl emit --quiet stopped JOB=$subsys
					done

			'[root@centos7 0510shell-class-test]# vim KorS-file.sh'
			#!/bin/bash
			# Author: Maxie
			# Date: 2017-05-10-17:20:04
			# Description:/etc/rc.d/rc3.d目录下分别有多个以K开头和以S开头的文件；分别读取每个文件，以K开头的文件输出
			为文件加stop，以S开头的文件输出为文件名加start

			File_Path=/etc/rc.d/rc3.d/

			if [ -d $File_Path ];then
			for i in `ls $File_Path`;do
			    if [[ $i =~ ^K ]];then
			        echo "K开头的文件: $i"
			        ${File_Path}/$i stop
			    elif [[ $i =~ ^S  ]];then
			        echo "S开头的文件: "$i
			        ${File_Path}/$i start
			    else
			        echo "此文件既不是S开头也不是K开头"
			    fi
			done
			fi
		

		4、编写脚本，提示输入正整数n的值，计算1+2+…+n的总和
			#!/bin/bash
			# Author: Maxie
			# Date: 2017-05-10-12:32:01
			# Description: 提示输入正整数n的值，计算1+2+…+n的总和

			read -p "请输入正整数: " NUM

			SUM=0

			if [[ $NUM =~ ^[0-9]+$ ]];then
				echo "输入正确，下面开始计算1+..+n的值"
				for i in `seq $SUM $NUM`;do
					let SUM=SUM+i
				done
				echo "总和为:$SUM"
			else
				echo "输入错误，请输入正整数" && exit 1
			fi
		
		
?		5、编写脚本，提示请输入网络地址，如192.168.0.0，判断输入的网段中主机在线状态
			测试：172.16.0.0/16网段内在线的IP地址
			
			'[root@centos7 0510shell-class-test]# cat ip-online.sh'
			#!/bin/bash
			#user:Maxie
			# 写一个脚本，提示请输入网络地址，如 172.16.0.0 ，判断输入的网段中主机在线状态

			echo -n "IP:"   # 提示输入IP
			read IP         # 说明信息IP


			# 定义变量名称=调用$IP获取的值 抽取 以.为分隔符 1-2的字符
			IpAddr=`echo $IP | cut -d. -f1-2`.

			# 定义变量名称=调用$IP获取的值 抽取 以.为分隔符 1-3的字符
			#ipdizhi=`echo $IP | cut -d. -f1-3 `.

			#ip地址扩展表达式
			if echo $IP | egrep '\<([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\>' &>/dev/null
			then
			  #这里的0 20是从172.16.0.X-172.16.10.X
			  for I in `seq 0 10`
			  do
				#这里的0 20是从172.16.0.0-172.16.0.20
			    	for i in `seq 0 20`
			    	do
			        	if ping -c 1 -W 1 ${IpAddr}${I}.${i} &> /dev/null
			        	then
			            		echo -e "${IpAddr}${I}.${i}\tonline"
			        	else
			           		echo -e "${IpAddr}${I}.${i}\toffline"
					fi
			    	done
			  done
			fi

		
		6、打印九九乘法表

			[root@centos7 0510shell-class-test]# ./99chengfabiao.sh
			1*1=1
			2*1=2 2*2=4
			3*1=3 3*2=6 3*3=9
			4*1=4 4*2=8 4*3=12 4*4=16
			5*1=5 5*2=10 5*3=15 5*4=20 5*5=25
			6*1=6 6*2=12 6*3=18 6*4=24 6*5=30 6*6=36
			7*1=7 7*2=14 7*3=21 7*4=28 7*5=35 7*6=42 7*7=49
			8*1=8 8*2=16 8*3=24 8*4=32 8*5=40 8*6=48 8*7=56 8*8=64
			9*1=9 9*2=18 9*3=27 9*4=36 9*5=45 9*6=54 9*7=63 9*8=72 9*9=81
			
			'[root@centos7 0510shell-class-test]# cat 99chengfabiao.sh'
			#!/bin/bash
			#Descript:99乘法表
			#date:2017-05-10

			for (( i=1;i<=9;i++  ))
			do
		        for  (( j=1;j<=i;j++ ))
        		do
                	let "sum=i*j"
                	echo  -e "$i*$j=$sum \c"
        	done
        			echo
			done
		
		
		7、在/testdir目录下创建10个html文件,文件名格式为数字N（从1到10）加随机8个字母，如：1AbCdeFgH.html
			[root@centos7 0510shell-class-test]# cat create-html.sh
			#!/bin/bash --login
			# Author: Maxie
			# Date: 2017-04-13-15:42:46
			# Description: Receive an integer of 1 to 5 as a parameter, the function for the creation of documents, text. The name of the file is 8 random capital letters and ends with .html.

			if echo "$1" | grep -q '^[0-9]\+$'; then
			echo "$1 is number."  &> /dev/null
			else
			echo "$1 is not number." &> /dev/null
			exit 2
			fi

			SUM=$1
			FILE_SUM=0

			while [ $SUM -gt $FILE_SUM ]
			do
				touch  `head -c 100 /dev/urandom | tr -dc A-Z | head -c 8;echo`.html
				let FILE_SUM++
			done


?		8、打印等腰三角形
			sumline=10  #总行数
			sumstart=line*2-1  #一行的星星数
			sumspace=sumline-line   #一行的空格数
			line       #第几行
			
			公式：


			老师方法：
				#!/bin/bash
				#
				let sum=10
				for line in `seq 1 $sum`;do  #打印10行
					for space in `seq 1 $[sum-line]`;do   #打印空格
						echo -e " \c"	#删除换行
					done

					for starts in `seq 1 $[line*2-1]`;do  #打印星星数量
						echo -e "*\c" 	#删除换行
					done
					echo                #每打印完一行空格+星星之后 进行换行，打印下一行星星

				done

			自己做：
				#!/bin/bash
				#Descript:打印等腰三角形
				#date:2017-05-10
				sumline=10
				for line in `seq 1 $sumline`; do

				        for i in `seq 1 $[sumline-line]`;do
				                echo -e " \c"
				        done
				        for j in `seq 1 $[line*2-1]`;do
				                echo -e "*\c"
				        done
				        echo
				done







?		9、测试172.16.0.0/16网段中，哪个ip能上网
			思路：
				1、修改自己的IP
				2、ping 一个网站
				因为这种IP地址是加过策略的，可以上网
				3、ipconfig命令临时加IP地址以及网关
					或者ip addr命令

				4、ping -I 指定网卡
					选择多个网段，并行执行脚本
				5、

		10、打印国际象棋

			#!/bin/bash
			# Author: Maxie
			# Date: 2017-05-10-18:43:54
			# Description:打印国际象棋

			#给国际象棋的长和宽赋值
			a=8

			for i in `seq 1 $a`;do
			b=8
			        for  j in `seq 1 $b`;do
			                sum=$[i+j]
			                c=`expr $sum  % 2`
			                if [ $c -eq 0 ];then
			                        echo -ne "\033[41;1m  \033[0m"
			                else
			                        echo -en "\033[43;1m  \033[0m"
			                fi
			        done
			        echo
			done

		11、打印五星红旗











