bash 脚本编程：
	

'数组：'
	程序=指令+数据
		指令：代码
		数据：变量、文件

	变量：存储单个元素的内存空间
	数组：存储多个元素的连续的内存空间

		数组名：整个数组只有一个名字；
		数组索引：编号从0开始
			数组名[索引]：例如 var[0]=1   var[1]=2
			数组引用：
				${ARRAY_NAME[INDEX]}

		注意：
			bash-4...及之后的版本，支持自定义索引格式，而不仅仅是0,1,2....数字的格式		
				此类数组称之为“关联数组”


	声明数组：
		declare -a ARRAY_NAME：声明'索引数组'
		declare -A ARRAY_NAME：声明'关联数组'


	数组中元素的赋值方式：
		(1)一次只赋值一个元素：
			ARRAY_NAME[INDEX]=VALUE

			$ weekday[0]="Sunday"
			$ weekday[1]="Monday"
			$ echo ${weekday[1]}
			Monday
		(2)一次赋值全部元素：
			$ ARRAY_NAME=("VAL1" "VAL2" "VAL3" ...)

		(3)只赋值特定元素：
			$ ARRAY_NAME=([0]="VAL1" [3]="VAL3")

		(4)交互式数组值对赋值：
			$ read -a ARRAY

			注意：bash支持稀疏格式的数组

		'(5)关联数组赋值：'
			先声明再赋值：
			$ declare -A ARRAY_NAME
			$ ARRAY_NAME[NAME]=VALUE 
				[root@centos7 0516shell-homework]# declare -A world
				[root@centos7 0516shell-homework]# world[us]="United State"
				[root@centos7 0516shell-homework]# world[uk]="United Kingdom"
				[root@centos7 0516shell-homework]# echo ${world[uk]}
				United Kingdom
				[root@centos7 0516shell-homework]# echo ${#world[*]}
				2

	'关联数组：'

		第一步：
			declare -A ARRAY_NAME
		第二步：
			ARRAY_NAME=([index_name]="value1" [index_name2]="value2" ...)
				index_name：常用字符串即可（不要使用特殊符号）



	
	'引用数组中的元素：'
		${ARRAY_NAME[INDEX]}

			注意：引用时，只给数组名，表示引用下标为0的元素

		${ARRAY_NAME[*]}：引用数组中的所有元素
		${ARRAY_NAME[@]}：引用数组中的所有元素

	
	'数组元素切片：'（从指定位置开始，到指定位置结束）
		${ARRAY_NAME[@]:offset:number}
			offset：偏移量，要跳过的元素个数
			number：要取出的元素个数；省略number时，表示取偏移量之后的所有元素

			[root@centos7 array-shell]# echo ${name[@]}
			jerry maxie tom hello java
			[root@centos7 array-shell]# echo ${name[@]:2}
			tom hello java
			[root@centos7 array-shell]# echo ${name[@]:2:4}
			tom hello java
			[root@centos7 array-shell]# echo ${name[@]:1:3}
			maxie tom hello
			

	
	'数组的长度：（数组中元素的个数）'
		${#ARRAY_NAME[*]}
		或者
		${#ARRAY_NAME[@]}

		'数组中元素的长度：'
			${#NAME[INDEX]}

				[root@centos7 shell-Advanced]# name=("jerry" "maxie" "tom")
				[root@centos7 shell-Advanced]# echo ${#name[0]}
				5
				[root@centos7 shell-Advanced]# echo ${#name[2]}
				3


	
	'向非稀释数组中追加元素：'
		ARRAY_NAME[${#ARRAY_NAME[*]}]=VALUE
			[${#ARRAY_NAME[*]}]：代表当前数组内有多少个数（总和信息）

	
	'删除数组中的某个元素：'
		unset ARRAY_NAME[index]  ： 移除指定数组内指定的元素



	

	实例：
		1、生成十个随机数，并找出其中的最大值和最小值
			[root@centos7 array-shell]# cat max-and-min.sh
			#!/bin/bash
			# Author: Maxie
			# Date: 2017-05-17-18:41:00
			# Description: RANDOM , and take out the max or min.

			declare -a rand
			declare -i max=0
			declare -i min=0

			for i in {0..9};do
			    rand[$i]=$[RANDOM%100]
			    echo ${rand[$i]}
			    if [ $i -eq 0 ];then
			        min=${rand[$i]}
			    fi
			    [ ${rand[$i]} -gt $max ] && max=${rand[$i]}
			    [ ${rand[$i]} -lt $min ] && min=${rand[$i]}
			done

			echo
			echo "MAX: $max"
			echo "MIN: $min"

			unset min
			unset max
			unset rand

		2、生成10个随机数，从小到大排序
			#!/bin/bash
			# Author: Maxie
			# 用户输入数字并生成数组
			read -p "Enter a number more than four:" num
			for sb in `seq 0 $num`;do
			  avriables[$sb]=$[$[RANDOM%1000]]
			done
			#显示数组（可省）
			echo -e "${avriables[@]} \n------"
			#从左到右比较大小
			let index=$[$num-1]
			compare(){
			for i in `seq 0 $index`
			do
			  let j=$i+1
			  a=${avriables[$i]}
			  b=${avriables[$j]}
			      if  [[ $a > $b ]];then
			        temp=$a
			       avriables[$i]=$b
			       avriables[$j]=$temp
			      fi
			done
			}
			#循环n-1次，确保数组从小到大排列。
			for cycle in `seq 1 $num`
			do
			  compare
			done
			echo ${avriables[*]}

		3、定义一个数组，数组中的元素是/var/log目录下所有以.log结尾的文件；
			统计其下标为偶数的文件中的行数之和

			把所有以 .log 结尾的文件加入到数组中
			log_file=(/var/log/*.log)

			[root@centos7 array-shell]# bash eachlines.sh
			/var/log/boot.log
			/var/log/wpa_supplicant.log
			/var/log/Xorg.1.log
			/var/log/yum.log
			Lines: 3291

			[root@centos7 array-shell]# cat eachlines.sh
			#!/bin/bash
			# Author: Maxie
			# Date: 2017-05-17-19:09:18
			# Description:定义一个数组，数组中的元素是/var/log目录下所有以.log结尾的文件；统计其下标为偶数的文件中的行数之和

			declare -i lines
			declare -a files
			#一次赋值全部元素（命令行展开）
			files=(/var/log/*.log)

			#这里${#files[*]-1} 是因为数组下标是从0开始，所以数组有3个，那么就是0-2
			for i in `seq 0 ${#files[*]-1}`;do
			    if [ $[i%2] -eq 0 ];then
			        let lines+=$(wc -l  ${files[$i]} | cut -d" " -f1)
			        echo ${files[$i]}
			    fi
			done

			echo "Lines: $lines"

			unset lines
			unset files




'bash的内置字符串处理工具：'
	
	'字符串切片：'
		$(var:offset:number)  ： 取字符串的子串
		var：变量名
		offset：从哪儿开始取
		number：取到哪儿

			也可以使用 "-4 -2" 之类的，表示从右往左取
			或者
			"+1 +2"，表示从左往右取
				注意：使用这种方法时，:号后面有空格

			[root@centos7 array-shell]# name=jerry
			[root@centos7 array-shell]# echo ${name:2}
			rry
			[root@centos7 array-shell]# echo ${name:1}
			erry
			[root@centos7 array-shell]# echo ${name:1:3}
			err
			[root@centos7 array-shell]# echo ${name: -4}
			erry


	'基于模式取子串：'

		${var#*word}：
			其中'word'是指定的分隔符；
			功能：'自左而右'，查找var变量所存储的字符串中，'第一次'出现的word分隔符，删除字符串开头至此分隔符之间的所有字符；

		${var##word}：（相当于取路径基名的作用）
			其中'word'是指定的分隔符；
			功能：'自左而右'，查找var变量所存储的字符串中，'最后一次'出现的word分隔符，删除字符串开头至此分隔符之间的所有字符；


			实例： 此处以"/"为分隔符
				[root@centos7 array-shell]# echo ${mypath#*/}
				etc/init.d/functions
				[root@centos7 array-shell]# echo ${mypath##*/}
				functions

		${var%word*}： （相当于取路径工作目录的作用）
			其中'word'是指定的分隔符；
			功能：'自右而左'，查找var变量所存储的字符串中，'第一次'出现的word分隔符，删除此分隔符至字符串尾部所有字符；

		${var%%word*}： 
			其中'word'是指定的分隔符；
			功能：'自右而左'，查找var变量所存储的字符串中，'最后一次'出现的word分隔符，删除此分隔符至字符串尾部所有字符；

			实例：
				[root@centos7 array-shell]# echo ${mypath%/*}
				/etc/init.d
				[root@centos7 array-shell]# echo ${mypath%%/*}

			url=http://www.mcy95.com:80
				${url##*:}  --> 取出的是80，也就是端口号
				${url%%:*}  --> 取出的是http，也就是协议


	'查找替换：'
		${var/PATTERN/SUBSTI}：查找var所表示的字符串中，'第一次'被PATTERN所匹配到的字符串，将其替换为SUBSTI所表示的字符串 
			仅替换第一次出现
		${var//PATTERN/SUBSTI}：查找var所表示的字符串中，'所有'被PATTERN所匹配到的字符串，'全部'替换为SUBSTI所表示的字符串 


		行首行尾替换：
			${var/#PATTERN/SUBSTI}：查找var所表示的字符串中，'行首'被PATTERN所匹配到的字符串，'全部'替换为SUBSTI所表示的字符串 

			${var/%PATTERN/SUBSTI}：查找var所表示的字符串中，'行尾'被PATTERN所匹配到的字符串，'全部'替换为SUBSTI所表示的字符串 

		注意：PATTERN中使用glob风格的通配符

		实例：
			[root@centos7 array-shell]# userinfo="root:0:0:root admin:/root:/bin/chroot"
			[root@centos7 array-shell]# echo ${userinfo/root/ROOT}
			ROOT:0:0:root admin:/root:/bin/chroot
			[root@centos7 array-shell]# echo ${userinfo//root/ROOT}
			ROOT:0:0:ROOT admin:/ROOT:/bin/chROOT
			[root@centos7 array-shell]# echo ${userinfo/#root/ROOT}
			ROOT:0:0:root admin:/root:/bin/chroot
			[root@centos7 array-shell]# echo ${userinfo/%root/ROOT}
			root:0:0:root admin:/root:/bin/chROOT


	'查找删除：'
		${var/PATTERN}：以PATTERN为模式，查找var字符串中'第一次'的匹配，并删除之
		${var//PATTERN}：以PATTERN为模式，查找var字符串中'所有'的匹配，并删除之

		${var/#PATTERN}：以PATTERN为模式，查找var字符串中'行首'的匹配，并删除之；如果没有，则不做任何操作
		${var/%PATTERN}：以PATTERN为模式，查找var字符串中'行尾'的匹配，并删除之


	'字符大小写转换：'
		${var^^}：把var中的所有小写字母 转换为 大写
		${var,,}：把var中的所有大写字母 转换为 小写

		实例：
			[root@centos7 array-shell]# url="http://ww.mcy95.com:80"
			[root@centos7 array-shell]# echo ${url^^}
			HTTP://WW.MCY95.COM:80
			[root@centos7 array-shell]# myurl=${url^^}
			[root@centos7 array-shell]# echo $myurl
			HTTP://WW.MCY95.COM:80
			[root@centos7 array-shell]# echo ${myurl,,}
			http://ww.mcy95.com:80


	'变量赋值：'
		${var:-VALUE}：如果变量var为空，或未设置（没声明），那么返回VALUE；否则，返回var变量的值
			[root@centos7 array-shell]# echo $hi
			
			[root@centos7 array-shell]# echo ${hi:-HELLO}
			HELLO
			[root@centos7 array-shell]# hi=america
			[root@centos7 array-shell]# echo ${hi:-HELLO}
			america

		${var:=VALUE}：如果变量var为空，或未设置（没声明），那么返回VALUE，并将VALUE赋值给 var变量；否则，返回var变量的值
			[root@centos7 array-shell]# echo $hi

			[root@centos7 array-shell]# echo ${hi:=hello}
			hello
			[root@centos7 array-shell]# echo $hi
			hello

		${var:+VALUE}：如果变量var不为空，那么返回VALUE；
			[root@centos7 array-shell]# echo $hi
			hello
			[root@centos7 array-shell]# echo ${hi:+HELLO}
			HELLO

		${var:?ERROR_INFO}：如果var为空，或未设置，那么返回ERROR_INFO为错误提示；否则，返回var的值


	'变量间接调用：'
		a=b 
		b=2

		c=${!a}

		[root@centos7 array-shell]# a=b
		[root@centos7 array-shell]# b=2
		[root@centos7 array-shell]# c=${!a}
		[root@centos7 array-shell]# echo $c
		2


	'命令替换：'
		time=date
		echo $time
		eval $time

			[root@centos7 array-shell]# time=date
			[root@centos7 array-shell]# echo $time
			date
			[root@centos7 array-shell]# eval $time
			2017年 05月 18日 星期四 01:40:40 CST
			[root@centos7 array-shell]# date
			2017年 05月 18日 星期四 01:40:42 CST


'eval命令'
	将字符串转换为命令，并执行
	

	[root@centos7 array-shell]# type eval
	eval 是 shell 内嵌
	[root@centos7 array-shell]# help eval
	eval: eval [参数 ...]
	    将参数作为 shell 命令执行。

	    将 ARGs 合成一个字符串，用结果作为 shell 的输入，
	    并且执行得到的命令。

	    退出状态：
	    以命令的状态退出，或者在命令为空的情况下返回成功。



练习题：
	1、写一个脚本完成如下功能：
		(1)提示用户输入一个可执行命令的名称
		(2)获取此命令所依赖的所有库文件列表
		(3)复制命令至某目标目录(例如：mnt/sysroot，即把此目录当做根/)下的对应的路径中
		(4)复制此命令依赖到的所有库文件至目标目录下的对应路径下

		进一步：
			每次复制完成一个命令后，不要退出，而是提示用户继续输入要复制的其他命令，并重复完成
			直到，用户输入quit，才退出脚本

	2、写一个脚本：
		ping 命令查看172.16.1.1 - 172.16.67.1 范围内的所有主机是否在线；在线的显示为up，不在线的显示down
		并统计在线和不在线的各总数

		[root@centos7 array-shell]# cat ip-online.sh
		#!/bin/bash
		# Author:Maxie
		# 写一个脚本，提示请输入网络地址，如 172.16.0.0 ，判断输入的网段中主机在线状态

		read -p "请输入IP地址：" IP         # 说明信息IP

		# 定义变量名称=调用$IP获取的值 抽取 以.为分隔符 1-2的字符
		IpAddr=`echo $IP | cut -d. -f1-2`.
		sum=`echo $IP | cut -d. -f3`

		#定义在线主机总数和不在线总数
		declare -i uphosts=0
		declare -i downhosts=0

		addr_ping() {
		        	for i in `seq 0 10`;do
		            	if ping -c 1 -W 1 ${IpAddr}${1}.${i} &> /dev/null
		            	then
		                		echo -e "${IpAddr}${1}.${i}\tonline" | tee -a /root/online.log
		                        let uphosts+=1

		            	else
		           	    	echo -e "${IpAddr}${1}.${i}\toffline"  | tee  -a /root/offline.log
		                    let downhosts+=1
				    fi
		        	done
		}

		if echo $IP | egrep '\<([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\>' &>/dev/null;then
		    for I in `seq 0 $sum`;do
		        addr_ping $I
		        [ $I -eq $sum ] && break
		    done
		fi

		echo "在线主机数: $uphosts ;  不在线主机数: $downhosts"


		unset downhosts
		unset uphosts
		unset IpAddr
		unset sum
		unset IP




		方法二：（A,B,C类网络ping操作）
			#!/bin/bash
			#
			cping() {
				local i=1
				while [ $i -le 254 ]; do
					#statements
					if ping -W 1 -c 1 $1.$i &> /dev/null; then 
						echo "$1.$i is up"
				
					else 
						echo "$1.$i is down"
						
					let i++
				done
			}

			cping 172.16.1

			bping() {
				local j=0
				while [ $j -le 255 ];do 
					cping $1.$j
					let j++
				done
			}

			bping 172.16


			aping() {
				local k=0
				while [ $k -le 255 ];do
					bping $1.$k
					let k++
				done
			}

			aping 10

		提示用户输入一个IP地址或网路地址；获取其网络，并扫描其网段
		

		read -p "请输入IP地址：" IP         # 说明信息IP

		# 定义变量名称=调用$IP获取的值 抽取 以.为分隔符 1-2的字符
		IpAddr=`echo $IP | cut -d. -f1-2`.
		sum=`echo $IP | cut -d. -f3`

















