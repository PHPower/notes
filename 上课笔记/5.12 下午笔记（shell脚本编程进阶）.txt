5.10 下午笔记（shell脚本编程进阶）



while 循环：
	'条件为假时，结束循环'
	
	while CONDITION; do
		循环体
	done

	CONDITION：循环控制条件；进入循环之前，先做一次判断；
	每一次循环之后会再次做判断；条件为“true”，则执行一次循环；直到条件测试状态为“false”终止循环
	
	因此：CONDTION一般应该有循环控制变量；而此变量的值会在循环体不断地被修正
	
	进入条件：CONDITION为true
	退出条件：CONDITION为false


'练习题：'
	1、编写脚本，求100以内所有正奇数之和
	2、编写脚本，提示请输入网络地址，如192.168.0.0，判断输入的网段中主机在线状态，并统计在线和离线主机各多少
	3、编写脚本，打印九九乘法表
	4、编写脚本，利用变量RANDOM生成10个随机数字，输出这个10数字，并显示其中的最大值和最小值
	5、编写脚本，实现打印国际象棋棋盘
	6、后续六个字符串：efbaf275cd、4be9c40b8b、44b2395c46、f8c8873ce0、b902c16c8b、ad865d2f63是通过对随机数变量RANDOM随机执行命令：
		echo $RANDOM|md5sum|cut –c1-10 后的结果，请破解这些字符串对应的RANDOM值





until 循环： 
	'条件为真，结束循环'

	until CONDITION; do
		循环体
	done

	进入条件：CONDITION 为false
	退出条件：CONDITION 为true





循环控制语句 continue ：
	用于循环体中

	continue [N]：提前结束第N层的本轮循环，而直接进入下一轮判断；最内层为第1层（比如有2层循环，N=2，直接跳出循环）
	
		while CONDTIITON1; do
			CMD1
			...
			if CONDITION2; then
			continue
			fi
		CMDn
		...
		done


循环控制语句 break：
	用于循环体中

	break [N]：提前结束第N层循环，最内层为第1层
		
		while CONDTIITON1; do
			CMD1
			...
			if CONDITION2; then
				break
			fi
			CMDn
			...
		done 


循环控制 shift 命令：
	
	shift [n] : 
		shift 2  ：表示向后移2个参数
	
	用于将参量列表list 左移指定次数，缺省为左移一次。
	
	参量列表list 一旦被移动，最左端的那个参数就从列表中删除。while 循环遍历位置参量列表时，常用到shift
	
	./doit.sh a b c d e f g h
	
	./shfit.sh a b c d e f g h


	'用于：'一个脚本后跟的参数个数不相同，进行一个参数一个参数的执行任务，如果参数没有了，则不执行脚本



'创建无限循环：'(死循环)
	1、echo ':(){ :|:; };: &' | bash   #死机命令

	2、while true; do
		循环体
		done

	3、until false; do
		循环体
		done


特殊用法：
	
	while循环的特殊用法（'遍历文件的每一行'）：

	while read VARLIBALE; do
		循环体
	done < /PATH/FROM/SOMEFILE
	
	依次读取/PATH/FROM/SOMEFILE文件中的每一行，且将行赋值给变量"VARLIBALE"
		每行的信息，都赋值给  'VARLIBALE' 



	for循环的特殊用法：
		for ((控制变量初始化;条件判断表达式;控制变量的修正表达式)); do
			循环体
		done

		控制变量初始化：仅在循环代码开始运行时执行一次；
		控制变量的修正语句：每轮循环结束会先进行控制变量修正运算，而后再做条件判断；


		示例：100以内正整数之和
			vim for-count100.sh

			#!/bin/bash
			# Author: Maxie
			# Date: 2017-05-15-11:06:25
			# Description:100以内正整数之和
			declare -i sum=0
			for ((i=1;i<=100;i++));do
			        let sum+=$i
			done
			echo $sum

		示例：打印99乘法表
			vim 99chengfabiao.sh
			#!/bin/bash
			# Author: Maxie
			# Date: 2017-05-15-11:14:27
			# Description:99乘法表
			for ((i=1;i<=9;i++));do
			        for ((j=1;j<=i;j++));do
			                echo -e -n "${i}x${j}=$[i*j]\t"
			        done
			        echo
			done



函数：function

	过程式编程：代码重用
		模块化编程
		结构化编程

	命名的代码段：把一段独立功能的代码当作一个整体，并为之取一个名字；
		此即为'函数'

		注意：定义函数的代码段不会自动执行，只有在调用时执行；
			所谓调用函数，既是在代码中给定函数名即可
			函数名出现的任何位置，在代码执行时，都会被自动替换为函数代码

	'函数只有被调用时才会执行'

	'语法一'：
		function f_name {
			...函数体...
		}

	'语法二':
		f_name() {
			...函数体...
		}

	'函数的生命周期'： 
		每次被调用时创建，返回时中止（状态返回）。
			其状态返回结果为函数体中运行的最后一条命令的状态结果
			自定义状态返回值，需要使用 'return'，相当于脚本中的 exit 
			 return [0-255]
			 	0：成功
			 	1-255：失败

	'注意：'
		函数不能直接调用脚本参数，也就是 $1 $# $@ 之类的

	


		示例：给定一个用户名，取得用户的ID号和默认shell。
			$ vim id-shell.sh
			
			#!/bin/bash
			# Author: Maxie
			# Date: 2017-05-15-15:34:30
			# Description:take out the uid and shell of the user
			userinfo() {
			    if id $username &> /dev/null; then
			        grep "^$username\>" /etc/passwd | cut -d: -f3,7
			    else
			        echo "no such usuer"
			    fi
			}
			#开始调用函数
			username=$1
			userinfo
			
			username=$2
			userinfo


		示例2：服务脚本框架
			$ vim testsrv
			[root@centos7 function]# cat testsrv
			#!/bin/bash
			#
			# chkconfig: - 50 50
			# description: test service scrpti
			
			prog=$(basename $0)
			lockfile=/var/lock/subsys/$prog
			
			start() {
			    if [ -f $lockfile ];then
			        echo "$prog is running yet"
			    else
			        touch $lockfile
			        [ $? -eq 0 ] && echo "start $prog finshed"
			   fi
			}
			
			stop() {
			    if [ -f $lockfile ];then
			        rm -f $lockfile
			        [ $? -eq 0 ] && echo "stop $prog finshed"
			    else
			        echo "$prog is not running"
			    fi
			}
			
			status() {
			    if [ -f $lockfile ]; then
			        echo "$prog is running"
			    else
			        echo "$prog is stopped"
			    fi
			}
			
			usage() {
			    echo "Usage: $prog {start|stop|restart|status}}"
			}

			case $1 in
			start)
			    start ;;
			stop)
			    stop ;;
			restart)
			    stop
			    start
			    ;;
			status)
			    status ;;
			*)
				usage
				exit 1 ;;
			esac


	'函数返回值：'
		函数的执行结果返回值
			(1)使用echo 或  printf 命令进行输出
			(2)函数体中调用的命令的执行结果

		函数的退出状态码：
			(1)默认取决于函数体中执行的最后一条命令的退出状态码
			(2)自定义：return


	函数可以接受参数：
		传递参数给函数：
			在函数体当中，可以使用$1,$2,$#.... 引用传递给函数的参数；还是可以函数中使用$*或$@调用所有参数，$#引用传递的参数的个数
			在调用函数时，在函数名后面以空白符分隔给定参数列表即可，例如 testfunc arg1 arg2 arg3 ...
		例如：
			testfunc(arg1,arg2,arg3) {

			}

		'示例：创建10个用户，添加用户的功能使用函数实现，用户名作为参数传递给函数；'


	函数练习题：
		1、写一个脚本：
			使用函数实现ping一个主机来测试主机的在线状态；主机地址通过参数传递诶函数
			主程序：测试172.16.1.1-172.16.67.1范围内各主机的在线状态
				[root@centos7 0516shell-class]# cat ip-online.sh
				#!/bin/bash
				#user:Maxie
				# 写一个脚本，提示请输入网络地址，如 172.16.0.0 ，判断输入的网段中主机在线状态
				read -p "请输入IP地址的网络地址：" IP         # 说明信息IP
				# 定义变量名称=调用$IP获取的值 抽取 以.为分隔符 1-2的字符
				IpAddr=`echo $IP | cut -d. -f1-2`.
				sum=`echo $IP | cut -d. -f3`
				addr_ping() {
				                for i in `seq 0 5`;do
				                if ping -c 1 -W 1 ${IpAddr}${1}.${i} &> /dev/null
				                then
				                                echo -e "${IpAddr}${1}.${i}\tonline"
				                else
				                        echo -e "${IpAddr}${1}.${i}\toffline"
				                    fi
				                done
				}
				if echo $IP | egrep '\<([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\>' &>/dev/null;then
				    for I in `seq 1 $sum`;do
				        addr_ping $I
				        [ $I -eq $sum ] && break
				    done
				fi
				
				unset IP 
				unset sum 
				unset IpAddr


		2、写一个脚本：
			实现打印 n,n （例如4,3)乘法表；

			[root@centos7 0516shell-class]# cat nnchengfabiao.sh
			#!/bin/bash
			# Author: Maxie
			# Date: 2017-05-16-18:26:35
			# Description:print triangle and Trapezoid


			Multi() {
			    for ((i=1;i<=$1;i++));do
			        for ((j=1;j<=$2 && j<=i;j++));do
			            echo -e -n "${i}x${j}=$[${i}*${j}]\t"
			        done
			        echo
			    done
			}

			n1=$1
			n2=$2
			Multi $n1 $n2

			unset n1
			unset n2


		
		3、打印三角形，梯形

			[root@centos7 0516shell-class]# cat triangle.sh
			#!/bin/bash
			# Author: Maxie
			# Date: 2017-05-16-18:38:37
			# Description:打印三角形和梯形

			TRIANGLE() {
			    for ((line=1;line<=$1;line++));do
			        for ((space=1;space<=$[$1-line];space++));do
			            echo -n " "
			        done

			        for ((start=1;start<=$[line*2-1];start++));do
			            echo -n "*"
			        done
			        echo
			    done
			}

			sum_line=$1

			TRIANGLE $sum_line

			unset sum_line

			echo
			echo

			#print Trapezoid

			TRAPEZOID() {
			    for i in `seq $1 $2`;do
			        for j in `seq $i`;do
			            echo -n "* "
			        done
			        echo
			    done
			}

			_MIN=$2
			_MAX=$3

			TRAPEZOID $_MIN $_MAX

			unset _MIN
			unset _MAX




'函数递归：'
	函数直接或间接调用自身

	'阶乘函数：'
		实例：
			vim jiecheng.sh 
			#!/bin/bash
			#
			fact() {
				if [ $1 -eq 0 -o $1 -eq 1 ];then 
					echo 1
				else 
						echo $[$1*$(fact $[$1-1])]
				fi
			}

	'斐波那契数列：（每一项等于前两项的和）'
		实例：
			#!/bin/bash
			#
			fab() {
				if [ $1 -eq 1 ];then
						echo -n "1"
				elif [ $1 -eq 2 ];then 
						echo -n "1"
				else 
					echo -n "$[$(fab $[$1-1])+$(fab $[$1-2])]"
				fi
			}

			for i in `seq 1 $1`; do
					fab $i 
			done 
			echo


'变量作用域：'
	局部变量：
		作用域是函数的生命周期；在函数结束时被自动销毁

		定义局部变量的方法：
			local VARLIBALE=VALUE

	本地变量：作用域是运行脚本的shell进程的生命周期；因此，其作用范围为当前shell脚本程序文件










	



练习题：
	练习
		1、扫描/etc/passwd文件每一行，如发现GECOS字段为空，则填充用户名和单位电话为62985600，并提示该用户的GECOS信息修改成功。
			chfn命令：修改描述信息
			finger命令：显示描述信息
			
			[root@centos7 xunhuan]# cat change-description-of-user.sh
			#!/bin/bash
			# Author: Maxie
			# Date: 2017-05-12-19:59:48
			# Description:扫描/etc/passwd文件每一行，如发现GECOS字段为空，则填充用户名和单位电话为62985600，并提示该用户的GECOS信息修改成功。
			for i in `cat /etc/passwd | cut -d: -f5 | grep -n "^$" | cut -d: -f1`;do
			        name=`cat -n /etc/passwd | tr -d " " | tr "\t" " " | grep "^$i\>" | cut -d" " -f2 | cut -d: -f1`
			        chfn $name<< EOF &> /dev/null
			$name
			$name
			62985600
			62985600
			EOF
			        [ $? -eq 0 ] && echo "$name用户的GECOS修改成功" || (echo "$name用户的GECOS修改失败";exit 1)
			done
			[root@centos7 xunhuan]# pwd
			/root/mage-shell/xunhuan


		2、每隔3秒钟到系统上获取已经登录的用户的信息；
			如果发现用户hacker登录，则将登录时间和主机记录于日志/var/log/login.log中,并退出脚本

			cat logged.sh
			#!/bin/bash
			# Author: Maxie
			# Date: 2017-05-15-10:35:05
			# Description:每隔3秒钟到系统上获取已经登录的用户的信息；如果发现用户hacker登录，则将登录时间和主机记录于日志/var/log/login.log中,并退出脚本
			while true;do
			        if who | grep  "^hacker\>";then
			                break
			        fi
			        sleep 3
			done
			echo "`date +"%F-%T"` hacker is logged" &>> /tmp/login.log

		3、随机生成10以内的数字，实现猜字游戏，提示比较大或小，相等则退出
				[root@centos7 ~]# cat /root/wang-exam/caishuzi-10.sh
				#!/bin/bash
				# Author: Maxie
				# Date: 2017-04-13-16:39:51
				SUIJI=`expr ${RANDOM} % 10`
				i=0
				while true
				do
				let i++
				read -p "请输入你要猜的数:" NUM
				        #判断输入的数字是否是字符串，如果是，则直接跳出
				        if echo "$NUM" | grep -q '^[0-9]\+$'; then
				        echo "$NUM is number."  &> /dev/null
				        else
				        echo "$NUM is not number." &> /dev/null
				        echo "请输入数字，而非字符串！！！"
				        exit 2
				        fi
				        #判断输入的数字是否在1-10之间
				        [ ! $NUM -le 10 -o ! $NUM -gt 0 ] && echo "请输入1-10之间的数字" && exit 1
				        if [ $NUM -eq $SUIJI ]
				                then
				                        echo "恭喜你答对啦"
				                        echo "一共猜了${i}次"
				                        break
				                elif [ $NUM -gt $SUIJI  ]
				                        then
				                        echo "有点高了,请输入小一点的数字试试"
				                else
				                        echo "有点小了,请输入小一点的数字试试"
				        fi
				done


		4、用文件名做为参数，统计所有参数文件的总行数









