GNU awk

文本处理三工具：
	grep,sed,awk
	grep,egrep,fgrep：文本过滤工具；pattern
	sed：行编辑器
		模式空间、保持空间
	awk：报告生成器，格式化文本输出(UNIX先出现的)

	AWK：三个人 Aho,Weinberger,Kernighan --> New AWK , NAWK

	Linux：使用的是 GNU awk,也就是gawk

	[root@centos7 signal-shell]# which awk
	/usr/bin/awk
	[root@centos7 signal-shell]# ll /usr/bin/awk
	lrwxrwxrwx. 1 root root 4 3月  19 10:00 /usr/bin/awk -> gawk
	[root@centos7 signal-shell]# ll /usr/bin/gawk
	-rwxr-xr-x. 1 root root 428576 6月  10 2014 /usr/bin/gawk


	gawk - pattern scanning and processing language




'gawk命令：'
	语法：
		gawk [OPTIONS] 'program' FILE...
			'program：PATTERN{ACTION STATEMENTS}'
				ACTION STATEMENTS：动作语句，可以有多个；语句之间用分号分隔

	选项：
		-F fs：字段分隔符；fs指定输入分隔符，fs可以是字符串或正则表达式，如-F: 
			指明输入时用到的字段分隔符
		-v var=value：用于实现自定义变量
		-f FILENAME：直接从文件内读取执行的 'program'  



	'awk內建命令/变量：'
		1、print打印
			print item1,item2 ...

			要点：
				(1)逗号分隔符
				(2)输出的各item可以是字符串，也可以是数值；当前记录的字段、变量或awk的表达式
				(3)如果省略 item，通常相当于执行 print $0   打印整行字符
		2、变量：
			內建变量（无需加$)
				(1)FS：input field seperator，默认为空白字符
					指定分隔符：
						awk -v FS=":" '{print $1 }' /etc/passwd 

 				(2)OFS：output field seperator，默认为空白字符
 					指定输出分隔符：
 						awk -v FS=":" -v OFS=":" '{print $1}' /etc/passwd 
 				(3)RS：input record seperator，输入时的换行符
 					awk -v RS=" " '{print}' /etc/passwd

 				(4)ORS：output record seperator，输出时的换行符

 				(5)NF：number of field，字段数量
 					{print NF}：显示文本的每行字段数量
 					{print $NF}：显示每行末尾字段的信息

 				(6)NR：number of record，行数（默认输出每一行的行号），最后一行的行号即为这个文件的总行数
 					{print NR}

 				(7)FNR：files number of record，统计多个文件的行数，分别打印(各文件分别计数)
 					{print FNR}

 				(8)FILENAME：当前正在处理的文件名

 				(9) ARGC：命令行参数的个数
 					ARGV：数组，保存命令行中所给定的各参数

 						[root@centos7 ~]# awk 'BEGIN{print ARGC}' /etc/fstab
						2
						[root@centos7 ~]# awk 'BEGIN{print ARGV[0]}' /etc/fstab /etc/issue
						awk
						[root@centos7 ~]# awk 'BEGIN{print ARGV[1]}' /etc/fstab /etc/issue
						/etc/fstab


			自定义变量：
				(1)-v var=value ：自定义变量
					var：变量名，区分大小写
					value：值
				(2)在'program'中直接定义：
					[root@centos7 ~]# awk -v test="hello" 'BEGIN{print test}'
					hello
					[root@centos7 ~]# awk 'BEGIN{test="hello";print test}'
					hello
		
		3、printf 命令

			格式化输出：
				printf ”FORMAT“,item1,item2,....

				(1)FORMAT：必须给出
				(2)printf：不会自动换行，需要显示给出换行符: \n 
				(3)FORMAT中需要分别为后面的每个item指定一个格式化符号

					格式符：
						%c：显示字符的ACSII码
						%d，%i：显示十进制整数；d表示显示10进制，i表示整数
						%e，%E：显示为科学计数法数值显示
						%f：显示为浮点数  float
						%g，%G：以科学计数法或浮点形式显示数值
						%s：显示字符串
						%u：无符号整数
						%%：显示%自身

						实例：
							awk '{FS=":";printf "%s\n",$1}' /etc/passwd

							[root@centos7 ~]# awk -F: '{printf "Username:   %s\n",$1}' /etc/passwd
							Username:   root
							Username:   bin
							Username:   daemon
							Username:   adm

							[root@centos7 ~]# awk -F: '{printf "Username:  %s UID: %d \n",$1,$3}' /etc/passwd
							Username:   root UID:   0
							Username:   bin UID:   1
							Username:   daemon UID:   2

							'对位进行格式化'

					
					格式符的修饰符：
						#[.#]:
							第一个数字用来控制 显示的宽度
							第二个数字用来表示 小数点的精度
							%3.1f

							默认为右对齐

							[root@centos7 ~]# awk -F: '{printf "Username: %10s  UID: %d\n",$1,$3}' /etc/passwd
							Username:       root  UID: 0
							Username:        bin  UID: 1
							Username:     daemon  UID: 2

						- ：减号表示左对齐

							root@centos7 ~]# awk -F: '{printf "Username: %-10s  UID: %d\n",$1,$3}' /etc/passwd
							Username: root        UID: 0
							Username: bin         UID: 1
							Username: daemon      UID: 2

						+：加号表示显示数值的符号（正数负数）


		4、操作符

			算数操作符：
				x+y，x-y，x*y，x-y，x/y，x^y，x%y
				-x
				+x：转换为数值

			字符串操作符：没有符号的操作符(字符串连接)

			赋值操作符：
				=，+=，-=，*=，/=，%=，^=
				++，--

			比较操作符：
				>,>=,<,<=,!=不等于,==等值比较

			模式匹配符：
				~：左侧字符串是否匹配右侧的模式
					可以使用 "regular expression" 这样来表示

				！~：左侧字符串是否不匹配右侧的模式

			逻辑操作符：
				&&：与
				||：或
				! ：非

			函数调用：
				function_name() ：进行调用函数
				或者
				function_name(arg1,arg2,arg3)


			'条件表达式：'
				selector? if-true-expression:if-false-expression ：条件表达式
					selector：条件表达式，后面跟 ? 号
					如果条件为真，则执行 if-true-expression
					否则，执行 if-false-expression

				实例：
					[root@centos7 ~]# awk -F: '{$3>=1000?usertype="Common User":usertype="System User";printf "Username: %15s %s\n",$1,usertype}' /etc/passwd
					Username:            root System User
					Username:             bin System User
					Username:          daemon System User

					$3>=1000?  ：以 : 为分隔符，判断第三个字段的值是否大于1000
					如果为真，执行变量赋值： usertype="Common User"
					否则，执行变量赋值：usertype="System User"


		5、PATTERN
			类似于地址定界的功能

			(1) empty（匹配每一行）:空模式

			(2) /regular expression/：能够其中基本正则表达式匹配到的行，对其进行处理，未匹配到的行不做任何操作
				仅能够处理能够被此处的模式匹配到的行



				如果想对其中模式匹配到的取反，可以使用：
				!/regular expression/ 进行取反操作

					[root@centos7 ~]# awk '/^UUID/{print $1}' /etc/fstab
					UUID=ab341a4b-a908-47c0-9553-bcf79b05ce43
					UUID=531365c9-8be5-40a1-bd9e-9bc980d21cda
					....
					[root@centos7 ~]# awk '!/^UUID/{print $1}' /etc/fstab

					#
					#
					#
					...




			(3) relational expression：关系表达式
				结果有真，有假；结果为”真“，才会处理
				真表示：结果为非0值，或者非空字符串；0表示假

					[root@centos7 ~]# awk -F: '$3>=1000{print $1,$3}' /etc/passwd
					nfsnobody 65534
					hacker 1000
					maxie1 1001

					其中 $3>=1000 就是关系表达式，如果为真才会打印 $1 $3
					'注意：' 
						这里的{print $1 $3} 之前没有分号，因为这是一个语句

					[root@centos7 ~]# awk -F: '$NF=="/bin/bash"{print $1,$NF}' /etc/passwd
					root /bin/bash
					hacker /bin/bash
					maxie1 /bin/bash
					您在 /var/spool/mail/root 中有新邮件
					[root@centos7 ~]# awk -F: '$NF~"/bin/bash"{print $1,$NF}' /etc/passwd
					root /bin/bash
					hacker /bin/bash
					maxie1 /bin/bash
					[root@centos7 ~]# awk -F: '$NF~/bash$/{print $1,$NF}' /etc/passwd
					root /bin/bash
					hacker /bin/bash
					maxie1 /bin/bash

					这里 $NF 表示的是 每一行最后一个字段的值

					'注意：'在使用模式匹配时，要在前后加上 // 符号


			(4)line ranges ：行范围（地址定界）
				startline,endline：
				/pattern1/,/pattern2/这样来定义
				或者
				(NR>=number&&NR<=number)这样的格式来定义
					NR：每一行的行号

				注意：不支持直接给出数字的方式

				[root@centos7 ~]# awk -F: '/^b/,/^sync/{print $1}' /etc/passwd
				bin
				daemon
				adm
				lp
				sync

				[root@centos7 ~]# awk -F: '(NR<=10){print $1}' /etc/passwd
				root
				bin
				daemon
				adm
				lp
				sync
				shutdown
				halt
				mail
				operator
				[root@centos7 ~]# awk -F: '(NR<=10&&NR>=2){print $1}' /etc/passwd
				bin
				daemon
				adm
				lp
				sync
				shutdown
				halt
				mail
				operator

		
			(5)BEGIN/END模式：

				BEGIN{}：仅在开始处理文件中的文本之前执行一次（可以打印表头）
				END{}：仅在文本处理完成之后执行一次

				[root@centos7 ~]# awk -F: 'BEGIN{print "username        uid      \n----------------------"} {printf "%-15s %s\n",$1,$3} END{print "======================="}' /etc/passwd
				username        uid
				----------------------
				root            0
				bin             1
				daemon          2
				....
				hacker          1000
				maxie1          1001
				dhcpd           177
				=======================


		6、常用的 ACTION：
			(1)expressions：表达式;  $1>1000  $3~/bash/ 之类的
			(2)control statements：控制语句;   	if while 等等
			(3)compound statements：组合语句; 	
			(4)input statements：输入语句;
			(5)output statements：输出语句;

		7、控制语句

			(1) if 语句
				单分支
					if(condition) {statements}
				双分支
					if(condition) {statements} else {statements}
			
			(2) while 语句
					while(condition) {statements}
			
			(3) do while 语句
					do {statements} while{condition}
			
			(4) for 语句
					for(expr1;expr2;expr3) {statements}

			(5) break 

			(6) continue

			(7) delete array[index]  ： 从数组中指定一个元素并删除
				delete array		：删除整个数组

			(8) exit 


'awk中各控制语句的用法：'

	1、if-else 语句

		语法：
			if(condition) statement  [else statement]	 			#如果有多个语句 则是 {statements}

		实例：
			[root@centos7 ~]# awk -F: '{if($3>=1000) print $1,$3}' /etc/passwd
			nfsnobody 65534
			hacker 1000
			maxie1 1001
			[root@centos7 ~]# awk -F: '{if($3>=1000) {print $1,$3} else {print "system user"}}' /etc/passwd


			对一行中字段数量大于6的，进行打印 print $0，也就是匹配的整行
			[root@centos7 ~]# awk '{if(NF>6) print}' /etc/fstab
			# Created by anaconda on Sun Mar 19 02:00:07 2017
			# Accessible filesystems, by reference, are maintained under '/dev/disk'
			# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info

			[root@centos7 ~]# df -h | awk -F"%" '/^\/dev/{print $1}' | awk 'BEGIN{ print "Disk full\n------------"}{if($NF>=15) print $1}'
			Disk full
			------------
			/dev/sda3
			/dev/sda1

			先对设备进行取出，并以%为分隔符，取出$1的值；再对$NF,也就是最后一个字段的值进行判断


		使用场景：对awk取得的整行或某个字段做条件判断

			

	2、while 循环

		语法：
			while(condition) statement
			条件为真，进入循环
			条件为假，退出循环


		使用场景：对一行内的多个字段 逐一/类似 处理时使用； 对数组中的各元素逐一处理时使用


		实例：
			'对每一行的每一个字段进行计算字段长度'
			[root@centos7 ~]# awk '/^[[:space:]]*linux16/{i=1;while(i<=NF) {print $i,length($i); i++}}' /etc/grub2.cfg
			linux16 7
			/vmlinuz-3.10.0-514.el7.x86_64 30
			root=UUID=ab341a4b-a908-47c0-9553-bcf79b05ce43 46
			ro 2
			rhgb 4
			quiet 5

			
			'只有当一个字段内字符长度大于7时，才打印'
			[root@centos7 ~]# awk '/^[[:space:]]*linux16/{i=1;while(i<=NF) {if(length($i)>=7) {print $i,length($i)} i++}}' /etc/grub2.cfg
			linux16 7
			/vmlinuz-3.10.0-514.el7.x86_64 30
			root=UUID=ab341a4b-a908-47c0-9553-bcf79b05ce43 46
			LANG=en_US.UTF-8 16


	3、do while 循环（至少会执行一次循环体）
		语法：
			do statement while(condition)

	4、for 循环
		语法：
			for(expr1;expr2;expr3) statement

				expr1：控制变量初始化
				expr2：条件判断
				expr3：控制变量数值修正表达式

				for(variable assignment;condition;iteration process) {for-body}

		实例：
			'对每一行的每一个字段进行计算字段长度'
			[root@centos7 ~]# awk '/^[[:space:]]*linux16/{for(i=1;i<=NF;i++) {print $i,length($i)}}' /etc/grub2.cfg
			linux16 7
			/vmlinuz-3.10.0-514.el7.x86_64 30
			root=UUID=ab341a4b-a908-47c0-9553-bcf79b05ce43 46
			ro 2
			rhgb 4

			[root@centos7 ~]# awk '/^[[:space:]]*linux16/{for(i=1;i<=NF;i++) {if(length($i)>=7) {print $i,length($i)} }}' /etc/grub2.cfg
			linux16 7
			/vmlinuz-3.10.0-514.el7.x86_64 30
			root=UUID=ab341a4b-a908-47c0-9553-bcf79b05ce43 46
			LANG=en_US.UTF-8 16


		特殊用法：
			能够遍历数组中的元素

			语法：
				for(var in array) {for-body}

				若要遍历数组中的每个元素，要使用for循环：
					for(var in array) {for-body}

					[root@centos7 ~]# awk 'BEGIN{weekdays["mon"]="Monday";weekdays["tue"]="Tuesday";for(i in weekdays) {print weekdays[i]}}'
					Tuesday
					Monday


	5、switch 语句
		多分支if语句

		语法：
			switch(expression) {case VALUE1 or /REGEXP: statement1; case VALUE2 or /REGEXP2: statement2; ....; default: statement}

			switch后面跟条件表达式；
				如果满足 VALUE1 或者 REGEXP（表达式）  ，则执行 statement1
				如果满足 VALUE2 。。。				，则执行 statement2

				case 后面可以跟 值 或者 表达式 ，但不能两个同时判断

			如果都不满足，执行 default中的 statement

		实例：

	6、break 和 continue

		break [n] （跳出n层循环）

		continue （提前结束这一轮循环，进入下一轮）


	7、next （控制awk的内生循环）
		
		提前结束对本行的处理而直接进入下一行

		实例：
			打印UID为偶数的：

			[root@centos7 ~]# awk -F: '{if($3%2==1) next;print $1,$3}' /etc/passwd
			root 0
			daemon 2
			lp 4
			shutdown 6
			[root@centos7 ~]# awk -F: '{if($3%2!=0) next;print $1,$3}' /etc/passwd
			root 0
			daemon 2
			lp 4
			shutdown 6


	8、array数组：

			关联数组：array[index-expression]

				index-expression：
					(1)可使用任意字符串;字符串需要使用双引号
					(2)如果某数组元素不存在，在引用时，awk 会自动创建此 元素，并将其初始化为”空串“

					若要判断数组中是否存在某元素，要使用”index in array“格式进行：

					weekdays["mon"]="Monday"

				[root@centos7 ~]# awk 'BEGIN{weekdays["mon"]="Monday";weekdays["tue"]="Tuesday";print weekdays["tue"]}'
				Tuesday
				[root@centos7 ~]# awk 'BEGIN{weekdays["mon"]="Monday";weekdays["tue"]="Tuesday";print weekdays["mon"]}'
				Monday
				[root@centos7 ~]# awk 'BEGIN{weekdays[0]="Monday";weekdays[1]="123";print weekdays[0]}'
				Monday
				[root@centos7 ~]# awk 'BEGIN{weekdays[0]="Monday";weekdays[1]="123";print weekdays[1]}'
				123


				若要遍历数组中的每个元素，要使用for循环：
					for(var in array) {for-body}

					[root@centos7 ~]# awk 'BEGIN{weekdays["mon"]="Monday";weekdays["tue"]="Tuesday";for(i in weekdays) {print weekdays[i]}}'
					Tuesday
					Monday

					注意：var 会遍历 array 的每个索引，但顺序可能不同


			实例：
				1、统计 netstat -tnl 中state状态有几种，各出现了几次
				
					[root@centos7 ~]# netstat -tnl | awk '/^tcp\>/{state[$NF]++}END{for(i in state) {print i,state[i]}}'
					LISTEN 4

				2、统计 httpd 的 /var/log/httpd/access_log 文件中 ip地址的访问次数

					[root@centos7 ~]# awk '{ip[$1]++}END{for(i in ip) print i,ip[i]}' /var/log/httpd/access_log
					172.16.1.122
					172.16.1.11
					::1

			练习：
				1、统计/etc/fstab文件中每个单词出现的次数	
					[root@centos7 ~]# awk '{for(i=1;i<=NF;i++) word[$i]++}END{for(j in word) print j,word[j]}' /etc/fstab
					Mar 1
					man 1

				2、统计/etc/fstab文件中每个文件系统出现的次数
					[root@centos7 ~]# awk '/^UUID/{fs[$3]++}END{for(i in fs) print i,fs[i]}' /etc/fstab
					swap 1
					ext3 1
					xfs 3


	9、函数：

		(1)内置函数
			数值处理：
				rand()：返回0和1之间一个随机数（小数） 生成了就不会在变（当前终端）

			字符串处理：
				length([s])：返回指定字符串的长度
				sub(r,s,[t])：以 r 表示的模式来查找 t所表示的字符串中的匹配的内容并将其第一次出现替换为 s 所代表的内容
				gsub 全局替换 等同于 sub 

				split(s,a[,r])：以 r 为分隔符 切割字符 s ，并将切割后的结果保存至 a 所表示的数组中。

				实例：
					统计当前 通过tcp协议连接到本机上的ip地址以及访问次数

					[root@centos7 ~]# netstat -tan | awk '/^tcp\>/{split($5,ip,":") count[ip[1]]++}END{for(i in count) print i,count[i]}'
					172.16.1.11 2
					0.0.0.0 4




		(2)自定义函数



	总结：
		awk 的 'program' 中：
			如果是 '1214141' 这样的数字非空字符串，即表示为真，会打印
			如果是 'i=1'	这样的表达式为1，不为0，也为真，会打印
			如果是 'p' 这样的字母，表示为假，不会打印




练习题：
	1、统计当前连接到本机的IP地址和连接次数： 取前3
		$ netstat -tn | awk '/^tcp/{print $5}' | cut -d: -f1 | sort  | uniq -c | sort -nr | head -3
     	15 172.16.1.121
      	2 172.16.1.11

    2、查看httpd 的日志文件，统计访问的IP地址和次数
    	[root@centos7 ~]# cat /var/log/httpd/access_log | awk '{ip[$1]++}END{for(i in ip) {print i,ip[i]}}' | sort -k 2  -nr
		172.16.1.121 256
		172.16.1.11 79
		::1 78
		172.16.1.122 1


		sort -k #：表示以第#列来排序
			 -t：指定字符为排序的分隔符

	3、使用awk 取出 1-10之间的奇数与偶数
		[root@centos7 ~]# seq 10 | awk 'i=!i'
		1
		3
		5
		7
		9
		[root@centos7 ~]# seq 10 | awk '!(i=!i)'
		2
		4
		6
		8
		10

		原理如下：
			[root@centos7 ~]# seq 10 | awk '{i=!i;print i}'
			1
			0
			1
			0
			1
			0
			1
			0
			1
			0

		因为在 i 在初始的时候是 0 ，为假 不打印

		[root@centos7 ~]# seq 10 | sed -n '2~2p'
		2
		4
		6
		8
		10
		[root@centos7 ~]# seq 10 | sed -n '1~2p'
		1
		3
		5
		7
		9

	

	4、 netstat -tna 查看连接到本机IP地址和状态 

		[root@centos7 ~]# netstat -tan | awk  -v FS='[[:space:]:]+' '$(NF-2)~/\.+/{if (1!=NR) IpState[$6"  "$NF]++}END{for(i in IpState) {print i,IpState[i]}}'
		172.16.1.11  ESTABLISHED 2






















