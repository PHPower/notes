6.23 (Mage Keepalived)



'HA Cluster：'

	'集群类型：LB（lvs/nginx（http/upstream, stream/upstream））、HA、HP'
	
		SPoF: Single Point of Failure
		
	系统可用性的公式：A=MTBF/（MTBF+MTTR）
	'系统可用性的公式：A=平均无故障时间/(平均无故障时间+平均修复时间)'
		1、提高平均无故障时间
		2、冗余策略

		Failover：故障切换，即某资源的主节点故障时，将资源转移至其它节点的操作；
			'以nginx代理为例：'
				1、接收请求的IP地址
				2、运行nginx的进程
			再执行完Failover之后，要将失效的服务器修复上线、或者增加新的服务器替代失效的服务器

		Failback：故障移回，即某资源的主节点故障后重新修改上线后，将转移至其它节点的资源重新切回的过程； 
		
	

		(0,1), 95%
		几个9（指标）: 99%, ..., 99.999%，99.9999%；
			99%： %1, 99.9%， 0.1%
	

		系统故障：
			硬件故障：设计缺陷、wear out、自然灾害、……
			软件故障：设计缺陷、
			
		提升系统高用性的解决方案之降低MTTR：
		
			手段：冗余（redundant）

			active/passive（主备），active/active（双主） 
				active --> HEARTBEAT --> passive 
				active <--> HEARTBEAT <--> active
				
		高可用的是“服务”：
			HA nginx service：
				vip/nginx process[/shared storage]
				
				资源：组成一个高可用服务的“组件”；
				
				(1) passive node的数量？
				(2) 资源切换？

		messaging layer(heartbeat layer) --> 传输心跳信息的层
		cluster resource manager(crm)	 --> 集群资源管理层(依赖于messaging layer)
		local resource manager	(lrm)	 --> 本地资源管理器(把需要实现的功能交给一个自定义脚本，用户可以自定义) --> RA (resource agent)
		
		'集群节点一般2个以上，奇数个节点'
			当需要判断集群节点是否挂掉了，需要使用仲裁节点来判断。

			当发生网路分区(Network Partition)：
				集群节点之间可能找不到对方，这时就需要将节点少的网络分区，干掉，将其断电；
				节点多的成为集群节点

		
			shared storage：
				NAS：文件共享服务器；
				SAN：存储区域网络，块级别的共享；
				
			'Network partition：网络分区'
			!!!	'隔离设备：' 
					node：STONITH = Shooting The Other Node In The Head
						将其他节点爆头；避免两台机器同时对共享存储(SCSI,SAN-->块级别的)的某个文件进行写入，造成脑裂

					资源：fence(隔离)。
						只隔离对关键数据的访问/使用权限
					
				quorum：	法定代表数，哪一方能够代表集群
					with quorum： > total/2
					without quorum: <= total/2
				
				TWO nodes Cluster？
					辅助设备：ping node, quorum disk;

				paxos：Paxos算法
				raft 算法：比paxos更简洁、http://www.infoq.com/cn/articles/raft-paper

				N/M模型：N个节点,M个资源;当节点挂掉，资源移动到备用节点
					N>M ,  一般 M= N-1

				N/N模型：N个节点N个资源


	'HA Cluster实现方案:'    keepalived 、 heartbeat 、 corosync
		vrrp协议的实现
			keepalived
		ais：完备HA集群
			RHCS（cman）
			heartbeat --> corosync(将要替代heartbeat)


	'keepalived：'
		'使用范围：高可用 IPVS' --> 为ipvs提供RS健康状态检查

		
		vrrp协议：Virtual Redundant Routing Protocol(虚拟路由冗余协议)
			'把某几个网卡组织成一个集群'

			术语：
				虚拟路由器：Virtual Router
				虚拟路由器标识：VRID(0-255)
				物理路由器：
					master：主设备
					backup：备用设备
					priority：优先级 --> IP地址的大的优先级高
				VIP：Virtual IP 
				VMAC：Virutal MAC (00-00-5e-00-01-VRID)
					VRID:2位16进制 --> 256
					GraciousARP:免费ARP，全网广播(自问自答的ARP广播请求)
						使客户端更新MAC缓存信息
		

			'通过虚拟路由器达到 --> 通告：心跳，优先级等；周期性'(心跳信息传输层)

			'工作模式'：抢占式，非抢占式；
				主节点出现网卡故障时，会自动降低节点的优先级；使得备用节点比主节点优先级高，执行抢占

			
			安全工作模型：
				'认证方式：'
				1、无认证
				2、简单字符认证
				3、MD5(Keepalived不支持)

					
			'工作模式：'
				主/备：单虚拟路径器；
				主/主：主/备（虚拟路径器1），备/主（虚拟路径器2）

				双主模型：需要有两个IP地址，互为主备

			
			通知心跳：组播(多播)

				

		keepalived:
			'vrrp协议的软件实现，原生设计的目的为了高可用ipvs服务：'
				1、vrrp协议完成地址流动；
				2、为vip地址所在的节点生成ipvs规则（在配置文件中预先定义）；
				3、为ipvs集群的各RS做健康状态检测；
		!!!	!!!	4、基于脚本调用接口通过执行脚本完成脚本中定义的功能，进而影响集群事务；
					对其他服务进行高可用的实现
				

			组件：
				'核心组件：'
					watch dog：监控checker和vrrp stack --> 通常是硬件设备
					vrrp stack：vrrp协议实现
					ipvs wrapper:生成规则
					checkers：健康状态监测 --> TCP / HTTP / SSL 


				控制组件：配置文件分析器
				IO复用器
				内存管理组件
				








		'HA Cluster的配置前提：'
			(1) 各节点时间必须同步；
				ntp, chrony

				$ ntpdate 172.16.0.1
				$ systemctl restart chronyd.service 
				$ systemctl enable chronyd

			(2) 确保iptables及selinux不会成为阻碍；

				$ iptables -F
				$ systemctl stop firewalld

			(3) 各节点之间可通过主机名互相通信（对KA并非必须）；
				'建议使用/etc/hosts文件实现； '

				$ vim /etc/hosts 
				172.16.3.20 node1
				172.16.3.30 node2

			(4) 各节点之间的root用户可以基于密钥认证的ssh服务完成互相通信；（并非必须）
				
				$ ssh-copy-id -i .ssh/id_rsa.pub root@172.16.3.20


			(5) 查看网卡是否支持MULTICAST(多播通信)，并开启

				D类(多播地址)：224.0.0.0 -- 239.255.255.255

				$ ip link set multicast on dev eth0 	#开启多播功能
				$ ifconfig #查看网卡上是否有 NULTICAST ，是否支持多播


		'keepalived安装配置：'
			CentOS 6.4+随base仓库提供；

			
			程序环境：
				主配置文件：/etc/keepalived/keepalived.conf
				主程序文件：/usr/sbin/keepalived
				Unit File：keepalived.service
				Unit File的环境配置文件：/etc/sysconfig/keepalived
				
			配置文件组件部分：
				'TOP HIERACHY：顶级配置段三部分'
					'GLOBAL CONFIGURATION'全局配置段
						Global definitions：全局定义
						Static routes/addresses：静态路由
					
					'VRRPD CONFIGURATION：vrrp协议配置段'
						VRRP synchronization group(s)：vrrp同步组；
							确保多个虚拟路由器在同一个节点上
							floating IP：IP地址漂移

						VRRP instance(s)：每个vrrp instance即一个vrrp路由器；
							vrrp实例
					
					'LVS CONFIGURATION'：LVS配置段
						Virtual server group(s)
						Virtual server(s)：ipvs集群的vs和rs；
			
			单主配置示例：
				! Configuration File for keepalived

				global_defs { 									'#全局配置'
					notification_email {
						root@localhost 							'收件人'
					}
					notification_email_from keepalived@localhost '发件人'
					smtp_server 127.0.0.1 						'默认本机邮件服务开启，25端口'
					smtp_connect_timeout 30
					router_id node1								'#表示物理ID'
					vrrp_mcast_group4 224.0.100.19 				'#vrrp多播地址 (需要修改，当在一个教室内)'
				}

				vrrp_instance VI_1 { 					'vrrp实例名只要与其他不同即可'
					state BACKUP 						'主/备模式'
					interface eno16777736 				'vrpp地址配置在哪个网卡接口上'
					virtual_router_id 14 				'虚拟路由器标识(0-255)'
					priority 98 						'优先级'
					advert_int 1 						'每隔多长时间通告'
					authentication { 					'通告时的认证'
						auth_type PASS
						auth_pass 571f97b2 				'最多8位'
					}
					virtual_ipaddress { 				'vip的地址'
						10.1.0.91/16 dev eno16777736 	''
					}
					nopreempt 							'非抢占模式(默认工作在抢占模式)'


				}			
			
			
			配置语法：
				配置虚拟路由器：
					vrrp_instance <STRING> {
						....
					}
					
					专用参数：
						 state MASTER|BACKUP：当前节点在此虚拟路由器上的初始状态；只能有一个是MASTER，余下的都应该为BACKUP；
						 interface IFACE_NAME：绑定为当前虚拟路由器使用的物理接口；
						 virtual_router_id VRID：当前虚拟路由器的惟一标识，范围是0-255；
						 priority 100：当前主机在此虚拟路径器中的优先级；范围1-254；
						advert_int 1：vrrp通告的时间间隔；
						authentication {
							auth_type AH|PASS
							auth_pass <PASSWORD>
						}
						virtual_ipaddress {
							<IPADDR>/<MASK> brd <IPADDR> dev <STRING> scope <SCOPE> label <LABEL>
							192.168.200.17/24 dev eth1
							192.168.200.18/24 dev eth2 label eth2:1
						}
						 track_interface {
							eth0
							eth1
							...
						}
						配置要监控的网络接口，一旦接口出现故障，则转为FAULT状态；
						
						nopreempt：定义工作模式为非抢占模式；
						preempt_delay 300：抢占式模式下，节点上线后触发新选举操作的延迟时长；
						
						'定义通知脚本：'
							notify_master <STRING>|<QUOTED-STRING>：当前节点成为主节点时触发的脚本；
							notify_backup <STRING>|<QUOTED-STRING>：当前节点转为备节点时触发的脚本；
							notify_fault <STRING>|<QUOTED-STRING>：当前节点转为“失败”状态时触发的脚本；
							
							notify <STRING>|<QUOTED-STRING>：通用格式的通知触发机制，一个脚本可完成以上三种状态的转换时的通知；



			'通知脚本的使用方式：'
				示例通知脚本：
					#!/bin/bash
					#
					contact='root@localhost'

					notify() {
						mailsubject="$(hostname) to be $1, vip floating"
						mailbody="$(date +'%F %T'): vrrp transition, $(hostname) changed to be $1"
						echo "$mailbody" | mail -s "$mailsubject" $contact
					}

					case $1 in
					master)
						notify master
						;;
					backup)
						notify backup
						;;
					fault)
						notify fault
						;;
					*)
						echo "Usage: $(basename $0) {master|backup|fault}"
						exit 1
						;;
					esac			
					
				脚本的调用方法：
					notify_master "/etc/keepalived/notify.sh master"
					notify_backup "/etc/keepalived/notify.sh backup"
					notify_fault "/etc/keepalived/notify.sh fault"			
		














		'实验过程：'
			1、安装keepalived(两台节点)
				$ yum install keepalived -y

			2、修改配置文件：
				$ cat /etc/keepalived/keepalived.conf
				! Configuration File for keepalived

				global_defs {
				   notification_email {
					root@localhost
				   }
				   notification_email_from keepalived@localhost
				   smtp_server 127.0.0.1
				   smtp_connect_timeout 30
				   router_id test-1
				   vrrp_mcast_group4 224.3.1.10
				}

				vrrp_instance VI_1 {
				    state MASTER
				    interface eth0
				    virtual_router_id 51
				    priority 100
				    advert_int 1
				    authentication {
				        auth_type PASS
				        auth_pass Mcy1995
				    }
				    virtual_ipaddress {
					172.16.3.100/16 dev eth0 label eth0:0
				    }
				}

			3、发送配置文件到另一台节点：
				$ scp /etc/keepalived/keepalived.conf

				node2节点配置： 只修改以下信息
				
				global_defs {
				   router_id test-2					#这里要修改
				}

				vrrp_instance VI_1 {
				    state BACKUP 					#修改为备用节点
				    priority 98 					#优先级要修改
				}


			4、启动服务，查看状态
				$ systemctl start keepalived.service 
				$ systemctl status keepalived.service 

			5、查看多播地址通告：
				$ tcpdump -i eth0 -nn host 224.3.1.10      #host后跟多播地址


			'6、配置两个虚拟路由器，2个虚拟ip，实现互为主备(如果要实现对外访问，负载均衡 --> 在DNS的A记录上对同一个域名配置2个IP地址即可)'
				在每台NODE节点的keepalived的配置文件上进行配置：
				'NODE1:'
					$ vim /etc/keepalived/keepalived.conf 
					添加一个vrrp_instance实例：
					vrrp_instance VI_2 {
						state BACKUP
						interface eth0 
						virtual_router_id 52 			#这里ID要与之前的VI_1的ID不同
						priority 98
						advert_int 1
						authentication {
							auth_type PASS 
							auth_type Mcy9586  			#密码要与VI_1的密码不同
						}
						virtual_ipaddress {
							172.16.3.200/16 dev eth0 	#这里就不需要配置网卡别名了，需要把之前VI_1的关于别名的也删除
						}
					}

				'NODE2:'
					$ vim /etc/keepalived/keepalived.conf
					vrrp_instance VI_2 {
						state MASTER 					#在NODE2上 VI_2要设置成主 MASTER
						interface eth0 
						virtual_router_id 52 			#这里ID要与之前的VI_1的ID不同
						priority 100  					#优先级要比BACKUP高
						advert_int 1 
						authentication {
							auth_type PASS 
							auth_type Mcy9586 			
						}
						virtual_ipaddress {
							172.16.3.200/16 dev eth0 	#这里就不需要配置网卡别名了，需要把之前VI_1的关于别名的也删除
						}
					}

			7、配置完成后，重启服务(有可能出现无法重启，或失败的情况，需要停止服务，再开启)
				$ systemctl retart keepalived

				$ tcpdump -i eth0 -nn host 224.3.10.1



			'8、设置通知脚本'(编写脚本)
				$ vim notify.sh
				#!/bin/bash
				#
				contact='root@localhost'

				notify() {
					mailsubject="$(hostname) to be $1, vip floating"
					mailbody="$(date +'%F %T'): vrrp transition, $(hostname) changed to be $1"
					echo "$mailbody" | mail -s "$mailsubject" $contact
				}

				case $1 in
				master)
					notify master
					;;
				backup)
					notify backup
					;;
				fault)
					notify fault
					;;
				*)
					echo "Usage: $(basename $0) {master|backup|fault}"
					exit 1
					;;
				esac	

				$ chmod +x notify.sh 
				$ bash -n notify.sh 

			9、传送脚本
				$ scp -p notify.sh root@172.16.3.30:/root

			10、调用脚本，完成通知：(删除VI_2，方便观察)
				NODE1：
					$ vim /etc/keepalived/keepalived.conf
					在vrrp_instance_VI_1{}添加：  !!!!!!!!!!!!!! --> 这里需要加上引号
					notify_master "/etc/keepalived/notify.sh master"
					notify_backup "/etc/keepalived/notify.sh backup"
					notify_fault "/etc/keepalived/notify.sh fault"

				NODE2：
					同样操作

			11、重启服务，查看状态，并查看邮件(mail命令) --> 两台都要操作
				$ systemctl restart keepalived











	'虚拟服务器：'
	
		'配置ipvs的高可用'

!!!	!!!	'配置之前注意要同步时间'

		配置参数：'只支持tcp'
			virtual_server IP port | virtual_server fwmark int   #支持IP PROT 或者防火墙标记
			{
				...
				real_server {
					...
				}
				...
			}
			
			常用参数：
				 delay_loop <INT> 						'：服务轮询的时间间隔；'
				 lb_algo rr|wrr|lc|wlc|lblc|sh|dh 		'：定义调度方法；'
				 lb_kind NAT|DR|TUN                     '：集群的类型；'
				 persistence_timeout <INT>				'：持久连接时长；'
				 protocol TCP 							'：服务协议，仅支持TCP；'
				sorry_server <IPADDR> <PORT>			'备用服务器地址；'
				

				real_server <IPADDR> <PORT> 			'每一个realserver定义一个段'
				{
					 weight <INT>
					 notify_up <STRING>|<QUOTED-STRING>
					 notify_down <STRING>|<QUOTED-STRING>
					 HTTP_GET|SSL_GET|TCP_CHECK|SMTP_CHECK|MISC_CHECK { ... }：定义当前主机的健康状态检测方法；
				}
				
				HTTP_GET|SSL_GET：应用层检测
				
				HTTP_GET|SSL_GET { 							'检测逻辑定义'
					url {
						path <URL_PATH> 					：定义要监控的URL；
						status_code <INT> 					：判断上述检测机制为健康状态的响应码；
						digest <STRING> 					：判断上述检测机制为健康状态的响应的内容的校验码；(一般只做响应码检查)  --> 使用 `genhash`命令可以生成md5的校验码
					}
					nb_get_retry <INT> 					!	：重试次数；
					delay_before_retry <INT> 			!	：重试之前的延迟时长；
					connect_ip <IP ADDRESS>					：向当前RS的哪个IP地址发起健康状态检测请求
					connect_port <PORT>						：向当前RS的哪个PORT发起健康状态检测请求
					bindto <IP ADDRESS>						：发出健康状态检测请求时使用的源地址；
					bind_port <PORT>						：发出健康状态检测请求时使用的源端口；
					connect_timeout <INTEGER>			!	：连接请求的超时时长；
				}
				
				 TCP_CHECK {
				 	nb_get_retry NUMBER					!	：超时时间
					connect_ip <IP ADDRESS>					：向当前RS的哪个IP地址发起健康状态检测请求
					connect_port <PORT>						：向当前RS的哪个PORT发起健康状态检测请求
					bindto <IP ADDRESS>						：发出健康状态检测请求时使用的源地址；
					bind_port <PORT>						：发出健康状态检测请求时使用的源端口；
					connect_timeout <INTEGER>			!	：连接请求的超时时长；(一般在TCP_CHECK中只定义这个选项即可)
				}

				TCP_CHECK使用示例：
					TCP_CHECK {
						nb_get_retry 3
						delay_before_retry 2
						connect_timeout 3
					}	


			'配置实例：'
				vrrp_instance VI_1 {
				    state BACKUP
				    interface eno16777736
				    virtual_router_id 66
				    priority 95
				    advert_int 1
				    authentication {
				        auth_type PASS
				        auth_pass maxie95
				    }
				    virtual_ipaddress {
				        172.16.3.100/16 dev eno16777736 label eno16777736:0
				    }
				}

				virtual_server 172.16.3.100 80 {
				    delay_loop 3
				    lb_algo rr
				    lb_kind DR
				    #nat_mask 255.255.255.0
				    protocol TCP

				    real_server 172.16.3.20 80 {
				        weight 1
				        HTTP_GET {
				            url {
				              path /
				              status_code 200
				            }
				            connect_timeout 3
				            nb_get_retry 3
				            delay_before_retry 3
				        }
				    }
				    real_server 172.16.3.30 80 {
				        weight 2
				        HTTP_GET {
				            url {
				              path /
				              status_code 200
				            }
				            connect_timeout 3
				            nb_get_retry 3
				            delay_before_retry 3
				        }
				    }
				}
				



'双主模型：'
	实现的功能：
		解放调度器的压力，使调度器的访问量均衡到另一台调度器；
		减轻调度器的瓶颈








回顾：
	keepalived: HA Cluster 
		VRRP(虚拟冗余路由协议)协议的实现 --> floating IP 
			vrrp_instance：虚拟路由器 --> 物理路由器
				VRID：virtual_router_id 虚拟路由ID
				Master/Backup：
					一主一备/一主多备
					priority：优先级
				抢占模式/非抢占模式：nopreempt
				只要在组播域内都是集群成员 --> 需要设置消息验证 --> 设置简单密码(最多8位)

			ipvs wrapper：提供ipvs规则的生成

			checkers：对各VS的RS做健康状态检查
				应用层检测：HTTP_GET，SSL_GET，SMTP_CHECK
				传输层检测：TCP_CHECK
				自定义检测：MISC_CHECK
					使用自定义脚本检测，根据脚本返回的值来判断状态


'keepalived高可用Nginx'

	在nginx代理服务器的外网网口上做虚拟路由器+虚拟IP，达到'IP地址漂移'

	也可以实现双主，两个虚拟路由器 --> 使用DNS的A记录解析2个虚拟IP地址即可



	拓扑结构：
		1、两台Nginx代理服务器
			需要都有两张网卡 --> 一个内网 一个公网
		2、两台RS，一张内网网卡


	keepalived调用外部的辅助脚本进行资源监控
		使用'killall -0 nginx'命令：向指令进程发送0号信号，探测该进程是否启动 

		分两步：(1) 先定义一个脚本；(2) 调用此脚本；
			vrrp_script <SCRIPT_NAME> {				#定义脚本，要在vrrp_instance之前(以及之外，不在实例的定义范围内)定义
				script ""
				interval INT 
				weight -INT 
				fall 2								#
				rise 1								#
			}
			
			track_script { 							#调用脚本，定义在每个vvrp_instance中，如果有多个的话
				SCRIPT_NAME_1
				SCRIPT_NAME_2
				...
			}

			'其中各参数意义：'
			script "" ：脚本执行的内容
			interval INT：健康检查周期
			weight -INT ：优先级变化幅度
			fall: 判定服务异常的检查次数 
			rise: 判定服务正常的检查次数




			'脚本示例：检测nginx资源状态'
			1、该脚本检测ngnix的运行状态，并在nginx进程不存在时尝试重新启动ngnix，如果启动失败则停止keepalived，准备让其它机器接管。
				#!/bin/bash
				counter=$(ps -C nginx --no-heading|wc -l)
				if [ "${counter}" = "0" ]; then
				    /usr/local/bin/nginx
				    sleep 2
				    counter=$(ps -C nginx --no-heading|wc -l)
				    if [ "${counter}" = "0" ]; then
				        /etc/init.d/keepalived stop
				    fi
				fi




			2、	#!/bin/bash
				# curl -IL http://localhost/member/login.htm
				# curl --data "memberName=fengkan&password=22" http://localhost/member/login.htm
				count=0
				for (( k=0; k<2; k++ ))
				do
				    check_code=$( curl --connect-timeout 3 -sL -w "%{http_code}\\n" http://localhost/login.html -o /dev/null )
				    if [ "$check_code" != "200" ]; then
				        count=$(expr $count + 1)
				        sleep 3
				        continue
				    else
				        count=0
				        break
				    fi
				done
				if [ "$count" != "0" ]; then
				#   /etc/init.d/keepalived stop
				    exit 1
				else
				    exit 0
				fi


		


	'示例：高可用nginx服务'
		
			! Configuration File for keepalived

			global_defs {
				notification_email {
					root@localhost
				}
				notification_email_from keepalived@localhost
				smtp_server 127.0.0.1
				smtp_connect_timeout 30
				router_id node1
				vrrp_mcast_group4 224.0.100.19
			}

			vrrp_script chk_down {
				script "[[ -f /etc/keepalived/down ]] && exit 1 || exit 0" #文件如果存在，则降低keepalived的优先级，自动进入备用模式。
				interval 1
				weight -5
			}

			vrrp_script chk_nginx {
				script "killall -0 nginx && exit 0 || exit 1"
				interval 1  						#这里的检查时间，如果想让keepalived工作在非抢占模式，这里的检测时间要大于nginx重启并自检的时间
				weight -5
				fall 2
				rise 1
			}

			vrrp_instance VI_1 {
				state MASTER
				interface eno16777736
				virtual_router_id 14
				priority 100
				advert_int 1
				authentication {
					auth_type PASS
					auth_pass 571f97b2
				}
				virtual_ipaddress {
					10.1.0.93/16 dev eno16777736
				}
				track_script {
					chk_down
					chk_nginx
				}

				track_interface {
					eno16777736
					eno33554960
				}

				notify_master "/etc/keepalived/notify.sh master"
				notify_backup "/etc/keepalived/notify.sh backup"
				notify_fault "/etc/keepalived/notify.sh fault"
			}


		'不应该让备用节点的nginx处在停止状态，在进入backup时，也启动nginx'
			backup) 
				systemctl start nginx 
				notify backup


		'双主时的notify脚本，处于fault和backup也不能在脚本中定义停止nginx服务'


		'notify脚本':
			1、实现服务的启动
			2、实现进入各种模式的邮件通知
			3、实现进入各种模式，执行各种脚本























		