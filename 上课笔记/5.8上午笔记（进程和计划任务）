5.8上午笔记（进程和计划任务）


复习：
	centos6：多网卡绑定 
	centos7：多网卡绑定：nmcli connecition add type bond

	进程：
		centos7：第一个进程 pid=1 systemd
		centos6：第一个进程，pid=1，init



进程：
	pstree命令可以查看

	进程之间相互直接不干扰，各有各的内存空间

	进程切换：（比较消耗资源）
		切换时，会保存上一个进程的状态（信息）


线程：thread process
	轻量级的进程

	一个进程里的多个线程：
		每个线程不是独立存在的，是相互可以共享资源的。


	线程消耗资源小于进程。



'uptime命令：'
	
	$ uptime
 	09:10:02 up  7:07,  5 users,         load average: 0.00, 0.01, 0.05
 	当前时间 系统已启动的时间 当前登录用户总数	  系统负载均衡（1，5，10分钟的平均负载，一般不会超过1）

 	系统平均负载：
 		指在特定时间间隔内运行队列中的平均进程数

 	通常每个CPU内核的当前活动进程数不大于3，那么系统的性能良好。
 		如果每个CPU内核的任务数大于5，那么此主机的性能有严重问题



'top命令：'
	PID 	USER      		PR  			NI    			VIRT    	RES    			SHR S    %CPU %MEM     TIME+     COMMAND
	进程号	执行命令的用户		top中的优先级		NICE的优先级		虚拟内存		实际分配物理内存   共享内存   CPU  内存      运行时间   命令

	选项：
		-d #: 指定刷新时间间隔，默认为3秒
		-b: 全部显示所有进程
		-n #: 刷新多少次后退出

	top的内置命令：
		排序：
			P：以占据CPU百分比
			M：占据内存百分比,%MEM
			T：累积占据CPU时长,TIME+

	首部信息显示（`切换各状态的显示方式`）：
		uptime信息：l命令
		tasks及cpu信息：t命令
		cpu分别显示：1 (数字)
		memory信息：m命令

	`在执行了top命令之后的界面使用的命令`
		q：退出命令
		s：修改刷新时间间隔
		k PID：终止指定进程
			15默认kill掉进程
		W：保存文件


	'%CPU(s)栏位信息简介'
		us：用户空间
		sy：内核空间
		ni：调整nice时间
		id：空闲
		wa：等待IO时间
		hi：硬中断（通过硬件实现中断）
		si：软中断（模式切换）(进程之间切换使用)
		st：虚拟机偷走的时间


'htop命令：'
	interactive process viewer

	语法：
		htop [-dChusv]

	选项：
		-d #: 指定延迟时间；
		-u UserName: 仅显示指定用户的进程
		-s COLUME: 以指定字段进行排序

	子命令：
		s: 跟踪选定进程的系统调用
		l: 显示选定进程打开的文件列表
		a：将选定的进程绑定至某指定CPU核心
		t: 显示进程树


'内存工具：'
	
	vmstat 命令：虚拟内存信息

	语法：
		vmstat[options] [delay [count]]

	选项：
		-s: 显示内存的统计数据
			
	实例：
		$ vmstat 2 5   （每2秒刷新一次，一共刷5次，结束）


	$ vmstat
	procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
	 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
	 1  0      0 2956912   1432 610832    0    0     5     0   14   14  0  0 100  0  0

		procs一栏:
			r：可运行（正运行或等待运行）进程的个数，和核心数有关
			b：处于不可中断睡眠态的进程个数(被阻塞的队列的长度)

		memory：
			swpd: 交换内存的使用总量
			free：空闲物理内存总量
			buffer：用于buffer的内存总量
			cache：用于cache的内存总量

		swap一栏中：
		 	si：从磁盘交换进内存的数据速率(kb/s)
			so：从内存交换至磁盘的数据速率(kb/s)

		io一栏：
		 	bi：从硬盘读数据到内存（1block=1024k）
		 	bo：从内存到硬盘

		system：
			in: interrupts 中断速率，包括时钟
			cs: context switch 进程切换速率
		
		cpu：
			us:Timespent running non-kernel code
			sy: Time spent running kernel code
			id: Time spent idle. Linux 2.5.41前,包括IO-wait time.
			wa: Time spent waiting for IO. 2.5.41前，包括in idle.
			st: Time stolen from a virtual machine. 2.6.11前, unknown


	iostat命令：
		统计CPU和设备IO信息

			实例： $ iostat 1 10 （每秒刷新1次，刷新10次结束）


	pmap命令：
		进程对应的内存映射

		语法：
			pmap[options] pid[...]

		选项：
			-x: 显示详细格式的信息
		
		示例：pmap 1	（查看第一个进程）

		另外一种实现：
			cat /proc/PID/maps
				cat /proc/1/maps


'系统监控工具：'
	
	'glances命令：'
		glances [-bdehmnrsvyz1] [-B bind] [-c server] [-C conffile] [-p port] [-P password] [--password] [-t refresh] [-f file] [-o output]

		实现网络监控，跨网监控

		内建命令：
			a Sort processes automatically l Show/hide logs
			c Sort processes by CPU% b Bytes or bits for network I/O
			m Sort processes by MEM% w Delete warning logs
			p Sort processes by name x Delete warning and critical logs
			iSort processes by I/O rate 1 Global CPU or per-CPU stats
			d Show/hide disk I/O stats h Show/hide this help screen
			f Show/hide file system stats t View network I/O as combination
			n Show/hide network stats u View cumulative network I/O
			s Show/hide sensors stats q Quit (Esc and Ctrl-C also work)
			y Show/hide hddtempstats

		常用选项：
			-b: 以Byte为单位显示网卡数据速率
			-d: 关闭磁盘I/O模块
			-f /path/to/somefile: 设定输入文件位置
			-o {HTML|CSV}：输出格式
			-m: 禁用mount模块
			-n: 禁用网络模块
			-t #: 延迟时间间隔
			-1：每个CPU的相关数据单独显示
			-B：绑定哪个IP地址上
			-s：服务器端

		C/S模式下运行glances命令

		服务器模式：
			$ glances -s -B IPADDR
			-B：绑定哪个IP地址上
			-s：服务器端
			IPADDR: 指明监听的本机哪个地址

		客户端模式：
			$ glances -c IPADDR
			IPADDR：要连入的服务器端地址


	'dstat命令：'
		系统资源统计，代替vmstat，iostat

		语法：
			dstat[-afv] [options..] [delay [count]]

		选项：
			-c: 显示cpu相关信息
			   -C #,#,...,total
			-d: 显示disk相关信息
			   -D total,sda,sdb,...
			-g：显示page相关统计数据
			-m: 显示memory相关统计数据
			-n: 显示network相关统计数据
			-p: 显示process相关统计数据
			-r: 显示io请求相关的统计数据
			-s: 显示swapped相关的统计数据


	'kill命令：'（做第一个视频中最后30分钟以一个httpd kill 的实验）

		向进程发送控制信号，以实现对进程管理,每个信号对应一个数字，信号名称以SIG开头（可省略），不区分大小写

		显示当前系统可用信号：kill –l,trap-l

		选项：
			-SIGNAL:
				-1，-2，-9
				'当signal=0时'
					$ kill -0 4000
						查看PID=4000的进程是否在运行
					$ echo $?
						返回值如果为0，则进程在运行
			-l：显示所有的signal号

		实例：
			kill -1 5790：让5790这个进程重读配置文件


		'常用信号：man 7 signal'
			1) SIGHUP: 无须关闭进程而让其重读配置文件
			2) SIGINT: 中止正在运行的进程；相当于'Ctrl+c'
			3) SIGQUIT:相当于'ctrl+\'
				
				'ctrl + \:
					表示退出 交互式命令的 界面（如bc命令，mail 命令）'

			9) SIGKILL: 强制杀死正在运行的进程
			15) SIGTERM：终止正在运行的进程（正常终止，默认信号）
			18) SIGCONT：继续运行 
				kill -18 PID  #使进程进入到运行状态（前台运行），可以让后台运行和后台休眠的进程进入到前台运行
			19) SIGSTOP：后台休眠
				kill -19 PID  #使进程进入后台休眠（stopped状态）
		
		指定信号的方法：
			(1) 信号的数字标识：1, 2, 9
			(2) 信号完整名称：SIGHUP(3) 信号的简写名称：HUP


		按PID：kill [-SIGNAL] pid…
			kill –n SIGNAL pid;kill–s SIGNAL pid

			
		按名称：killall [-SIGNAL] comm…
			$ kilall -9 httpd
				杀死所有关于httpd的进程

		按模式：pkill [options] pattern
			-SIGNAL
			-u uid: effective user，生效者
			-U uid: real user，真正发起运行命令者
			-t terminal: 与指定终端相关的进程
			-l: 显示进程名（pgrep可用）
			-a: 显示完整格式的进程名（pgrep可用）
			-P pid: 显示指定进程的子进程

			实例：
				pkill -t pts/4 ：杀死pts/4下的所有进程

		再生进程：
			kill之后还会生成（换了个PID号）



'作业管理：'
	
	Linux的作业控制：
		前台作业：通过终端启动，且启动后一直占据终端
		后台作业：可通过终端启动，但启动后即转入后台运行（释放终端）

	让作业运行于后台：
		（1）运行中的作业：ctrl + z
		（2）尚未启动的作业：$ COMMAND &

	后台作业虽然被送往后台运行，但其依然与终端相关；退出终端，将关闭后台作业。
		'如果希望送往后台后，剥离与终端的关系'

		$ nohup COMMAND &> /dev/null &（把标准输出到垃圾箱）	
			默认会输出到/root/nohub.out文件里

		$ screen;COMMAND
			关闭终端后，连接另一个终端后，恢复命令执行下面这条命令
		$ screen -r

	'查看当前终端的所有作业：'（必须在当前终端执行此命令）
		$ jobs 

	'作业控制：'
		$ fg[[%]JOB_NUM]：把指定的后台作业调回前台
			$ jobs
			$ fg %1
		
		$ bg[[%]JOB_NUM]：让送往后台的作业在后台继续运行
			$ jobs 
			$ bg %1

		$ kill [%JOB_NUM]：终止指定的作业
			$ jobs
			$ kill %1
				[root@centos7 ~]# jobs
				[1]+  已停止               ping 172.16.0.1
				[root@centos7 ~]# kill %1
				[root@centos7 ~]# jobs
				[1]+  已终止               ping 172.16.0.1

	'作业的状态：'
		1、前台运行：(running)
			$ COMMAND
		2、后台运行：
			$ COMMAND &
		3、后台休眠（stopped）
			$ COMMAND 
			执行Ctrl + z键


'并行运行：'

	同时运行多个进程，提高效率
	
	方法1
		vi all.sh
		f1.sh &
		f2.sh &
		f3.sh &

	方法2
		(f1.sh&);(f2.sh&);(f3.sh&)

	方法3
		{ f1.sh& f2.sh& f3.sh& }



'任务计划：'
	
	Linux任务计划、周期性任务执行
		未来的某时间点执行一次任务：
			
			'at命令：'（交互式命令）
				CentOS7：
					查看at是否开机启动：
						$ systemctl is-enabled atd
					查看当前运行状态：
						$ systemctl statuts atd

				CentOS6:
					查看是否开机运行：
						$ chkconfig --list atd 
					查看运行状态：
						$ service status atd

				语法：
					at [options] TIME

				TIME:定义出什么时候进行at 这项任务的时间
					HH:MM [YYYY-mm-dd]
					noon（中午）, midnight（午夜0：00）, teatime（4pm）
					tomorrow
					now+#{minutes,hours,days, OR weeks}
						now+10min
						now+1h
						now+1d

					HH:MM 02:00
						在今日的HH:MM 进行，若该时刻已过，则明天此时执行任务
					
					HH:MM YYYY-MM-DD 02:00 2016-09-20
						规定在某年某月的某一天的特殊时刻进行该项任务
					
					HH:MM[am|pm] [Month] [Date]
						04pm March 17
						17:20 tomorrow
					
					HH:MM[am|pm] + number [minutes|hours|days|weeks]
						在某个时间点再加几个时间后才进行该项任务
						now + 5 minutes
						02pm + 3 days

				常用选项：
					-V 显示版本信息:
					-l: 列出指定队列中等待运行的作业；相当于'atq命令'
					-d: 删除指定的作业；相当于'atrm命令'
						at -d 4：删除编号为4的计划任务
						atrm 4 
					-c: 查看具体作业任务
						at -c 7：查看具体的任务（相当于查看/var/spool/at中创建的计划任务文件）

					-f /path/from/somefile：从指定的文件中读取任务
						at -f /root/atjob.txt 17:30

					-m:当任务被完成之后，将给用户发送邮件，即使没有标准输出


				创建计划任务以后，会在'/var/spool/at'下创建计划任务的文件（重启关机，不会影响计划任务）


				执行方式：
					1）交互式2）输入重定向3）at –f 文件
				
				依赖与atd服务,需要启动才能实现at任务
				
				'at队列存放在/var/spool/at目录中'
					/etc/at.{allow,deny}控制用户是否能执行at任务
						白名单：/etc/at.allow默认不存在，只有该文件中的用户才能执行at命令
						黑名单：/etc/at.deny默认存在，拒绝该文件中用户执行at命令，而没有在at.deny文件中的使用者则可执行
					
						allow优先级最高，deny文件次于allow 

						at.allow：有此文件，deny无效，只有此文件中的用户可以使用at命令
						at.deny：此文件中的用户，拒绝使用at命令；
						如果两个文件都不存在，只有root 可以执行at 命令

						如果一个用户都在这俩文件内，则用户拥有allow权限，可以执行at命令
						如果allow文件不存在，deny文件存在：
							如果一个用户不在deny文件中，则可以执行at命令；
							如果一个用户在deny文件中，则不能执行at命令。



				实例：
					'at退出需要使用Ctrl+D键退出'
					[root@centos7 ~]# at 14:13
					at> echo at is starting
					at> touch /root/test.txt
					at> <EOT>
					job 1 at Mon May  8 14:13:00 2017
					
					[root@centos7 ~]# at -l
					1	Mon May  8 14:13:00 2017 a root

					[root@centos7 ~]# cat atjob.txt | at 17:00

				`注意：作业执行命令的结果中的标准输出和错误以邮件通知给相关用户`

					当同一时间有多个任务，计划任务会同时执行多个任务（时间片的概念），避免死循环

					在写'at'计划任务时，尽量实现无标准输出的状态（避免垃圾邮件）
						实现了无标准输出了之后，没办法知道计划任务是否正确执行；
						需要在执行'at命令后'添加-m选项，实现执行成功计划任务，发送邮件



	'周期性任务计划 cron：'

		相关的程序包：
			cronie: 主程序包，提供crond守护进程及相关辅助工具
			cronie-anacron：cronie的补充程序，用于监控cronie任务执行状况，如cronie中的任务在过去该运行的时间点未能正常运行，则anacron会随后启动一次此任务
			crontabs：包含CentOS提供系统维护任务

		确认服务是否启动：
			[root@centos7 ~]# systemctl is-enabled crond.service
			enabled
			[root@centos7 ~]# systemctl status crond.service

		计划周期性执行的任务提交给crond，到指定时间会自动运行
			系统cron任务：系统维护作业
				/etc/crontab
			用户cron任务：
				crontab命令

		日志：/var/log/cron


		系统cron任务:/etc/crontab

			注释行以# 开头
			详情参见man 5 crontab

			# Example of job definition:
			# .----------------minute (0 -59)
			# | .-------------hour (0 -23)
			# | | .----------day of month (1 -31)
			# | | | .-------month (1 -12) OR jan,feb,mar,apr...
			# | | | | .----day of week (0 -6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
			# | | | | |
			# * * * * * user-name command to be executed

			其中：day of month 和day of week是或者的关系，两者都执行

		例如：晚上9点10分运行echo命令(在下面添加这一行)
			10 21 * * * centos /bin/echo "Howdy!"

			时间表示法：
				•(1) 特定值
				给定时间点有效取值范围内的值
				•(2) *
				给定时间点上有效取值范围内的所有值
				表示“每...”
				•(3) 离散取值
				#,#,#
				•(4) 连续取值
				#-#
				•(5) 在指定时间范围上，定义步长
				/#: #即为步长 每几分钟/小时/天

			时间格式：
				@reboot		Run once after reboot.（重启就会执行）
				@yearly		0 0 1 1 *
					@annually	0 0 1 1 *
					eg:
						@reboot root touch /root/reboot.log

				@monthly	0 0 1 * *
				@weekly		0 0 * * 0
				@daily		0 0 * * *
				@hourly		0 * * * *


			示例：每3小时echo和wall命令
				0 */3 * * * centos /bin/echo “howdy”;/usr/bin/wall “welcome to Magedu!”

			系统的计划任务:
				/etc/crontab
				/etc/cron.d/ 配置文件
				/etc/cron.hourly/ 脚本
				/etc/cron.daily/脚本
				/etc/cron.weekly/脚本
				/etc/cron.monthly/脚本

				可以把自己的计划任务

			'run-parts命令：'
				用于运行定期作业的配置和脚本

				后跟一个目录，意思就是运行这个目录中的所有脚本

				语法：
					run-parts [--list|--test] <directory>


	'anacron系统：'
		运行计算机关机时cron不运行的任务，CentOS6以后版本取消anacron服务，由crond服务管理

		对笔记本电脑、台式机、工作站、偶尔要关机的服务器及其它不一直开机的系统很重要对很有用

		配置文件：/etc/anacrontab，负责执行/etc/ cron.daily /etc/cron.weekly /etc/cron.monthly中系统任务。
			•字段1：如果在这些日子里没有运行这些任务……
			•字段2：在重新引导后等待这么多分钟后运行它
			•字段3：任务识别器，在日志文件中标识
			•字段4：要执行的任务

		由/etc/cron.hourly/0anacron执行

		当执行任务时，更新/var/spool/anacron/cron.daily 文件的时间戳

		/usr/bin/on_ac_power命令：查看Linux是否是电池供电(echo $?值如果为1，则电池供电)


'管理临时文件：'
	
	CentOS6使用/etc/cron.daily/tmpwatch定时清除临时文件

	CentOS7使用systemd-tmpfiles-setup服务实现

	配置文件：
		/etc/tmpfiles.d/*.conf
		/run/tmpfiles.d/*.conf
		/usr/lib/tmpfiles/*.conf

	/usr/lib/tmpfiles.d/tmp.conf
		d /tmp 1777 root root 10d
		d /var/tmp 1777 root root 30d

	命令：
		systemd-tmpfiles –clean|remove|create configfile



'普通用户的计划任务：'

	'crontab命令：'（具有SUID权限）
		crontab命令定义，每个用户都有专用的cron任务文件：/var/spool/cron/USERNAME

		语法：
			crontab[-u user] [-l | -r | -e] [-i]
			-l: 列出所有任务；
			-e: 编辑任务；
				进入vi模式，创建一个临时文件，供用户来编辑计划任务
				在crontab格式中无需再加 username选项了
				定义-e进入到vim模式中：
					export EDITOR=vim
				永久定义：
					vim /erc/profile.d/cron.sh
						export EDITOR=vim
					或者
					vim /root/.bashrc
						export EDITOR=vim
					
					vipw：等同于vi /etc/passwd


			-r: 移除'所有任务'；
			-i：同-r一同使用，以交互式模式移除指定任务
			-u user: 仅root可运行，指定用户管理cron任务

		恢复：
			根据日志，来恢复计划任务
			cat /var/log/cron 
			日志会记录详细的计划任务信息


		控制用户执行计划任务：
			/etc/cron.{allow,deny}

			默认只有deny文件，道理与'at命令'相同

			如果已经创建了计划任务，就算是用户被加入到deny中，之前的计划任务还是会执行


'at与crontab'
	一次性作业使用at
	重复性作业使用crontab
		Create 	at time 	crontab -e
		List 	at -l 		crontab -l
		Details at -c 		jobnumN/A
		Remove 	at -d 		jobnumcrontab -r
		Edit 	N/A 		crontab -e

	没有被重定向的输出会被邮寄给用户

	根用户能够修改其它用户的作业

	注意：运行结果的标准输出和错误以邮件通知给相关用户
		(1) COMMAND > /dev/null
		(2) COMMAND &> /dev/null

	对于cron任务来讲，%有特殊用途；
	如果在命令中要使用%，则需要转义，将%放置于单引号中，则可不用转义



思考：
	(1) 如何在秒级别运行任务？
		* * * * * for min in 0 1 2; do echo "hi"; sleep 20; done
	(2) 如何实现每7分钟运行一次任务?

	sleep命令：
		语法：
			sleep NUMBER[SUFFIX]...
				
				SUFFIX:
				s: 秒, 默认
				m: 分
				h: 小时
				d: 天

	usleep命令：
		微秒


作业：

1、每天的2点和12点整，将/etc备份至/testdir/backup目录中，保存的文件名称格式为“etcbak-yyyy-mm-dd-HH.tar.xz”
	$ vim /etc/cron.d/etcbackup
		0 2,12 * * * root /root/0508shell/backup.sh
	$ cd /root/0508shell
	$ vim backup.sh 
		#!/bin/bash

		BACKUP=/testdir/backup/

		if [ -d $BACKUP ];then
			tar -Jcf ${BACKUP}/etecbak-`date +"%Y-%m-%d-%H"`.tar.xz /etc &> /dev/null
		else
			mkdir -p /testdir/backup/  &> /dev/null
			tar -Jcf ${BACKUP}/etecbak-`date +"%Y-%m-%d-%H"`.tar.xz /etc &> /dev/null
		fi


2、每周2, 4, 7备份/var/log/messages文件至/logs目录中，文件名形如“messages-yyyymmdd”
	$ vim /root/0508shell
		#!/bin/bash

		LOG=/logs
		MES=/var/log/messages

		if [ -d $LOG ];then
		        tar -zcf messages-`date +"%Y%m%d"`.tar.gz  $MES &> /dev/null
		else
		        mkidr -p $LOG
		        tar -zcf messages-`date +"%Y%m%d"`.tar.gz  $MES &> /dev/null
		fi
	$ vim /etc/cron.d/message-backup
		#every week on Tue,Thu,Sun backup the file of /var/log/messages to the /logs

		0 0 * * 2,4,7 root /root/0508shell/log-backup.sh



3、每两小时取出当前系统/proc/meminfo文件中以S或M开头的信息追加至/tmp/meminfo.txt文件中
	$ vim /proc/meminfo
		#!/bin/bash

		MEM=/proc/meminfo
		TXT=/tmp/meminfo.txt

		if [ -f $MEM ]
		        egrep "^(S|M)" $MEM  &>> $TXT
		else
		        echo "$MEM文件不存在，请检查您的系统是否存在此文件."
		fi
	$ vim /etc/cron.d/meminfo
		#backup the file of /proc/meminfo every 2hours.
		0 */2 * * * root /root/0508shell/meminfo.sh



4、工作日时间，每10分钟执行一次磁盘空间检查，一旦发现任何分区利用率高于80%，就执行wall警报 # df -h | tr -s ' ' | egrep -v "^/dev/sr0" | cut -d" " -f1,5 | egrep "\<[[:digit:]]+%"  |
	$ vim disk-check.sh
		#!/bin/bash
		#Dis:check disk space ,if any disk space used over 80 percent ,just wall for waring
		df -h | tr -s ' ' | egrep -v "^/dev/sr0" | cut -d" " -f5 | egrep -o "\<[[:digit:]]+"  | sort -nr  &> /root/df.txt

		WARN=`head -1 /root/df.txt`

		if [ $WARN -gt 80 ];then
		        DISK=`df -h | grep "${WARN}%" | cut -d" " -f1`
		        [ -z "$DISK" ] && echo "查找失败,退出退出!" && exit 3
		        wall "${DISK} used over 80 percent , please check u free space of the HardDisk !!!" && exit 1
		else
		        echo "There is no disk space used over 80 percent."  && exit 2
		fi

	$ vim /etc/cron.d/disk-check
		#工作日时间，每10分钟执行一次磁盘空间检查，一旦发现任何分区利用率高于80%，就执行wall警报

		*/10 * * * 1-6 root /root/0508shell/disk-check.sh





